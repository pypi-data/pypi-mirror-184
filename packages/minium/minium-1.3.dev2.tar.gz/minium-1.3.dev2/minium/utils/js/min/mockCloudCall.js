function mockCloudCall(){if(!global.__minium_cloud_call_mocked){function e(r,i){if(typeof r!=typeof i)return!1;switch(typeof r){case"string":return!!new RegExp(r).exec(i);case"number":return r===i;case"object":if(r instanceof Array){if(r.length!=i.length)return!1;for(var l=0;l<r.length;l++)if(!e(r[l],i[l]))return!1;return!0}for(var n in r)if("success"!=n&&"fail"!=n&&"complete"!=n&&"_miniMockType"!=n){if(void 0===i[n])return!1;if(!e(r[n],i[n]))return!1}return!0}return!1}Object.defineProperty(global,"__minium_cloud_call_mocked",{value:!0,writable:!1});const i={};function r(r){return function(l){if(!global[`__minium_${r}_mock_rule`])return i[r].call(this,l);for(var n=0;n<global[`__minium_${r}_mock_rule`].length;n++){var c=global[`__minium_${r}_mock_rule`][n];if(e(c,l)){if(1===c._miniMockType&&([c]=global[`__minium_${r}_mock_rule`].splice(n,1)),console.log(`[minium] ${r} rule match`,c),c.success)return Promise.resolve(c.success);if(c.fail)return Promise.reject(c.fail);if(1===c._miniMockType)return}}return i[r].call(this,l)}}["callContainer","callFunction"].forEach((e=>{i[e]=wx.cloud[e],Object.defineProperty(wx.cloud,e,{writable:!0,value:r(e)})}))}}
