# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['flask_jeroboam']

package_data = \
{'': ['*']}

install_requires = \
['Flask>=2.1.3,<3.0.0', 'pydantic>=1.10.2,<2.0.0']

setup_kwargs = {
    'name': 'flask-jeroboam',
    'version': '0.0.2a0',
    'description': 'Bringing FastAPI Developer experience to Flask.',
    'long_description': '<h1 align="center">Flask-Jeroboam</h1>\n\n⚠️ Although Flask-Jeroboam has been extracted from code running in production, it is still in a very early stage, and still overfitted to one specific use case. Don\'t use in production just yet.\n\n<div align="center">\n\n<i>Flask-Jeroboam is a Flask extension for request parsing, response serialization and OpenAPI auto-documentation.</i>\n\n[![PyPI](https://img.shields.io/pypi/v/flask-jeroboam.svg)][pypi_]\n[![Python Version](https://img.shields.io/pypi/pyversions/flask-jeroboam)][python version]\n[![License](https://img.shields.io/github/license/jcbianic/flask-jeroboam?color=green)][license]\n[![Commit](https://img.shields.io/github/last-commit/jcbianic/flask-jeroboam?color=green)][commit]\n\n[![Read the documentation at https://flask-jeroboam.readthedocs.io/](https://img.shields.io/readthedocs/flask-jeroboam/latest.svg?label=Read%20the%20Docs)][read the docs]\n[![Maintainability](https://api.codeclimate.com/v1/badges/181b7355cee7b1316893/maintainability)](https://img.shields.io/codeclimate/maintainability/jcbianic/flask-jeroboam?color=green)\n[![Test Coverage](https://api.codeclimate.com/v1/badges/181b7355cee7b1316893/test_coverage)](https://img.shields.io/codeclimate/coverage/jcbianic/flask-jeroboam?color=green)\n[![Tests](https://github.com/jcbianic/flask-jeroboam/workflows/Tests/badge.svg)][tests]\n[![Black](https://img.shields.io/badge/code%20style-black-000000.svg)][black]\n\n[pypi_]: https://pypi.org/project/flask-jeroboam/\n[status]: https://pypi.org/project/flask-jeroboam/\n[python version]: https://pypi.org/project/flask-jeroboam\n[read the docs]: https://flask-jeroboam.readthedocs.io/\n[tests]: https://github.com/jcbianic/flask-jeroboam/actions?workflow=Tests\n[codecov]: https://app.codecov.io/gh/jcbianic/flask-jeroboam\n[pre-commit]: https://github.com/pre-commit/pre-commit\n[black]: https://github.com/psf/black\n[commit]: https://img.shields.io/github/last-commit/jcbianic/flask-jeroboam\n\n</div>\n\n---\n\n**Documentation**: [https://flask-jeroboam.readthedocs.io/](https://flask-jeroboam.readthedocs.io/)\n\n**Source Code**: [https://github.com/jcbianic/flask-jeroboam](https://github.com/jcbianic/flask-jeroboam)\n\n---\n\nFlask-Jeroboam is a thin layer on top of Flask to make request parsing, response serialization and auto-documentation as smooth and easy as in FastAPI.\n\nIts main features are:\n\n- OpenAPI Auto-Documentation based on endpoint type annotations\n- Request parsing of endpoint arguments based on type annotations with pydantic BaseModel\n- Response serialization facilitation with pydantic\n\n## How to install\n\nYou can install _flask-jeroboam_ via [pip], or any other tool wired to [PyPI]:\n\n```console\n$ pip install flask-jeroboam\n```\n\n## How to use: Minimum Relevant Example\n\n_flask-jeroboam_ exposes two public classes: **Jeroboam** and **APIBlueprint**. They can be used as drop-in replacement of Flask\'s **Flask** and **Blueprint** classes.\n\n```python\nfrom flask-jeroboam import Jeroboam\n\napp = Jeroboam()\n\n@app.get("ping")\ndef ping():\n    return "pong"\n```\n\nThis toy example would behave exactly like a regular Flask app. You would start your server just like you would with Flask. `flask run` would do perfectly fine here.\n\nThen hitting the endpoint with `curl localhost:5000/ping` would return text response `pong`.\n\nLet\'s try a more significant and relevant example and build a simplified endpoint to retrive a list of wines.\n\n```python\nfrom typing import List, Dict\nfrom typing import Tuple, Optional\n\nfrom pydantic import BaseModel\nfrom pydantic import Field\n\nfrom flask_jeroboam import Jeroboam\n\n\napp = Jeroboam(__name__)\n\n# First we hard-code a minimal wine database. Tasty.\n# In the real world this would obviously go in a proper database.\nwines: List[Dict[str, str]] = [\n    {\n        "appellation": "Margaux",\n        "domain": "Château Magaux",\n        "cuvee": "Pavillon Rouge",\n        "color": "Rouge",\n    },\n    {\n        "appellation": "Meursault",\n        "domain": "Domaine Comte Armand ",\n        "cuvee": "Meursault",\n        "color": "Blanc",\n    },\n    {\n        "appellation": "Champagne",\n        "domain": "Billecart-Salmon",\n        "cuvee": "Brut - Blanc de Blancs",\n        "color": "Blanc",\n    },\n    {\n        "appellation": "Champagne",\n        "domain": "Krug",\n        "cuvee": "Grande Cuvée - 170ème Edition",\n        "color": "Blanc",\n    },\n    {\n        "appellation": "Champagne",\n        "domain": "Maison Taittinger",\n        "cuvee": "Grand Cru - Brut - Prélude",\n        "color": "Blanc",\n    },\n]\n\n# We then define Parser and Serialization Models.\n# In the real world this would definitely go into seperate files.\n\n\nclass WineOut(BaseModel):\n    """Serialization Model for each individual wine."""\n\n    appellation: str\n    domain: str\n    cuvee: str\n    color: str\n\n\nclass WineListOut(BaseModel):\n    """Serialization Model for a list of wines."""\n\n    wines: List[WineOut]\n    count: int\n    total_count: int\n\n\nclass WineListIn(BaseModel):\n    """The Request Model take pagination parameters and a search term."""\n\n    page: int = Field(default=1, ge=1)\n    per_page: int = Field(default=2, ge=1, le=5)\n    search: Optional[str] = Field(default=None)\n\n\n# We then define a CRUD function to use inside our endpoint.\n\ndef get_wines(wines_in: WineListIn) -> Tuple[List[Dict[str, str]], int]:\n    """Basic READ function that take a parsed request object and return a list of matching wines."""\n    if wines_in.search:\n        selected_wines = [\n            wine\n            for wine in wines\n            if wines_in.search.lower() in [value.lower() for value in wine.values()]\n        ]\n    else:\n        selected_wines = wines\n    total_count = len(selected_wines)\n    offset = (wines_in.page - 1) * wines_in.per_page\n    max_bound = min(total_count, offset + wines_in.per_page)\n    selected_wines = selected_wines[offset:max_bound]\n    return selected_wines, total_count\n\n\n# Finally we glue everything together in an endpoint.\n@app.get("/wines", response_model=WineListOut)\ndef read_wine_list(wines_in: WineListIn):\n    """Winelist endpoint."""\n    wines, total_count = get_wines(wines_in)\n    return {"wines": wines, "count": len(wines), "total_count": total_count}\n\n\nif __name__ == "__main__":\n    app.run()\n```\n\nYou start/restart your server, then hitting the endpoint with `curl "localhost:5000/wines?page=1&per_page=2&search=Champagne"` would return:\n\n```json\n{\n  "wines": [\n    {\n      "appellation": "Champagne",\n      "domain": "Billecart-Salmon",\n      "cuvee": "Brut - Blanc de Blancs",\n      "color": "Blanc"\n    },\n    {\n      "appellation": "Champagne",\n      "domain": "Krug",\n      "cuvee": "Grande Cuvée - 170ème Edition",\n      "color": "Blanc"\n    }\n  ],\n  "count": 2,\n  "total_count": 3\n}\n```\n\nSee the documentation on more advanced usage: [https://flask-jeroboam.readthedocs.io/](https://flask-jeroboam.readthedocs.io/)\n\n## Motivation\n\n[FastAPI] has been rapidly gaining ground in Python Web Development since its inception in late 2018 ([1][survey]). Besides best-in-class performance, thanks to being based on Starlette, it brings a very compelling API for request parsing and response serialisation that speed up API development by catering for Developer Experience.\n\nWhile it is often compared to [Flask], ([1][ref#1], [2][ref#2] and [3][ref#3]), the comparaison feels a bit unfair. FastAPI is, in the words of its creator [@tiangolo] a thin layer on top of [Starlette], a _lightweight ASGI framework/toolkit, ... for building async web services in Python_ and [Pydantic]. To some extend, Flask is more related to Starlette than it is to [FastAPI].\n\nAlthough there are some excellent Flask extensions dealing with request parsing, response serialisation, and auto-documentation, I wanted something that feel closer to [FastAPI]\'s DX, hence **Flask - Jeroboam**.\n\n[survey]: https://lp.jetbrains.com/python-developers-survey-2021/#FrameworksLibraries\n[ref#1]: https://testdriven.io/blog/moving-from-flask-to-fastapi/\n[ref#2]: https://developer.vonage.com/blog/21/08/10/the-ultimate-face-off-flask-vs-fastapi\n[ref#3]: https://towardsdatascience.com/understanding-flask-vs-fastapi-web-framework-fe12bb58ee75\n\n## A word on performance\n\nOne thing **Flask-Jeroboam** won\'t give you is performance improvement. The heavy lifting is still handled by Flask, so transitionning to **Flask-Jeroboam** won\'t speed up your app. Please bear in mind that FastAPI performance comes from Starlette, not FastAPI itself.\n\n## Who is it intended for ?\n\nFlask developers who find FastAPI compelling but have perfectly good reasons to stick to Flask.\n\n## License\n\nDistributed under the terms of the [MIT license][license],\n**Flask-Jeroboam** is free and open source software.\n\n## Issues\n\nIf you encounter any problems,\nplease [file an issue] along with a detailed description.\n\n## Credits\n\nThe main inspiration of this project comes from [@tiangolo]\'s [FastAPI].\n\nThe heavy-lifting if performed by [Flask] and [pydantic].\n\nThe project was generated from [@cjolowicz]\'s [Hypermodern Python Cookiecutter] template.\n\n[@cjolowicz]: https://github.com/cjolowicz\n[@tiangolo]: https://github.com/tiangolo\n[fastapi]: https://fastapi.tiangolo.com/\n[starlette]: https://www.starlette.io/\n[flask]: https://flask.palletsprojects.com/\n[pydantic]: https://pydantic-docs.helpmanual.io/\n[pypi]: https://pypi.org/\n[hypermodern python cookiecutter]: https://github.com/cjolowicz/cookiecutter-hypermodern-python\n[file an issue]: https://github.com/jcbianic/flask-jeroboam/issues\n[pip]: https://pip.pypa.io/\n\n<!-- github-only -->\n\n[license]: https://github.com/jcbianic/flask-jeroboam/blob/main/LICENSE\n[contributor guide]: https://github.com/jcbianic/flask-jeroboam/blob/main/CONTRIBUTING.md\n[command-line reference]: https://flask-jeroboam.readthedocs.io/en/latest/usage.html\n',
    'author': 'Jean-Christophe Bianic',
    'author_email': 'jc.bianic@gmail.com',
    'maintainer': 'None',
    'maintainer_email': 'None',
    'url': 'https://github.com/jcbianic/flask-jeroboam',
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'python_requires': '>=3.7,<4.0',
}


setup(**setup_kwargs)
