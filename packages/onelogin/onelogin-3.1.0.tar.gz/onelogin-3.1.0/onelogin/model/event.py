"""
    OneLogin API

    OpenAPI Specification for OneLogin  # noqa: E501

    The version of the OpenAPI document: 3.1.0
    Contact: support@onelogin.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from onelogin.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
    OpenApiModel
)
from onelogin.exceptions import ApiAttributeError



class Event(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
        ('event_type_id',): {
            '1': 1,
            '2': 2,
            '3': 3,
            '4': 4,
            '5': 5,
            '6': 6,
            '7': 7,
            '8': 8,
            '9': 9,
            '10': 10,
            '11': 11,
            '12': 12,
            '13': 13,
            '14': 14,
            '15': 15,
            '16': 16,
            '17': 17,
            '18': 18,
            '19': 19,
            '20': 20,
            '21': 21,
            '22': 22,
            '23': 23,
            '24': 24,
            '25': 25,
            '26': 26,
            '27': 27,
            '28': 28,
            '29': 29,
            '30': 30,
            '31': 31,
            '32': 32,
            '33': 33,
            '34': 34,
            '35': 35,
            '36': 36,
            '37': 37,
            '38': 38,
            '39': 39,
            '40': 40,
            '41': 41,
            '42': 42,
            '43': 43,
            '44': 44,
            '45': 45,
            '46': 46,
            '47': 47,
            '48': 48,
            '49': 49,
            '50': 50,
            '51': 51,
            '52': 52,
            '53': 53,
            '54': 54,
            '55': 55,
            '56': 56,
            '57': 57,
            '58': 58,
            '59': 59,
            '60': 60,
            '61': 61,
            '62': 62,
            '63': 63,
            '64': 64,
            '65': 65,
            '66': 66,
            '67': 67,
            '68': 68,
            '69': 69,
            '70': 70,
            '71': 71,
            '72': 72,
            '73': 73,
            '74': 74,
            '75': 75,
            '76': 76,
            '77': 77,
            '78': 78,
            '79': 79,
            '80': 80,
            '81': 81,
            '82': 82,
            '83': 83,
            '84': 84,
            '85': 85,
            '86': 86,
            '87': 87,
            '88': 88,
            '89': 89,
            '90': 90,
            '91': 91,
            '92': 92,
            '95': 95,
            '96': 96,
            '100': 100,
            '101': 101,
            '102': 102,
            '103': 103,
            '104': 104,
            '105': 105,
            '106': 106,
            '110': 110,
            '111': 111,
            '112': 112,
            '113': 113,
            '114': 114,
            '115': 115,
            '116': 116,
            '117': 117,
            '118': 118,
            '119': 119,
            '120': 120,
            '121': 121,
            '122': 122,
            '123': 123,
            '124': 124,
            '125': 125,
            '126': 126,
            '127': 127,
            '128': 128,
            '129': 129,
            '130': 130,
            '131': 131,
            '132': 132,
            '133': 133,
            '134': 134,
            '135': 135,
            '136': 136,
            '137': 137,
            '138': 138,
            '139': 139,
            '140': 140,
            '141': 141,
            '145': 145,
            '146': 146,
            '147': 147,
            '148': 148,
            '149': 149,
            '150': 150,
            '151': 151,
            '152': 152,
            '153': 153,
            '154': 154,
            '155': 155,
            '156': 156,
            '157': 157,
            '158': 158,
            '159': 159,
            '160': 160,
            '161': 161,
            '162': 162,
            '163': 163,
            '164': 164,
            '165': 165,
            '166': 166,
            '167': 167,
            '168': 168,
            '169': 169,
            '170': 170,
            '171': 171,
            '172': 172,
            '173': 173,
            '174': 174,
            '175': 175,
            '176': 176,
            '177': 177,
            '178': 178,
            '179': 179,
            '180': 180,
            '181': 181,
            '182': 182,
            '183': 183,
            '184': 184,
            '185': 185,
            '186': 186,
            '187': 187,
            '188': 188,
            '189': 189,
            '190': 190,
            '191': 191,
            '192': 192,
            '193': 193,
            '194': 194,
            '195': 195,
            '196': 196,
            '197': 197,
            '198': 198,
            '199': 199,
            '200': 200,
            '201': 201,
            '202': 202,
            '203': 203,
            '204': 204,
            '205': 205,
            '206': 206,
            '207': 207,
            '208': 208,
            '209': 209,
            '210': 210,
            '211': 211,
            '212': 212,
            '213': 213,
            '214': 214,
            '215': 215,
            '216': 216,
            '217': 217,
            '218': 218,
            '219': 219,
            '220': 220,
            '221': 221,
            '222': 222,
            '223': 223,
            '224': 224,
            '225': 225,
            '226': 226,
            '227': 227,
            '228': 228,
            '229': 229,
            '230': 230,
            '231': 231,
            '232': 232,
            '233': 233,
            '234': 234,
            '235': 235,
            '236': 236,
            '237': 237,
            '238': 238,
            '239': 239,
            '240': 240,
            '241': 241,
            '242': 242,
            '243': 243,
            '244': 244,
            '245': 245,
            '246': 246,
            '247': 247,
            '248': 248,
            '249': 249,
            '250': 250,
            '251': 251,
            '252': 252,
            '253': 253,
            '254': 254,
            '255': 255,
            '291': 291,
            '300': 300,
            '301': 301,
            '303': 303,
            '304': 304,
            '305': 305,
            '306': 306,
            '307': 307,
            '330': 330,
            '331': 331,
            '332': 332,
            '333': 333,
            '334': 334,
            '400': 400,
            '401': 401,
            '402': 402,
            '410': 410,
            '411': 411,
            '412': 412,
            '501': 501,
            '502': 502,
            '503': 503,
            '510': 510,
            '511': 511,
            '512': 512,
            '513': 513,
            '514': 514,
            '515': 515,
            '516': 516,
            '517': 517,
            '518': 518,
            '519': 519,
            '520': 520,
            '521': 521,
            '522': 522,
            '523': 523,
            '524': 524,
            '525': 525,
            '526': 526,
            '527': 527,
            '528': 528,
            '529': 529,
            '530': 530,
            '531': 531,
            '532': 532,
            '533': 533,
            '534': 534,
            '535': 535,
            '536': 536,
            '537': 537,
            '538': 538,
            '539': 539,
            '540': 540,
            '541': 541,
            '542': 542,
            '545': 545,
            '546': 546,
            '550': 550,
            '551': 551,
            '552': 552,
            '553': 553,
            '554': 554,
            '555': 555,
            '600': 600,
            '601': 601,
            '602': 602,
            '700': 700,
            '701': 701,
            '702': 702,
            '703': 703,
            '704': 704,
            '705': 705,
            '706': 706,
            '800': 800,
            '801': 801,
            '802': 802,
            '803': 803,
            '804': 804,
            '805': 805,
            '900': 900,
            '901': 901,
            '902': 902,
            '903': 903,
            '904': 904,
            '905': 905,
            '906': 906,
            '907': 907,
            '911': 911,
            '912': 912,
            '931': 931,
            '932': 932,
            '950': 950,
            '1001': 1001,
            '1002': 1002,
            '1010': 1010,
            '1100': 1100,
            '1101': 1101,
            '1200': 1200,
            '1201': 1201,
            '1244': 1244,
            '1245': 1245,
            '1300': 1300,
            '1301': 1301,
            '1302': 1302,
            '1303': 1303,
            '1304': 1304,
            '1305': 1305,
            '1400': 1400,
            '1401': 1401,
            '1402': 1402,
            '1403': 1403,
            '1404': 1404,
            '1405': 1405,
            '1406': 1406,
            '1407': 1407,
            '1408': 1408,
            '1409': 1409,
            '1410': 1410,
            '1411': 1411,
            '1412': 1412,
            '1413': 1413,
            '1414': 1414,
            '1415': 1415,
            '1416': 1416,
            '1417': 1417,
            '1418': 1418,
            '1419': 1419,
            '1420': 1420,
            '1421': 1421,
            '1422': 1422,
            '1423': 1423,
            '1424': 1424,
            '1500': 1500,
            '1501': 1501,
            '1502': 1502,
            '1503': 1503,
            '1504': 1504,
            '1505': 1505,
            '1506': 1506,
            '1507': 1507,
            '1508': 1508,
            '1509': 1509,
            '1510': 1510,
            '1511': 1511,
            '1512': 1512,
            '1513': 1513,
            '1514': 1514,
            '1600': 1600,
            '1601': 1601,
            '1602': 1602,
            '1603': 1603,
            '1604': 1604,
            '1605': 1605,
            '1606': 1606,
            '1607': 1607,
            '1608': 1608,
            '1609': 1609,
            '1700': 1700,
            '1701': 1701,
            '1702': 1702,
            '1801': 1801,
            '1802': 1802,
            '1900': 1900,
            '1901': 1901,
            '1902': 1902,
            '1903': 1903,
            '1904': 1904,
            '1905': 1905,
            '2000': 2000,
            '2001': 2001,
            '2002': 2002,
            '2003': 2003,
            '2004': 2004,
            '2005': 2005,
            '2006': 2006,
            '2007': 2007,
            '2008': 2008,
            '2009': 2009,
            '2010': 2010,
            '2011': 2011,
            '2012': 2012,
            '2013': 2013,
            '2014': 2014,
            '2015': 2015,
            '2016': 2016,
            '2017': 2017,
            '2018': 2018,
            '2100': 2100,
            '2101': 2101,
            '2102': 2102,
            '2103': 2103,
            '2104': 2104,
            '2105': 2105,
            '2106': 2106,
            '2107': 2107,
            '2108': 2108,
            '2109': 2109,
            '2110': 2110,
            '2111': 2111,
            '2112': 2112,
            '2113': 2113,
            '2114': 2114,
            '2201': 2201,
            '2202': 2202,
            '2203': 2203,
            '2204': 2204,
            '3000': 3000,
            '3001': 3001,
            '3002': 3002,
            '3003': 3003,
            '3004': 3004,
            '3005': 3005,
            '3006': 3006,
            '3007': 3007,
            '3008': 3008,
            '3009': 3009,
            '3010': 3010,
            '3011': 3011,
            '3012': 3012,
            '3013': 3013,
            '3014': 3014,
            '3015': 3015,
            '3016': 3016,
            '3017': 3017,
            '3018': 3018,
            '3019': 3019,
            '3020': 3020,
            '3021': 3021,
            '3022': 3022,
            '3023': 3023,
            '3024': 3024,
            '3025': 3025,
            '3026': 3026,
            '3027': 3027,
            '3028': 3028,
            '9000': 9000,
            '9001': 9001,
            '9002': 9002,
            '9003': 9003,
            '9004': 9004,
            '9005': 9005,
            '9006': 9006,
            '9007': 9007,
            '9008': 9008,
            '9009': 9009,
            '9010': 9010,
            '9011': 9011,
            '9012': 9012,
            '9013': 9013,
            '9014': 9014,
            '9015': 9015,
            '9016': 9016,
            '9017': 9017,
            '9018': 9018,
            '9019': 9019,
            '9020': 9020,
            '9021': 9021,
            '9022': 9022,
            '9023': 9023,
            '9024': 9024,
            '9025': 9025,
            '9026': 9026,
            '9027': 9027,
            '9028': 9028,
            '9029': 9029,
            '9030': 9030,
            '9031': 9031,
            '9032': 9032,
            '9033': 9033,
            '9034': 9034,
            '9035': 9035,
            '9036': 9036,
            '9037': 9037,
            '9038': 9038,
            '9039': 9039,
            '9040': 9040,
            '9041': 9041,
            '9042': 9042,
            '9043': 9043,
            '9044': 9044,
            '9045': 9045,
            '9046': 9046,
            '9047': 9047,
            '9048': 9048,
            '9049': 9049,
            '9050': 9050,
            '9051': 9051,
            '9052': 9052,
            '9053': 9053,
            '9054': 9054,
            '9055': 9055,
            '9056': 9056,
            '9057': 9057,
            '9058': 9058,
            '9059': 9059,
        },
    }

    validations = {
    }

    @cached_property
    def additional_properties_type():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded
        """
        return (bool, date, datetime, dict, float, int, list, str, none_type,)  # noqa: E501

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        return {
            'account_id': (int,),  # noqa: E501
            'actor_system': (str,),  # noqa: E501
            'actor_user_id': (int,),  # noqa: E501
            'actor_user_name': (str,),  # noqa: E501
            'app_id': (int,),  # noqa: E501
            'app_name': (str,),  # noqa: E501
            'assuming_acting_user_id': (int,),  # noqa: E501
            'client_id': (str,),  # noqa: E501
            'created_at': (str,),  # noqa: E501
            'custom_message': (str,),  # noqa: E501
            'directory_sync_run_id': (int,),  # noqa: E501
            'error_description': (str,),  # noqa: E501
            'event_type_id': (int,),  # noqa: E501
            'group_id': (int,),  # noqa: E501
            'group_name': (str,),  # noqa: E501
            'id': (int,),  # noqa: E501
            'ipaddr': (str,),  # noqa: E501
            'notes': (str,),  # noqa: E501
            'otp_device_id': (int,),  # noqa: E501
            'otp_device_name': (str,),  # noqa: E501
            'policy_id': (int,),  # noqa: E501
            'policy_name': (str,),  # noqa: E501
            'resource_type_id': (int,),  # noqa: E501
            'role_id': (int,),  # noqa: E501
            'role_name': (str,),  # noqa: E501
            'user_id': (int,),  # noqa: E501
            'user_name': (str,),  # noqa: E501
            'risk_cookie_id': (str,),  # noqa: E501
            'assumed_by_superadmin_or_reseller': (int,),  # noqa: E501
            'certificate_id': (int,),  # noqa: E501
            'mapping_id': (int,),  # noqa: E501
            'radius_config_id': (int,),  # noqa: E501
            'risk_score': (int,),  # noqa: E501
            'param': (str,),  # noqa: E501
            'adc_id': (int,),  # noqa: E501
            'solved': (bool,),  # noqa: E501
            'service_directory_id': (int,),  # noqa: E501
            'object_id': (int,),  # noqa: E501
            'user_field_id': (int,),  # noqa: E501
            'risk_reasons': (str,),  # noqa: E501
            'policy_type': (str,),  # noqa: E501
            'resolved_at': (str,),  # noqa: E501
            'trusted_idp_id': (int,),  # noqa: E501
            'privilege_id': (int,),  # noqa: E501
            'proxy_ip': (str,),  # noqa: E501
        }

    @cached_property
    def discriminator():
        return None


    attribute_map = {
        'account_id': 'account_id',  # noqa: E501
        'actor_system': 'actor_system',  # noqa: E501
        'actor_user_id': 'actor_user_id',  # noqa: E501
        'actor_user_name': 'actor_user_name',  # noqa: E501
        'app_id': 'app_id',  # noqa: E501
        'app_name': 'app-name',  # noqa: E501
        'assuming_acting_user_id': 'assuming_acting_user_id',  # noqa: E501
        'client_id': 'client_id',  # noqa: E501
        'created_at': 'created_at',  # noqa: E501
        'custom_message': 'custom_message',  # noqa: E501
        'directory_sync_run_id': 'directory_sync_run_id',  # noqa: E501
        'error_description': 'error_description',  # noqa: E501
        'event_type_id': 'event_type_id',  # noqa: E501
        'group_id': 'group_id',  # noqa: E501
        'group_name': 'group-name',  # noqa: E501
        'id': 'id',  # noqa: E501
        'ipaddr': 'ipaddr',  # noqa: E501
        'notes': 'notes',  # noqa: E501
        'otp_device_id': 'otp_device_id',  # noqa: E501
        'otp_device_name': 'otp_device_name',  # noqa: E501
        'policy_id': 'policy_id',  # noqa: E501
        'policy_name': 'policy_name',  # noqa: E501
        'resource_type_id': 'resource_type_id',  # noqa: E501
        'role_id': 'role_id',  # noqa: E501
        'role_name': 'role_name',  # noqa: E501
        'user_id': 'user_id',  # noqa: E501
        'user_name': 'user_name',  # noqa: E501
        'risk_cookie_id': 'risk_cookie_id',  # noqa: E501
        'assumed_by_superadmin_or_reseller': 'assumed_by_superadmin_or_reseller',  # noqa: E501
        'certificate_id': 'certificate_id',  # noqa: E501
        'mapping_id': 'mapping_id',  # noqa: E501
        'radius_config_id': 'radius_config_id',  # noqa: E501
        'risk_score': 'risk_score',  # noqa: E501
        'param': 'param',  # noqa: E501
        'adc_id': 'adc_id',  # noqa: E501
        'solved': 'solved',  # noqa: E501
        'service_directory_id': 'service_directory_id',  # noqa: E501
        'object_id': 'object_id',  # noqa: E501
        'user_field_id': 'user_field_id',  # noqa: E501
        'risk_reasons': 'risk_reasons',  # noqa: E501
        'policy_type': 'policy_type',  # noqa: E501
        'resolved_at': 'resolved_at',  # noqa: E501
        'trusted_idp_id': 'trusted_idp_id',  # noqa: E501
        'privilege_id': 'privilege_id',  # noqa: E501
        'proxy_ip': 'proxy_ip',  # noqa: E501
    }

    read_only_vars = {
    }

    _composed_schemas = {}

    @classmethod
    @convert_js_args_to_python_args
    def _from_openapi_data(cls, *args, **kwargs):  # noqa: E501
        """Event - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            account_id (int): Account that triggered the event.. [optional]  # noqa: E501
            actor_system (str): Acting system that triggered the event when the actor is not a user.. [optional]  # noqa: E501
            actor_user_id (int): ID of the user whose action triggered the event.. [optional]  # noqa: E501
            actor_user_name (str): First and last name of the user whose action triggered the event.. [optional]  # noqa: E501
            app_id (int): ID of the app involved in the event, if applicable.. [optional]  # noqa: E501
            app_name (str): Name of the app involved in the event, if applicable.. [optional]  # noqa: E501
            assuming_acting_user_id (int): ID of the user who assumed the role of the acting user to trigger the event, if applicable.. [optional]  # noqa: E501
            client_id (str): Client ID used to generate the access token that made the API call that generated the event.. [optional]  # noqa: E501
            created_at (str): ISO8601 Time and date at which the event was created. This value is autogenerated by OneLogin.. [optional]  # noqa: E501
            custom_message (str): More details about the event.. [optional]  # noqa: E501
            directory_sync_run_id (int): Directory sync run ID.. [optional]  # noqa: E501
            error_description (str): Provisioning error details, if applicable.. [optional]  # noqa: E501
            event_type_id (int): Type of event triggered.. [optional]  # noqa: E501
            group_id (int): ID of a group involved in the event.. [optional]  # noqa: E501
            group_name (str): Name of a group involved in the event.. [optional]  # noqa: E501
            id (int): Event's unique ID in OneLogin. Autogenerated by OneLogin.. [optional]  # noqa: E501
            ipaddr (str): IP address of the machine used to trigger the event.. [optional]  # noqa: E501
            notes (str): More details about the event.. [optional]  # noqa: E501
            otp_device_id (int): ID of a device involved in the event.. [optional]  # noqa: E501
            otp_device_name (str): Name of a device involved in the event.. [optional]  # noqa: E501
            policy_id (int): ID of the policy involved in the event.. [optional]  # noqa: E501
            policy_name (str): Name of the policy involved in the event.. [optional]  # noqa: E501
            resource_type_id (int): ID of the resource (user, role, group, and so forth) associated with the event.. [optional]  # noqa: E501
            role_id (int): ID of a role involved in the event.. [optional]  # noqa: E501
            role_name (str): Name of a role involved in the event.. [optional]  # noqa: E501
            user_id (int): ID of the user that was acted upon to trigger the event.. [optional]  # noqa: E501
            user_name (str): Name of the user that was acted upon to trigger the event.. [optional]  # noqa: E501
            risk_cookie_id (str): [optional]  # noqa: E501
            assumed_by_superadmin_or_reseller (int): [optional]  # noqa: E501
            certificate_id (int): [optional]  # noqa: E501
            mapping_id (int): [optional]  # noqa: E501
            radius_config_id (int): [optional]  # noqa: E501
            risk_score (int): [optional]  # noqa: E501
            param (str): [optional]  # noqa: E501
            adc_id (int): [optional]  # noqa: E501
            solved (bool): [optional]  # noqa: E501
            service_directory_id (int): [optional]  # noqa: E501
            object_id (int): [optional]  # noqa: E501
            user_field_id (int): [optional]  # noqa: E501
            risk_reasons (str): [optional]  # noqa: E501
            policy_type (str): [optional]  # noqa: E501
            resolved_at (str): [optional]  # noqa: E501
            trusted_idp_id (int): [optional]  # noqa: E501
            privilege_id (int): [optional]  # noqa: E501
            proxy_ip (str): [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', True)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        self = super(OpenApiModel, cls).__new__(cls)

        if args:
            for arg in args:
                if isinstance(arg, dict):
                    kwargs.update(arg)
                else:
                    raise ApiTypeError(
                        "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                            args,
                            self.__class__.__name__,
                        ),
                        path_to_item=_path_to_item,
                        valid_classes=(self.__class__,),
                    )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
        return self

    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
    ])

    @convert_js_args_to_python_args
    def __init__(self, *args, **kwargs):  # noqa: E501
        """Event - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            account_id (int): Account that triggered the event.. [optional]  # noqa: E501
            actor_system (str): Acting system that triggered the event when the actor is not a user.. [optional]  # noqa: E501
            actor_user_id (int): ID of the user whose action triggered the event.. [optional]  # noqa: E501
            actor_user_name (str): First and last name of the user whose action triggered the event.. [optional]  # noqa: E501
            app_id (int): ID of the app involved in the event, if applicable.. [optional]  # noqa: E501
            app_name (str): Name of the app involved in the event, if applicable.. [optional]  # noqa: E501
            assuming_acting_user_id (int): ID of the user who assumed the role of the acting user to trigger the event, if applicable.. [optional]  # noqa: E501
            client_id (str): Client ID used to generate the access token that made the API call that generated the event.. [optional]  # noqa: E501
            created_at (str): ISO8601 Time and date at which the event was created. This value is autogenerated by OneLogin.. [optional]  # noqa: E501
            custom_message (str): More details about the event.. [optional]  # noqa: E501
            directory_sync_run_id (int): Directory sync run ID.. [optional]  # noqa: E501
            error_description (str): Provisioning error details, if applicable.. [optional]  # noqa: E501
            event_type_id (int): Type of event triggered.. [optional]  # noqa: E501
            group_id (int): ID of a group involved in the event.. [optional]  # noqa: E501
            group_name (str): Name of a group involved in the event.. [optional]  # noqa: E501
            id (int): Event's unique ID in OneLogin. Autogenerated by OneLogin.. [optional]  # noqa: E501
            ipaddr (str): IP address of the machine used to trigger the event.. [optional]  # noqa: E501
            notes (str): More details about the event.. [optional]  # noqa: E501
            otp_device_id (int): ID of a device involved in the event.. [optional]  # noqa: E501
            otp_device_name (str): Name of a device involved in the event.. [optional]  # noqa: E501
            policy_id (int): ID of the policy involved in the event.. [optional]  # noqa: E501
            policy_name (str): Name of the policy involved in the event.. [optional]  # noqa: E501
            resource_type_id (int): ID of the resource (user, role, group, and so forth) associated with the event.. [optional]  # noqa: E501
            role_id (int): ID of a role involved in the event.. [optional]  # noqa: E501
            role_name (str): Name of a role involved in the event.. [optional]  # noqa: E501
            user_id (int): ID of the user that was acted upon to trigger the event.. [optional]  # noqa: E501
            user_name (str): Name of the user that was acted upon to trigger the event.. [optional]  # noqa: E501
            risk_cookie_id (str): [optional]  # noqa: E501
            assumed_by_superadmin_or_reseller (int): [optional]  # noqa: E501
            certificate_id (int): [optional]  # noqa: E501
            mapping_id (int): [optional]  # noqa: E501
            radius_config_id (int): [optional]  # noqa: E501
            risk_score (int): [optional]  # noqa: E501
            param (str): [optional]  # noqa: E501
            adc_id (int): [optional]  # noqa: E501
            solved (bool): [optional]  # noqa: E501
            service_directory_id (int): [optional]  # noqa: E501
            object_id (int): [optional]  # noqa: E501
            user_field_id (int): [optional]  # noqa: E501
            risk_reasons (str): [optional]  # noqa: E501
            policy_type (str): [optional]  # noqa: E501
            resolved_at (str): [optional]  # noqa: E501
            trusted_idp_id (int): [optional]  # noqa: E501
            privilege_id (int): [optional]  # noqa: E501
            proxy_ip (str): [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            for arg in args:
                if isinstance(arg, dict):
                    kwargs.update(arg)
                else:
                    raise ApiTypeError(
                        "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                            args,
                            self.__class__.__name__,
                        ),
                        path_to_item=_path_to_item,
                        valid_classes=(self.__class__,),
                    )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
            if var_name in self.read_only_vars:
                raise ApiAttributeError(f"`{var_name}` is a read-only attribute. Use `from_openapi_data` to instantiate "
                                     f"class with read only attributes.")
