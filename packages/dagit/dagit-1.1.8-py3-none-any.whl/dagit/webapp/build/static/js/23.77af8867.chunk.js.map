{"version":3,"file":"static/js/23.77af8867.chunk.js","mappings":"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","sources":["../../core/src/app/time/Timestamp.tsx","../../core/src/runs/NavitationBlock.tsx","../../core/src/hooks/useOnBeforeUnload.tsx","../../core/src/runs/RunStats.tsx","../../core/src/runs/RunStatusDots.tsx","../../core/src/runs/RunUtils.tsx","../../core/src/runs/TerminationDialog.tsx","../../core/src/runs/TimeElapsed.tsx","../../core/src/workspace/useRepositoryForRun.ts","../../ui/src/components/CursorControls.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport {TimeFormat} from './TimestampFormat';\nimport {TimezoneContext} from './TimezoneContext';\nimport {timestampToString} from './timestampToString';\n\ninterface Props {\n  timestamp: {ms: number} | {unix: number};\n  timeFormat?: TimeFormat;\n}\n\nexport const Timestamp: React.FC<Props> = (props) => {\n  const {timestamp, timeFormat} = props;\n  const [timezone] = React.useContext(TimezoneContext);\n  const locale = navigator.language;\n  return <>{timestampToString({timestamp, locale, timezone, timeFormat})}</>;\n};\n","import * as React from 'react';\nimport {Prompt} from 'react-router-dom';\n\nimport {useOnBeforeUnload} from '../hooks/useOnBeforeUnload';\n\ninterface Props {\n  message: string;\n}\n\nexport const NavigationBlock = (props: Props) => {\n  useOnBeforeUnload();\n  return <Prompt message={props.message} />;\n};\n","import * as React from 'react';\n\nexport const useOnBeforeUnload = () => {\n  React.useEffect(() => {\n    const handler = (e: BeforeUnloadEvent) => {\n      e.preventDefault();\n      e.returnValue = '';\n    };\n\n    window.addEventListener('beforeunload', handler);\n    return () => {\n      window.removeEventListener('beforeunload', handler);\n    };\n  }, []);\n};\n","import {useQuery} from '@apollo/client';\nimport {Box, Spinner} from '@dagster-io/ui';\nimport * as React from 'react';\nimport {Link} from 'react-router-dom';\nimport styled from 'styled-components/macro';\n\nimport {PythonErrorInfo} from '../app/PythonErrorInfo';\nimport {graphql} from '../graphql';\n\nexport const RunStats = ({runId}: {runId: string}) => {\n  const stats = useQuery(RUN_STATS_QUERY, {\n    variables: {runId},\n  });\n\n  if (stats.loading || !stats.data) {\n    return (\n      <RunStatsDetailsContainer>\n        <Box padding={24} flex={{justifyContent: 'center'}}>\n          <Spinner purpose=\"section\" />\n        </Box>\n      </RunStatsDetailsContainer>\n    );\n  }\n\n  const result = stats.data.pipelineRunOrError;\n\n  if (result.__typename !== 'Run') {\n    return <PythonErrorInfo error={result} />;\n  }\n  if (result.stats.__typename !== 'RunStatsSnapshot') {\n    return <PythonErrorInfo error={result.stats} />;\n  }\n\n  const runPath = `/runs/${runId}`;\n  return (\n    <RunStatsDetailsContainer>\n      <Link\n        to={`${runPath}?logs=type:STEP_SUCCESS`}\n      >{`${result.stats.stepsSucceeded} steps succeeded`}</Link>\n      <Link to={`${runPath}?logs=type:STEP_FAILURE`}>\n        {`${result.stats.stepsFailed} steps failed`}\n      </Link>\n      <Link\n        to={`${runPath}?logs=type:ASSET_MATERIALIZATION`}\n      >{`${result.stats.materializations} materializations`}</Link>\n      <Link\n        to={`${runPath}?logs=type:STEP_EXPECTATION_RESULT`}\n      >{`${result.stats.expectations} expectations passed`}</Link>\n    </RunStatsDetailsContainer>\n  );\n};\n\nconst RUN_STATS_QUERY = graphql(`\n  query RunStatsQuery($runId: ID!) {\n    pipelineRunOrError(runId: $runId) {\n      __typename\n      ...PythonErrorFragment\n      ... on RunNotFoundError {\n        message\n      }\n      ... on Run {\n        id\n        runId\n        pipelineName\n        stats {\n          ... on RunStatsSnapshot {\n            id\n            stepsSucceeded\n            stepsFailed\n            expectations\n            materializations\n          }\n          ...PythonErrorFragment\n        }\n      }\n    }\n  }\n`);\n\nconst RunStatsDetailsContainer = styled.div`\n  min-width: 200px;\n  padding: 12px;\n  color: white;\n  font-size: 12px;\n  & > a {\n    display: block;\n  }\n`;\n","import {Colors, Popover, Spinner} from '@dagster-io/ui';\nimport * as React from 'react';\nimport styled, {css, keyframes} from 'styled-components/macro';\n\nimport {RunStatus} from '../graphql/graphql';\n\nimport {RunStats} from './RunStats';\nimport {inProgressStatuses, queuedStatuses} from './RunStatuses';\n\nconst RUN_STATUS_COLORS = {\n  QUEUED: Colors.Blue200,\n  NOT_STARTED: Colors.Gray600,\n  STARTING: Colors.Gray400,\n  MANAGED: Colors.Gray400,\n  STARTED: Colors.Blue500,\n  SUCCESS: Colors.Green500,\n  FAILURE: Colors.Red500,\n  CANCELING: Colors.Red500,\n  CANCELED: Colors.Red500,\n\n  // Not technically a RunStatus, but useful.\n  SCHEDULED: Colors.Blue200,\n};\n\nexport const RunStatusWithStats: React.FC<RunStatusProps & {runId: string}> = React.memo(\n  ({runId, ...rest}) => (\n    <Popover\n      position=\"bottom\"\n      interactionKind=\"hover\"\n      content={<RunStats runId={runId} />}\n      hoverOpenDelay={100}\n    >\n      <RunStatusIndicator {...rest} />\n    </Popover>\n  ),\n);\n\ninterface RunStatusProps {\n  status: RunStatus | 'SCHEDULED';\n  size?: number;\n}\n\nexport const RunStatusIndicator: React.FC<RunStatusProps> = React.memo(({status, size}) => {\n  if (status === 'STARTED') {\n    return <Spinner purpose=\"caption-text\" />;\n  }\n  if (status === 'SCHEDULED') {\n    return <RunStatusDot status={status} size={size || 12} />;\n  }\n  return (\n    <RunStatusDot\n      status={status}\n      size={size || 12}\n      pulse={inProgressStatuses.has(status) || queuedStatuses.has(status)}\n    />\n  );\n});\n\nconst pulseAnimation = keyframes`\n  0% {\n    filter: brightness(1);\n  }\n\n  50% {\n    filter: brightness(0.7);\n  }\n\n  100% {\n    filter: brightness(1);\n  }\n`;\n\nexport const RunStatusDot = styled.div<{\n  status: RunStatus | 'SCHEDULED';\n  size: number;\n  pulse?: boolean;\n}>`\n  width: ${({size}) => size}px;\n  height: ${({size}) => size}px;\n  border-radius: ${({size}) => size / 2}px;\n  transition: filter 200ms linear;\n  ${({pulse}) =>\n    pulse\n      ? css`\n          animation: ${pulseAnimation} 2s infinite;\n        `\n      : null}\n\n  background: ${({status}) => RUN_STATUS_COLORS[status]};\n  &:hover {\n    animation: none;\n    filter: brightness(0.7);\n  }\n`;\n","import {History} from 'history';\nimport qs from 'qs';\nimport * as React from 'react';\n\nimport {Mono} from '../../../ui/src';\nimport {showCustomAlert} from '../app/CustomAlertProvider';\nimport {SharedToaster} from '../app/DomUtils';\nimport {PythonErrorInfo} from '../app/PythonErrorInfo';\nimport {Timestamp} from '../app/time/Timestamp';\nimport {AssetKey} from '../assets/types';\nimport {graphql} from '../graphql';\nimport {\n  ExecutionParams,\n  LaunchPipelineExecutionMutation,\n  RunFragmentFragment,\n  RunStatus,\n  RunTableRunFragmentFragment,\n  RunTimeFragmentFragment,\n} from '../graphql/graphql';\n\nimport {DagsterTag} from './RunTag';\nimport {StepSelection} from './StepSelection';\nimport {TimeElapsed} from './TimeElapsed';\n\nexport function titleForRun(run: {runId: string}) {\n  return run.runId.split('-').shift();\n}\n\nexport function assetKeysForRun(run: {\n  assetSelection: {path: string[]}[] | null;\n  stepKeysToExecute: string[] | null;\n}): AssetKey[] {\n  // Note: The fallback logic here is only necessary for Dagit <0.15.0 and should be removed\n  // soon, because stepKeysToExecute and asset keys do not map 1:1 for multi-component asset\n  // paths.\n  return run.assetSelection || run.stepKeysToExecute?.map((s) => ({path: [s]})) || [];\n}\n\nexport function linkToRunEvent(\n  run: {runId: string},\n  event: {timestamp?: string; stepKey: string | null},\n) {\n  return `/runs/${run.runId}?${qs.stringify({\n    focusedTime: event.timestamp ? Number(event.timestamp) : undefined,\n    selection: event.stepKey,\n    logs: `step:${event.stepKey}`,\n  })}`;\n}\n\nexport const RunsQueryRefetchContext = React.createContext<{\n  refetch: () => void;\n}>({refetch: () => {}});\n\nexport function useDidLaunchEvent(cb: () => void, delay = 1500) {\n  React.useEffect(() => {\n    const handler = () => {\n      setTimeout(cb, delay);\n    };\n    document.addEventListener('run-launched', handler);\n    return () => {\n      document.removeEventListener('run-launched', handler);\n    };\n  }, [cb, delay]);\n}\n\nexport type LaunchBehavior = 'open' | 'open-in-new-tab' | 'toast';\n\nexport function handleLaunchResult(\n  pipelineName: string,\n  result: void | null | LaunchPipelineExecutionMutation['launchPipelineExecution'],\n  history: History<unknown>,\n  options: {behavior: LaunchBehavior; preserveQuerystring?: boolean},\n) {\n  if (!result) {\n    showCustomAlert({body: `No data was returned. Did Dagit crash?`});\n    return;\n  }\n\n  if (result.__typename === 'LaunchRunSuccess') {\n    const pathname = `/runs/${result.run.runId}`;\n    const search = options.preserveQuerystring ? history.location.search : '';\n    const openInNewTab = () => window.open(history.createHref({pathname, search}), '_blank');\n    const openInSameTab = () => history.push({pathname, search});\n\n    if (options.behavior === 'open-in-new-tab') {\n      openInNewTab();\n    } else if (options.behavior === 'open') {\n      openInSameTab();\n    } else {\n      SharedToaster.show({\n        intent: 'success',\n        message: (\n          <div>\n            Launched run <Mono>{result.run.runId.slice(0, 8)}</Mono>\n          </div>\n        ),\n        action: {\n          text: 'View',\n          onClick: () => openInNewTab(),\n        },\n      });\n    }\n    document.dispatchEvent(new CustomEvent('run-launched'));\n  } else if (result.__typename === 'InvalidSubsetError') {\n    showCustomAlert({body: result.message});\n  } else if (result.__typename === 'PythonError') {\n    showCustomAlert({\n      title: 'Error',\n      body: <PythonErrorInfo error={result} />,\n    });\n  } else {\n    let message = `${pipelineName} cannot be executed with the provided config.`;\n\n    if ('errors' in result) {\n      message += ` Please fix the following errors:\\n\\n${result.errors\n        .map((error) => error.message)\n        .join('\\n\\n')}`;\n    }\n\n    showCustomAlert({body: message});\n  }\n}\n\nfunction getBaseExecutionMetadata(run: RunFragmentFragment | RunTableRunFragmentFragment) {\n  const hiddenTagKeys: string[] = [DagsterTag.IsResumeRetry, DagsterTag.StepSelection];\n\n  return {\n    parentRunId: run.runId,\n    rootRunId: run.rootRunId ? run.rootRunId : run.runId,\n    tags: [\n      // Clean up tags related to run grouping once we decide its persistence\n      // https://github.com/dagster-io/dagster/issues/2495\n      ...run.tags\n        .filter((tag) => !hiddenTagKeys.includes(tag.key))\n        .map((tag) => ({\n          key: tag.key,\n          value: tag.value,\n        })),\n      // pass resume/retry indicator via tags\n      // pass run group info via tags\n      {\n        key: DagsterTag.ParentRunId,\n        value: run.runId,\n      },\n      {\n        key: DagsterTag.RootRunId,\n        value: run.rootRunId ? run.rootRunId : run.runId,\n      },\n    ],\n  };\n}\n\nexport type ReExecutionStyle =\n  | {type: 'all'}\n  | {type: 'from-failure'}\n  | {type: 'selection'; selection: StepSelection};\n\nexport function getReexecutionVariables(input: {\n  run: (RunFragmentFragment | RunTableRunFragmentFragment) & {runConfigYaml: string};\n  style: ReExecutionStyle;\n  repositoryLocationName: string;\n  repositoryName: string;\n}) {\n  const {run, style, repositoryLocationName, repositoryName} = input;\n\n  if (!run || !run.pipelineSnapshotId) {\n    return undefined;\n  }\n\n  const executionParams: ExecutionParams = {\n    mode: run.mode,\n    runConfigData: run.runConfigYaml,\n    executionMetadata: getBaseExecutionMetadata(run),\n    selector: {\n      repositoryLocationName,\n      repositoryName,\n      pipelineName: run.pipelineName,\n      solidSelection: run.solidSelection,\n      assetSelection: run.assetSelection\n        ? run.assetSelection.map((asset_key) => ({\n            path: asset_key.path,\n          }))\n        : null,\n    },\n  };\n\n  if (style.type === 'from-failure') {\n    executionParams.executionMetadata?.tags?.push({\n      key: DagsterTag.IsResumeRetry,\n      value: 'true',\n    });\n  }\n  if (style.type === 'selection') {\n    executionParams.stepKeys = style.selection.keys;\n    executionParams.executionMetadata?.tags?.push({\n      key: DagsterTag.StepSelection,\n      value: style.selection.query,\n    });\n  }\n  return {executionParams};\n}\n\nexport const LAUNCH_PIPELINE_EXECUTION_MUTATION = graphql(`\n  mutation LaunchPipelineExecution($executionParams: ExecutionParams!) {\n    launchPipelineExecution(executionParams: $executionParams) {\n      __typename\n      ... on LaunchRunSuccess {\n        run {\n          id\n          runId\n          pipelineName\n        }\n      }\n      ... on PipelineNotFoundError {\n        message\n      }\n      ... on InvalidSubsetError {\n        message\n      }\n      ... on RunConfigValidationInvalid {\n        errors {\n          message\n        }\n      }\n      ...PythonErrorFragment\n    }\n  }\n`);\n\nexport const DELETE_MUTATION = graphql(`\n  mutation Delete($runId: String!) {\n    deletePipelineRun(runId: $runId) {\n      __typename\n      ...PythonErrorFragment\n      ... on UnauthorizedError {\n        message\n      }\n      ... on RunNotFoundError {\n        message\n      }\n    }\n  }\n`);\n\nexport const TERMINATE_MUTATION = graphql(`\n  mutation Terminate($runId: String!, $terminatePolicy: TerminateRunPolicy) {\n    terminatePipelineExecution(runId: $runId, terminatePolicy: $terminatePolicy) {\n      __typename\n      ... on TerminateRunFailure {\n        message\n      }\n      ... on RunNotFoundError {\n        message\n      }\n      ... on TerminateRunSuccess {\n        run {\n          id\n          runId\n          canTerminate\n        }\n      }\n      ... on UnauthorizedError {\n        message\n      }\n      ...PythonErrorFragment\n    }\n  }\n`);\n\nexport const LAUNCH_PIPELINE_REEXECUTION_MUTATION = graphql(`\n  mutation LaunchPipelineReexecution(\n    $executionParams: ExecutionParams\n    $reexecutionParams: ReexecutionParams\n  ) {\n    launchPipelineReexecution(\n      executionParams: $executionParams\n      reexecutionParams: $reexecutionParams\n    ) {\n      __typename\n      ... on LaunchRunSuccess {\n        run {\n          id\n          runId\n          pipelineName\n          rootRunId\n          parentRunId\n        }\n      }\n      ... on PipelineNotFoundError {\n        message\n      }\n      ... on InvalidSubsetError {\n        message\n      }\n      ... on RunConfigValidationInvalid {\n        errors {\n          message\n        }\n      }\n      ...PythonErrorFragment\n    }\n  }\n`);\n\ninterface RunTimeProps {\n  run: RunTimeFragmentFragment;\n}\n\nexport const RunTime: React.FC<RunTimeProps> = React.memo(({run}) => {\n  const {startTime, updateTime} = run;\n\n  return (\n    <div>\n      {startTime ? (\n        <Timestamp timestamp={{unix: startTime}} />\n      ) : updateTime ? (\n        <Timestamp timestamp={{unix: updateTime}} />\n      ) : null}\n    </div>\n  );\n});\n\nexport const RunStateSummary: React.FC<RunTimeProps> = React.memo(({run}) => {\n  // kind of a hack, but we manually set the start time to the end time in the graphql resolver\n  // for this case, so check for start/end time equality for the failed to start condition\n  const failedToStart =\n    run.status === RunStatus.FAILURE && (!run.startTime || run.startTime === run.endTime);\n\n  return failedToStart ? (\n    <div>Failed to start</div>\n  ) : run.status === RunStatus.CANCELED ? (\n    <div>Canceled</div>\n  ) : run.status === RunStatus.CANCELING ? (\n    <div>Canceling…</div>\n  ) : run.status === RunStatus.QUEUED ? (\n    <div>Queued…</div>\n  ) : !run.startTime ? (\n    <div>Starting…</div>\n  ) : (\n    <TimeElapsed startUnix={run.startTime} endUnix={run.endTime} />\n  );\n});\n\nexport const RUN_TIME_FRAGMENT = graphql(`\n  fragment RunTimeFragment on Run {\n    id\n    runId\n    status\n    startTime\n    endTime\n    updateTime\n  }\n`);\n","import {useMutation} from '@apollo/client';\n// eslint-disable-next-line no-restricted-imports\nimport {ProgressBar} from '@blueprintjs/core';\nimport {\n  Box,\n  Button,\n  Checkbox,\n  Colors,\n  DialogBody,\n  DialogFooter,\n  Dialog,\n  Group,\n  Icon,\n  Mono,\n} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {TerminateMutation, TerminateRunPolicy} from '../graphql/graphql';\n\nimport {NavigationBlock} from './NavitationBlock';\nimport {TERMINATE_MUTATION} from './RunUtils';\n\nexport interface Props {\n  isOpen: boolean;\n  onClose: () => void;\n  onComplete: (terminationState: TerminationState) => void;\n  // A map from the run ID to its `canTerminate` value\n  selectedRuns: {[id: string]: boolean};\n}\n\nconst refineToError = (data: TerminateMutation | null | undefined) => {\n  if (data?.terminatePipelineExecution.__typename === 'TerminateRunSuccess') {\n    throw new ErrorEvent('Not an error!');\n  }\n  return data?.terminatePipelineExecution;\n};\n\ntype Error = ReturnType<typeof refineToError> | undefined;\n\nexport type TerminationState = {completed: number; errors: {[id: string]: Error}};\n\ntype TerminationDialogState = {\n  mustForce: boolean;\n  frozenRuns: SelectedRuns;\n  step: 'initial' | 'terminating' | 'completed';\n  termination: TerminationState;\n};\n\ntype SelectedRuns = {[id: string]: boolean};\n\nconst initializeState = (selectedRuns: SelectedRuns): TerminationDialogState => {\n  return {\n    // If any selected runs have `canTerminate`, we don't necessarily have to force.\n    mustForce: !Object.keys(selectedRuns).some((id) => selectedRuns[id]),\n    frozenRuns: selectedRuns,\n    step: 'initial',\n    termination: {completed: 0, errors: {}},\n  };\n};\n\ntype TerminationDialogAction =\n  | {type: 'reset'; frozenRuns: SelectedRuns}\n  | {type: 'toggle-force-terminate'; checked: boolean}\n  | {type: 'start'}\n  | {type: 'termination-success'}\n  | {type: 'termination-error'; id: string; error: Error}\n  | {type: 'complete'};\n\nconst terminationDialogReducer = (\n  prevState: TerminationDialogState,\n  action: TerminationDialogAction,\n): TerminationDialogState => {\n  switch (action.type) {\n    case 'reset':\n      return initializeState(action.frozenRuns);\n    case 'toggle-force-terminate':\n      return {...prevState, mustForce: action.checked};\n    case 'start':\n      return {...prevState, step: 'terminating'};\n    case 'termination-success': {\n      const {termination} = prevState;\n      return {\n        ...prevState,\n        step: 'terminating',\n        termination: {...termination, completed: termination.completed + 1},\n      };\n    }\n    case 'termination-error': {\n      const {termination} = prevState;\n      return {\n        ...prevState,\n        step: 'terminating',\n        termination: {\n          ...termination,\n          completed: termination.completed + 1,\n          errors: {...termination.errors, [action.id]: action.error},\n        },\n      };\n    }\n    case 'complete':\n      return {...prevState, step: 'completed'};\n  }\n};\n\nexport const TerminationDialog = (props: Props) => {\n  const {isOpen, onClose, onComplete, selectedRuns} = props;\n\n  // Freeze the selected IDs, since the list may change as runs continue processing and\n  // terminating. We want to preserve the list we're given.\n  const frozenRuns = React.useRef<SelectedRuns>(selectedRuns);\n\n  const [state, dispatch] = React.useReducer(\n    terminationDialogReducer,\n    frozenRuns.current,\n    initializeState,\n  );\n\n  const count = Object.keys(state.frozenRuns).length;\n\n  // If the dialog is newly open, update state to match the frozen list.\n  React.useEffect(() => {\n    if (isOpen) {\n      dispatch({type: 'reset', frozenRuns: frozenRuns.current});\n    }\n  }, [isOpen]);\n\n  // If the dialog is not open, update the ref so that the frozen list will be entered\n  // into state the next time the dialog opens.\n  React.useEffect(() => {\n    if (!isOpen) {\n      frozenRuns.current = selectedRuns;\n    }\n  }, [isOpen, selectedRuns]);\n\n  const [terminate] = useMutation(TERMINATE_MUTATION);\n  const policy = state.mustForce\n    ? TerminateRunPolicy.MARK_AS_CANCELED_IMMEDIATELY\n    : TerminateRunPolicy.SAFE_TERMINATE;\n\n  const mutate = async () => {\n    dispatch({type: 'start'});\n\n    const runList = Object.keys(state.frozenRuns);\n    for (let ii = 0; ii < runList.length; ii++) {\n      const runId = runList[ii];\n      const {data} = await terminate({variables: {runId, terminatePolicy: policy}});\n\n      if (data?.terminatePipelineExecution.__typename === 'TerminateRunSuccess') {\n        dispatch({type: 'termination-success'});\n      } else {\n        dispatch({type: 'termination-error', id: runId, error: refineToError(data)});\n      }\n    }\n\n    dispatch({type: 'complete'});\n    onComplete(state.termination);\n  };\n\n  const onToggleForce = (event: React.ChangeEvent<HTMLInputElement>) => {\n    dispatch({type: 'toggle-force-terminate', checked: event.target.checked});\n  };\n\n  const showCheckbox = Object.keys(state.frozenRuns).some((id) => state.frozenRuns[id]);\n\n  const progressContent = () => {\n    switch (state.step) {\n      case 'initial':\n        if (!count) {\n          return (\n            <Group direction=\"column\" spacing={16}>\n              <div>No runs selected for termination.</div>\n              <div>The runs you selected may already have finished executing.</div>\n            </Group>\n          );\n        }\n\n        return (\n          <Group direction=\"column\" spacing={16}>\n            <div>\n              {`${count} ${\n                count === 1 ? 'run' : 'runs'\n              } will be terminated. Do you wish to continue?`}\n            </div>\n            <div>\n              {showCheckbox ? (\n                <>\n                  <Checkbox\n                    checked={state.mustForce}\n                    size=\"small\"\n                    label=\"Force termination immediately\"\n                    onChange={onToggleForce}\n                  />\n                  {state.mustForce ? (\n                    <Box flex={{display: 'flex', direction: 'row', gap: 8}} margin={{top: 8}}>\n                      <Icon name=\"warning\" color={Colors.Yellow500} />\n                      <div>\n                        <strong>Warning:</strong> computational resources created by runs may not be\n                        cleaned up.\n                      </div>\n                    </Box>\n                  ) : null}\n                </>\n              ) : (\n                <Group direction=\"row\" spacing={8}>\n                  <Icon name=\"warning\" color={Colors.Yellow500} />\n                  <div>\n                    <strong>Warning:</strong> computational resources created by runs may not be\n                    cleaned up.\n                  </div>\n                </Group>\n              )}\n            </div>\n          </Group>\n        );\n      case 'terminating':\n      case 'completed':\n        const value = count > 0 ? state.termination.completed / count : 1;\n        return (\n          <Group direction=\"column\" spacing={8}>\n            <div>{state.mustForce ? 'Forcing termination…' : 'Terminating…'}</div>\n            <ProgressBar intent=\"primary\" value={Math.max(0.1, value)} animate={value < 1} />\n            {state.step === 'terminating' ? (\n              <NavigationBlock message=\"Termination in progress, please do not navigate away yet.\" />\n            ) : null}\n          </Group>\n        );\n      default:\n        return null;\n    }\n  };\n\n  const buttons = () => {\n    switch (state.step) {\n      case 'initial':\n        if (!count) {\n          return (\n            <Button intent=\"none\" onClick={onClose}>\n              OK\n            </Button>\n          );\n        }\n\n        return (\n          <>\n            <Button intent=\"none\" onClick={onClose}>\n              Cancel\n            </Button>\n            <Button intent=\"danger\" onClick={mutate}>\n              {`${state.mustForce ? 'Force termination for' : 'Terminate'} ${`${count} ${\n                count === 1 ? 'run' : 'runs'\n              }`}`}\n            </Button>\n          </>\n        );\n      case 'terminating':\n        return (\n          <Button intent=\"danger\" disabled>\n            {state.mustForce\n              ? `Forcing termination for ${`${count} ${count === 1 ? 'run' : 'runs'}...`}`\n              : `Terminating ${`${count} ${count === 1 ? 'run' : 'runs'}...`}`}\n          </Button>\n        );\n      case 'completed':\n        return (\n          <Button intent=\"primary\" onClick={onClose}>\n            Done\n          </Button>\n        );\n    }\n  };\n\n  const completionContent = () => {\n    if (state.step === 'initial') {\n      return null;\n    }\n\n    if (state.step === 'terminating') {\n      return <div>Please do not close the window or navigate away during termination.</div>;\n    }\n\n    const errors = state.termination.errors;\n    const errorCount = Object.keys(errors).length;\n    const successCount = state.termination.completed - errorCount;\n\n    return (\n      <Group direction=\"column\" spacing={8}>\n        {successCount ? (\n          <Group direction=\"row\" spacing={8} alignItems=\"flex-start\">\n            <Icon name=\"check_circle\" color={Colors.Green500} />\n            <div>\n              {state.mustForce\n                ? `Successfully forced termination for ${successCount}\n                ${successCount === 1 ? 'run' : `runs`}.`\n                : `Successfully requested termination for ${successCount}\n              ${successCount === 1 ? 'run' : `runs`}.`}\n            </div>\n          </Group>\n        ) : null}\n        {errorCount ? (\n          <Group direction=\"column\" spacing={8}>\n            <Group direction=\"row\" spacing={8} alignItems=\"flex-start\">\n              <Icon name=\"warning\" color={Colors.Yellow500} />\n              <div>\n                {state.mustForce\n                  ? `Could not force termination for ${errorCount} ${\n                      errorCount === 1 ? 'run' : 'runs'\n                    }:`\n                  : `Could not request termination for ${errorCount} ${\n                      errorCount === 1 ? 'run' : 'runs'\n                    }:`}\n              </div>\n            </Group>\n            <ul>\n              {Object.keys(errors).map((runId) => (\n                <li key={runId}>\n                  <Group direction=\"row\" spacing={8}>\n                    <Mono>{runId.slice(0, 8)}</Mono>\n                    {errors[runId] ? <div>{errors[runId]?.message}</div> : null}\n                  </Group>\n                </li>\n              ))}\n            </ul>\n          </Group>\n        ) : null}\n      </Group>\n    );\n  };\n\n  const canQuicklyClose = state.step !== 'terminating';\n\n  return (\n    <Dialog\n      isOpen={isOpen}\n      title=\"Terminate runs\"\n      canEscapeKeyClose={canQuicklyClose}\n      canOutsideClickClose={canQuicklyClose}\n      onClose={onClose}\n    >\n      <DialogBody>\n        <Group direction=\"column\" spacing={24}>\n          {progressContent()}\n          {completionContent()}\n        </Group>\n      </DialogBody>\n      <DialogFooter>{buttons()}</DialogFooter>\n    </Dialog>\n  );\n};\n","import {Colors, Group, Icon} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {formatElapsedTime} from '../app/Util';\n\nexport interface Props {\n  startUnix: number | null;\n  endUnix: number | null;\n}\n\nexport const TimeElapsed = (props: Props) => {\n  const {startUnix, endUnix} = props;\n\n  const [endTime, setEndTime] = React.useState(() => (endUnix ? endUnix * 1000 : null));\n  const interval = React.useRef<NodeJS.Timer | null>(null);\n  const timeout = React.useRef<NodeJS.Timer | null>(null);\n\n  const clearTimers = React.useCallback(() => {\n    interval.current && clearInterval(interval.current);\n    timeout.current && clearTimeout(timeout.current);\n  }, []);\n\n  React.useEffect(() => {\n    // An end time has been supplied. Simply set a static value.\n    if (endUnix) {\n      setEndTime(endUnix * 1000);\n      return;\n    }\n\n    // Align to the next second and then update every second so the elapsed\n    // time \"ticks\" up.\n    timeout.current = setTimeout(() => {\n      interval.current = setInterval(() => {\n        setEndTime(Date.now());\n      }, 1000);\n    }, Date.now() % 1000);\n\n    return () => clearTimers();\n  }, [clearTimers, endUnix]);\n\n  const startTime = startUnix ? startUnix * 1000 : 0;\n\n  return (\n    <Group direction=\"row\" spacing={4} alignItems=\"center\">\n      <Icon name=\"timer\" color={Colors.Gray400} />\n      <span style={{fontVariantNumeric: 'tabular-nums'}}>\n        {startTime ? formatElapsedTime((endTime || Date.now()) - startTime) : '–'}\n      </span>\n    </Group>\n  );\n};\n","import * as React from 'react';\n\nimport {RunFragmentForRepositoryMatchFragment} from '../graphql/graphql';\n\nimport {DagsterRepoOption, useRepositoryOptions} from './WorkspaceContext';\nimport {findRepoContainingPipeline, repoContainsPipeline} from './findRepoContainingPipeline';\n\ntype MatchType = {\n  match: DagsterRepoOption;\n  type: 'origin-and-snapshot' | 'origin-only' | 'snapshot-only' | 'pipeline-name-only';\n};\n\n/**\n * Given a Run fragment, find the repository that contains its pipeline.\n */\nexport const useRepositoryForRun = (\n  run: RunFragmentForRepositoryMatchFragment | null | undefined,\n): MatchType | null => {\n  const {options} = useRepositoryOptions();\n\n  const repoMatch = React.useMemo(() => {\n    if (!run) {\n      return null;\n    }\n\n    const pipelineName = run.pipelineName;\n    // Try to match the pipeline name within the specified origin, if possible.\n    const origin = run.repositoryOrigin;\n\n    if (!origin) {\n      return null;\n    }\n\n    const location = origin?.repositoryLocationName;\n    const name = origin?.repositoryName;\n\n    const match = options.find(\n      (option) => option.repository.name === name && option.repositoryLocation.name === location,\n    );\n\n    // The origin repo is loaded. Verify that a pipeline with this name exists and return the match if so.\n    return match && repoContainsPipeline(match, pipelineName) ? match : null;\n  }, [options, run]);\n\n  const snapshotMatches = React.useMemo(() => {\n    if (!run) {\n      return null;\n    }\n\n    const pipelineName = run.pipelineName;\n    // When jobs are subsetted (with an opSelection or assetSelection), only their\n    // parentPipelineSnapshotId (the id of the pipelineSnapshot that they were subsetted from) will\n    // be found in the repository, so look for that instead.\n    const snapshotId = run.parentPipelineSnapshotId ?? run.pipelineSnapshotId;\n\n    // Find the repository that contains the specified pipeline name and snapshot ID, if any.\n    if (pipelineName && snapshotId) {\n      const snapshotMatches = findRepoContainingPipeline(options, pipelineName, snapshotId);\n      if (snapshotMatches.length) {\n        return snapshotMatches;\n      }\n    }\n\n    return null;\n  }, [options, run]);\n\n  const pipelineNameMatches = React.useMemo(() => {\n    if (!run) {\n      return null;\n    }\n\n    const pipelineName = run.pipelineName;\n\n    // There is no origin repo. Find any repos that might contain a matching pipeline name.\n    const possibleMatches = findRepoContainingPipeline(options, pipelineName);\n    return possibleMatches.length ? possibleMatches : null;\n  }, [options, run]);\n\n  if (repoMatch) {\n    if (snapshotMatches) {\n      const repoAndSnapshotMatch = snapshotMatches.find(\n        (repoOption) =>\n          repoOption.repository.name === repoMatch.repository.name &&\n          repoOption.repositoryLocation.name === repoMatch.repositoryLocation.name,\n      );\n      if (repoAndSnapshotMatch) {\n        return {match: repoAndSnapshotMatch, type: 'origin-and-snapshot'};\n      }\n    }\n\n    return {match: repoMatch, type: 'origin-only'};\n  }\n\n  if (snapshotMatches) {\n    return {match: snapshotMatches[0], type: 'snapshot-only'};\n  }\n\n  if (pipelineNameMatches) {\n    return {match: pipelineNameMatches[0], type: 'pipeline-name-only'};\n  }\n\n  return null;\n};\n","import * as React from 'react';\nimport styled from 'styled-components/macro';\n\nimport {Button} from './Button';\nimport {Icon} from './Icon';\n\nexport interface CursorPaginationProps {\n  hasPrevCursor: boolean;\n  hasNextCursor: boolean;\n  popCursor: () => void;\n  advanceCursor: () => void;\n  reset: () => void;\n}\n\nexport const CursorPaginationControls: React.FC<CursorPaginationProps> = ({\n  hasPrevCursor,\n  hasNextCursor,\n  popCursor,\n  advanceCursor,\n}) => {\n  return (\n    <CursorControlsContainer>\n      <Button disabled={!hasPrevCursor} icon={<Icon name=\"arrow_back\" />} onClick={popCursor}>\n        Previous\n      </Button>\n      <Button\n        disabled={!hasNextCursor}\n        rightIcon={<Icon name=\"arrow_forward\" />}\n        onClick={advanceCursor}\n      >\n        Next\n      </Button>\n    </CursorControlsContainer>\n  );\n};\n\nexport const CursorHistoryControls: React.FC<CursorPaginationProps> = ({\n  hasPrevCursor,\n  hasNextCursor,\n  popCursor,\n  advanceCursor,\n}) => {\n  return (\n    <CursorControlsContainer>\n      <Button icon={<Icon name=\"arrow_back\" />} disabled={!hasPrevCursor} onClick={popCursor}>\n        <span className=\"hideable-button-text\">Newer</span>\n      </Button>\n      <Button\n        rightIcon={<Icon name=\"arrow_forward\" />}\n        disabled={!hasNextCursor}\n        onClick={advanceCursor}\n      >\n        <span className=\"hideable-button-text\">Older</span>\n      </Button>\n    </CursorControlsContainer>\n  );\n};\n\nexport const CursorControlsContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  gap: 12px;\n  margin-top: 16px;\n`;\n"],"names":["Timestamp","props","timestamp","timeFormat","React","TimezoneContext","timezone","locale","navigator","language","timestampToString","NavigationBlock","handler","e","preventDefault","returnValue","window","addEventListener","removeEventListener","message","RunStats","runId","stats","useQuery","RUN_STATS_QUERY","variables","loading","data","RunStatsDetailsContainer","padding","flex","justifyContent","purpose","result","pipelineRunOrError","__typename","error","runPath","to","stepsSucceeded","stepsFailed","materializations","expectations","graphql","styled","RUN_STATUS_COLORS","QUEUED","Colors","NOT_STARTED","STARTING","MANAGED","STARTED","SUCCESS","FAILURE","CANCELING","CANCELED","SCHEDULED","RunStatusWithStats","rest","position","interactionKind","content","hoverOpenDelay","RunStatusIndicator","status","size","RunStatusDot","pulse","inProgressStatuses","queuedStatuses","pulseAnimation","keyframes","css","titleForRun","run","split","shift","assetKeysForRun","assetSelection","stepKeysToExecute","map","s","path","linkToRunEvent","event","qs","focusedTime","Number","undefined","selection","stepKey","logs","RunsQueryRefetchContext","refetch","useDidLaunchEvent","cb","delay","setTimeout","document","handleLaunchResult","pipelineName","history","options","pathname","search","preserveQuerystring","location","openInNewTab","open","createHref","behavior","push","SharedToaster","intent","slice","action","text","onClick","dispatchEvent","CustomEvent","showCustomAlert","body","title","errors","join","getBaseExecutionMetadata","hiddenTagKeys","DagsterTag","parentRunId","rootRunId","tags","filter","tag","includes","key","value","getReexecutionVariables","input","style","repositoryLocationName","repositoryName","pipelineSnapshotId","executionParams","mode","runConfigData","runConfigYaml","executionMetadata","selector","solidSelection","asset_key","type","stepKeys","keys","query","LAUNCH_PIPELINE_EXECUTION_MUTATION","DELETE_MUTATION","TERMINATE_MUTATION","LAUNCH_PIPELINE_REEXECUTION_MUTATION","RunTime","startTime","updateTime","unix","RunStateSummary","RunStatus","endTime","startUnix","endUnix","refineToError","terminatePipelineExecution","ErrorEvent","initializeState","selectedRuns","mustForce","Object","some","id","frozenRuns","step","termination","completed","terminationDialogReducer","prevState","checked","TerminationDialog","isOpen","onClose","onComplete","current","state","dispatch","count","length","useMutation","terminate","policy","TerminateRunPolicy","mutate","runList","ii","terminatePolicy","onToggleForce","target","showCheckbox","canQuicklyClose","canEscapeKeyClose","canOutsideClickClose","direction","spacing","label","onChange","display","gap","margin","top","name","color","Math","max","animate","progressContent","errorCount","successCount","alignItems","completionContent","disabled","buttons","TimeElapsed","setEndTime","interval","timeout","clearTimers","clearInterval","clearTimeout","setInterval","Date","now","fontVariantNumeric","formatElapsedTime","useRepositoryForRun","useRepositoryOptions","repoMatch","origin","repositoryOrigin","match","find","option","repository","repositoryLocation","repoContainsPipeline","snapshotMatches","snapshotId","parentPipelineSnapshotId","findRepoContainingPipeline","pipelineNameMatches","possibleMatches","repoAndSnapshotMatch","repoOption","CursorPaginationControls","hasPrevCursor","hasNextCursor","popCursor","advanceCursor","CursorControlsContainer","icon","rightIcon","CursorHistoryControls","className"],"sourceRoot":""}