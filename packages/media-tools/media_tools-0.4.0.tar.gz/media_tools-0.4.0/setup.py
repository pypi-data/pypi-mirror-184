# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['media_tools',
 'media_tools.util',
 'media_tools.util.buying',
 'media_tools.util.mixcloud']

package_data = \
{'': ['*']}

install_requires = \
['audioread>=2.1.9',
 'coloredlogs>=15.0.1',
 'lxml>=4.8.0',
 'mutagen>=1.45.1',
 'pydub>=0.24.1',
 'pylast>=5.0.0',
 'python-magic>=0.4.25',
 'requests>=2.27.1',
 'tinytag>=1.8.1']

entry_points = \
{'console_scripts': ['backup_lastfm_data = '
                     'media_tools.backup_lastfm_data:entry',
                     'buy_most_played = media_tools.buy_most_played:main',
                     'clean_filenames = media_tools.clean_filenames:main',
                     'copy_from_playlist = media_tools.copy_from_playlist:main',
                     'mixcloud = media_tools.mixcloud_upload:main',
                     'print_length = media_tools.print_length:main']}

setup_kwargs = {
    'name': 'media-tools',
    'version': '0.4.0',
    'description': 'Creating and managing playlists, and managing the filenames and directory structure for large numbers of music files.',
    'long_description': '-   [Installation](#installation)\n-   [Usage](#usage)\n    -   [`mixcloud`](#mixcloud)\n        -   [Authorization](#authorization)\n        -   [Configuration options](#configuration-options)\n    -   [`clean_filenames`](#clean_filenames)\n        -   [Checking results](#checking-results)\n    -   [Audacious playlist tools](#audacious-playlist-tools)\n        -   [`copy_from_playlist`](#copy_from_playlist)\n    -   [`buy_most_played`](#buy_most_played)\n    -   [`backup_lastfm_data`](#backup_lastfm_data)\n    -   [`print_length`](#print_length)\n-   [Development](#development)\n    -   [Test suite](#test-suite)\n    -   [Generating a Table of Contents to\n        `README.md`](#generating-a-table-of-contents-to-readme.md)\n\nToolbox for helping creating and managing playlists, and managing the filenames and directory\nstructure for large numbers of music files.\n\nThis is mostly tailored to my own usage patterns, although it may be useful to others.\n\nHome page: https://gitlab.com/lilacashes/music-library-tools\n\nPyPI page: https://pypi.org/project/media-tools\n\nInstallation\n============\n\n``` {.bash}\n$ pip install media-tools\n```\nThis will install the commands `mixcloud`, `buy_most_played`, `clean_filenames`, \n`backup_lastfm_data`, `copy_from_playlist` and `print_length`.\n\nUsage\n=====\n\n`mixcloud`\n-----------------\n\nThe `mixcloud` command enables you to use the Mixcloud API to publish mixes.\n\n### `mixcloud upload`: Creating a mix\n\nGenerate a mix on [Mixcloud](mixcloud.com) from the contents of a local directory.\n\nAssumes that the given directory contains a number of audio files as well as a picture file (JPEG or\nPNG format), one file called `description.txt` which contains the description which is printed along\nwith the mix on Mixcloud, and a file called `tags.txt` which contains a newline-separated list of\ntags for the mix. The mix is created as an audio file called `mix.mp3` in the given directory and\nthen uploaded to Mixcloud. The title of the mix on Mixcloud will be the name of the directory given,\nminus any leading numbers.\n\n**Example:** You have a directory structured like this:\n\n    10 - My awesome mix\n    |-- 01 - Awesome track.mp3\n    |-- 02 - Also awesome track.ogg\n    |-- 03 - Another pretty cool track.m4a\n    |-- 04 - This track rocks.flac\n    |-- cover.png\n    |-- description.txt\n    |-- tags.txt\n\n``` {.shell}\n$ mixcloud upload -d "10 - My awesome mix"\n```\nwill upload this mix to Mixcloud under the name "My awesome mix" with track 01 to 04 in that order.\nPrefixing the tracks with numbers is not necessary, but helpful to ensure the tracks are in the \ndesired order.\n\n#### Options\n\n- `-d DIRECTORY`, `--directory DIRECTORY`: Specify the folder containing the mix, as seen in the \n    example above\n- `-e EXTENSION [EXTENSION ...]`, `--extensions EXTENSION [EXTENSION ...]`: List of file extensions \n    to consider as audio files for the mix. Per default, files ending in `.mp3`, `.MP3`, `.flac`,\n    `.m4a` and `.ogg` are treated as audio and added to the mix. Change this list if any of your \n    audio files have extensions that are not part of this list, or if you want to exclude any of \n    these extensions.\n- `-q`, `--quiet`: Only errors are printed. Usually you want to omit `-q`, since the entire\n    generating and uploading process takes several minutes, so you want to be informed of what is \n    going on.\n- `-s`, `--strict`: Do not upload the mix if any of these conditions are met:\n    -   There is no picture, no `descriptions.txt` or no `tags.txt` in the upload folder\n    -   Any of the audio tracks in the folder is missing the ID3 tag for title or artist. These tags\n        are needed to generate the tracklist for the mix.\n- `-c CROSSFADE_MS`, `--crossfade-ms CROSSFADE_MS`: Number of milliseconds to use for crossfading\n    between two tracks. Currently, there can only be one global value which is used between all\n    tracks.\n- `-r MAX_RETRY`, `--max-retry MAX_RETRY`: Maximum number of retries for failing uploads. Uploads\n    can fail for a number of reasons, such as rate limiting on the Mixcloud side, or because of a\n    bad internet connection. The default number of retries is set to 100, set this to a lower number\n    if you want to give up earlier.\n- `-a TOKEN_FILE`, `--auth-token-file TOKEN_FILE`: explicitly specify the file containing the \n    Mixcloud authorization token.\n- `-t TOKEN_STRING`, `--auth-token-string TOKEN_STRING`: explicitly specify the Mixcloud \n    authorization token as a string.\n- `--description-file DESCRIPTION_FILE` The description that goes with the mix on its Mixcloud page\n-   in a file\n- `--description DESCRIPTION_STRING` The description that goes with the mix on its Mixcloud page as \n-   a string\n- `--tags-file TAGS_FILE` Tags for the mix, in a newline-separated file\n- `--tags TAG_STRING [TAG_STRING ...]` Tags for the mix, space-separated\n- `--picture-file PICTURE_FILE` Picture for the mix\n\n### `mixcloud create-auth`: Create authorization with the Mixcloud API\n\nThis process takes three steps. You will need to generate an application on Mixcloud for your \nMixcloud account, authorize it to get an OAuth token and ose the OAuth token get an API access \ntoken, as described in the \n[Mixcloud API Documentation](https://www.mixcloud.com/developers/#authorization). The \n`mixcloud create-auth` command guides you through the process as follows:\n\n#### Step 1: Create a Mixcloud app\nBefore you start this step, ensure that you are logged in to Mixcloud on your system browser, \nbecause you need to fill in the form that is going to open in your browser.\n\nThen enter:\n``` {.shell}\n$ mixcloud create-auth --create-app\n```\nA window will open in your browser. Follow the instructions printed in your terminal - click on the\napp name in the browser and copy the client ID for steps 2 and 3 and the client secret for step 3.\n\n#### Step 2: Create OAuth token\nUse the client ID and secret from step 1 to run\n``` {.shell}\n$ mixcloud create-auth --create-code --client-id CLIENT_ID\n```\nAgain a browser window will open with a page displaying an "Authorize" button. Click it and you will\nbe taken to a page displaying a so-called OAuth code. Copy the code to use it in step 3.\n\n#### Step 3: Create the Mixcloud API token\nUse the code from step 2 to run\n``` {.shell}\n$ mixcloud create-auth --create-token --client-id CLIENT_ID \\ \n                                      --client-secret CLIENT_SECRET \\\n                                      --oauth-code OAUTH_CODE\n```\nThis will open yet another browser window showing you a token (in JSON format). Copy only the string\ninside the quotes to use as token - either directly (here called <TOKEN>) or written (without any \nextra spaces or newlines) to a file (here called <TOKEN_FILE>).\n\nAfterwards you can use the generated token to upload mixes to Mixcloud with:\n``` {.shell}\n$ mixcloud upload --auth-token-string <TOKEN> ...\n$ mixcloud upload --auth-token-file <TOKEN_FILE> ...\n```\nIf you store this access token as `.mixcloud_access_token` in either the current directory, your \nuser\'s `$HOME` directory or under `$HOME/.config/media-tools`, that token will be used without\nspecifying `--auth-token-string` or `--auth-token-file`.\n\n### Configuration options\n\n`clean_filenames`\n-----------------\n\nIn general: run a script with the `-v` option first to see what it would change. If satisfied, then\nre-run it with the `-f` option to effect those changes.\n\nRemoving useless duplicate strings from filenames:\n\n``` {.bash}\n$ clean_filenames -v clean-filenames --recurse .\n$ clean_filenames -f clean-filenames --recurse .\n```\n\nChanging filenames from different numbering schemes to the scheme `01 - filename.ext`:\n\n``` {.bash}\n$ clean_filenames -v clean-numbering .\n$ clean_filenames -f clean-numbering .\n```\n\nRemoving stray junk, such as underscores, stray dashes, and stray `[]` and `()` from filenames:\n\n``` {.bash}\n$ clean_filenames -v clean-junk .\n$ clean_filenames -f clean-junk .\n```\n\nUndoing renamings done with this script, limited to a specified directory and its subfolders, or a\nsingle file name:\n\n``` {.bash}\n$ clean_filenames -v undo .\n$ clean_filenames -f undo .\n# OR\n$ clean_filenames -f undo ./subdir/file_name.mp3\n```\n\nFixing symlinks to files which have been renamed by any of the previous commands:\n\n``` {.bash}\n$ clean_filenames -v fix-symlinks .\n$ clean_filenames -f fix-symlinks .\n```\n\n### Checking results\n\nFinding mp3 files which do not conform to the numbering scheme in general:\n\n``` {.bash}\n$ find . -name \\*.mp3 | grep -vE \'[[:digit:]]+ - .+\\.mp3\'\n```\n\nFinding mp3 files which have a number in their filename but do not conform to the numbering scheme,\nexcluding some more common use cases:\n\n``` {.bash}\n$ find . -name \\*.mp3 | \\\n    grep -E \'[[:digit:]]+[^/]+\\.mp3\' | \\\n    grep -vE \'[[:digit:]]+ - .+\\.mp3\' | \\\n    grep -vE \'[[:digit:]]{2}\\.mp3\'\n```\n\nAudacious playlist tools\n------------------------\n\nTools for making and repairing playlists containing physical music files from audacious playlists\nand the latest music files. The argument to `--playlist` defaults to the playlist currently playing\nin audacious.\n\n### `copy_from_playlist`\n\nCopying files from the current or specified playlist (as its name in the `playlists` subdir in the\naudacious configuration folder) to a specified target folder, optionally limiting the number of\nfiles to copy to the first NUM, and optionally renaming the files to reflect the position of the\nsong in the playlist:\n\n``` {.bash}\n$ copy_from_playlist [-v] copy \\\n    [--playlist PLAYLIST_ID] \\\n    [--number NUM] \\\n    [--renumber] \\\n    TARGET_DIR\n```\n\nTry to find files in the current playlist which are unavailable because they have been moved, and\nmove them back to the place in the filesystem which is noted on the playlist (does not appear to\nwork currently):\n\n``` {.bash}\n$ copy_from_playlist [-v] restore \\\n    [--playlist PLAYLIST_ID]\n```\n\nCopy the newest files to a specified target:\n\n``` {.bash}\n$ copy_from_playlist [-v] copy-newest \\\n    --max-age NUM_DAYS \\\n    --source SOURCE_DIR \\\n    --target TARGET_DIR\n```\n\n\n`buy_most_played`\n-----------------\n\nAttempt to buy your most played tracks (in a given period) from several platforms.\n\n### Options\n- `-u USER`, `--user USER`: Last.FM username\n- `-k API_KEY`, `--api-key API_KEY`: Last.FM API key\n- `-l LIMIT`, `--limit LIMIT`: Maximum number of tracks to display\n- `-m MIN_PLAYS`, `--min-plays MIN_PLAYS`: Minimum number of plays per track to consider buying it\n- `--buy-up-to BUY_UP_TO`: When specified, repeat until this may tracks have been bought\n- `-p PERIOD`, `--period PERIOD`: Period (`{overall,7day,1month,3month,6month,12month}`) from which \n  to choose favorite tracks\n- `-f FROM_DATE`, `--from-date FROM_DATE`: Start date of period in which most played tracks are \n  considered\n- `-t TO_DATE`, `--to-date TO_DATE`: End date of period in which most played tracks are considered\n- `-d TRACK_DB`, `--track-db TRACK_DB`: Name of the file storing already bought tracks\n\n\n`backup_lastfm_data`\n--------------------\n\nBack up Last.FM scrobbles. Output is saved in JSON format.\n\n### Options\n- `--limit N`, `-l N`: maximum number of scrobbles (most recent scrobbles first) and other entities \n  (top `N` items) to back up\n- `--year YEAR`, `-y YEAR`: year the data is requested for (empty for all Last.FM scrobbles)\n- `--output FILE`, `-o FILE`: output file name\n- `--max-retry-wait SECS`, `-m SECS`: maximum seconds to wait between requests to avoid rate \n  limiting\n- `--lastfm-user USER`: Last.FM user name for scrobbles to be read (defaults to environment variable\n  `$PYLAST_USERNAME`)\n- `--lastfm-api-key`: Last.FM API key (defaults to environment variable `PYLAST_API_KEY`)\n- `--lastfm-api-secret`: Last.FM API secret (defaults to environment variable `PYLAST_API_SECRET`)\n\n\n`print_length`\n--------------\n\nGiven a directory of audio files, print the total playing time of that directory, optionally broken \ndown by subdirectory.\n\n```shell\n$ print_length [OPTIONS] TARGET_DIRECTORY\n```\n\n### Options\n- `-r`/`--recursive`: print the playing time of each subdirectory, recursively descending \n  subdirectories, sorted by directory playing time \n- `--debug`: print lots of internal info for debugging\n- `--max-debug-items N`: limit debugging output to the `N` shortest items\n\n\nDevelopment\n===========\n\nAfter cloning, it is recommended to set up the git hook that runs the test suite before every\n`git push`:\n\n``` {.shell}\n$ cd .git/hooks\n$ ln -s ../../.git_hooks/pre-push .\n```\n\nTest suite\n----------\n\nRun all in one:\n\n``` {.shell}\n$ .git_hooks/pre-push\n```\n\nRun separately:\n\n``` {.shell}\n$ poetry run mypy .\n$ poetry run flake8 .\n$ poetry run pylint media_tools\n$ poetry run nosetests --with-coverage --cover-package=media_tools.util tests/unit\n$ poetry run nosetests tests/integration\n```\n\nGenerating a Table of Contents to `README.md`\n---------------------------------------------\n\n``` {.shell}\n$ git add README.md\n$ git commit -m \'Before ToC generation\'\n$ pandoc -s --columns 100 --toc --toc-depth=4 README.md -o README_toc.md\n$ mv README_toc.md README.md\n$ git add README.md\n$ git commit -m \'After ToC generation\'\n```\n',
    'author': 'Lene Preuss',
    'author_email': 'lene.preuss@gmail.com',
    'maintainer': 'None',
    'maintainer_email': 'None',
    'url': 'https://gitlab.com/lilacashes/music-library-tools',
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'entry_points': entry_points,
    'python_requires': '>=3.7,<4.0',
}


setup(**setup_kwargs)
