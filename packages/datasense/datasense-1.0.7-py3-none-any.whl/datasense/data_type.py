# -*- coding: utf-8 -*-
"""data_type.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hXqk03pp_9_7WLvZYUoLPj3KMoLTYibR
"""

import pandas as pd
import numpy as np

def info():
    print("""
          data_type module has information and function to access and visualize different datatypes,
          1. df
          2. convert_to_df
          3. numpy_ndarray
          4. list
          5. convert_data_types (converting one data type to another)
          6. str

          All data plot has an info() function which will guide how to use different datatypes, for example,
          $ df_info()
        """)

# 1. df

def df_info():
    print("""
          * df(df) - input a df will give information about the type, len, shape,column and access row, column and its elements
          """)
def df(df):
    print("type(df) : " + str(type(df)))
    print("len(df) : " + str(len(df)))
    print("df.shape : " + str(df.shape))
    print("df.column : " + str(df.columns))
    print("df column name as list - column_list = list(df)")
    print("assign column name - df.column = ['Fx','Fy','Fz']")
    print("access first column - df['Fx']")
    print("access first row - df.iloc[0] : \n"+ str(df.iloc[0]))
    print("access first 15 rows - df.iloc[:15]")
    print("access last 15 rows - df.iloc[15:]")
    print("access first element of first row - df.iloc[0][0] :" + str(df.iloc[0][0]))

# 2. convert_to_df

def convert_to_df_info():
    print("""
          - sklearn.utils.Bunch to df
          $ cancer=load_breast_cancer()
          $ cancer.keys()
          $ df = pd.DataFrame(cancer['data'],columns=cancer['feature_names'])
          """)

# 3. numpy_ndarray

def numpy_ndarray_info():
    print("""
          * numpy_ndarray(ndarray) - input a numpy ndarray will give information about the type, len, shape,column and access row, column and its elements
          """)

def numpy_ndarray(ndarray):
    print("type(array) : " + str(type(ndarray)))
    print("len(array) : " + str(len(ndarray)))
    print("array.shape : " + str(ndarray.shape))
    print("array[0] : "+ str(ndarray[0]))
    print("array[0][0] :" + str(ndarray[0][0]))
    print("array[:, 0] :"+ str(array[:,0]))


# 4. list
def list_info():
    print("""
          * list_information(data_list) - input a list will return information of its length and first elements
          * list_duplicates(data_list) - input a list will return a list of all duplicates in the input list
          * unique_element_list(data_list) - input a list will return a list by removing the duplicates in the list
          """)

def list_information(data_list):
    print("$ len(list) : " + str(len(data_list)))
    print("list's first element - $ list[0] : "+ str(data_list[0]))
    try:
      print("lenght of the list's first element - $ len(list[0]) : " + str(len(data_list[0])))
      print("first element's first element - $ list[0][0] : " + str(data_list[0][0]))
    except TypeError:
      print("")

def unique_element_list(data_list):
    return list(set(data_list))

def list_duplicate(data_list):
  return [x for x in data_list if data_list.count(x) > 1]

# 5. convert_data_types
def convert_data_types_info():
    print("""
          $ data_list = list(data_set) - converts set into list 
          $ data_str = str(data_int_float) - convert int/float into str
          """)

# 6. str
def str_info():
    print("""
          * list_string_join(data_list,delimiter = "") -  join the list of string using a delimiter
          """)
    
def list_string_join(data_list,delimiter = ""):
  return delimiter.join(data_list)