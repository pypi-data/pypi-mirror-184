# -*- coding: utf-8 -*-
"""data_analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1h9LCuGQBtY0dE3AD7Zdh_vpjDffa6PU2
"""

import pandas as pd
import numpy as np


def info():
    print("""
          data_analysis module has information and function to analysis the data,
          - df (Pandas data frame)
          - fft (Fast Fourier transform)

          All data analysis has an info() function which will guide how to analysis

          Example
          "
          df_info()
          "
        """)

def df_info():
    print("""
          - sorting
            fft_df_sort = fft_df.sort_values(by=['amp'], ascending=False)
          - remove columns
            df = df.drop(columns=["Fx","Fy","Vx"])
          """)

def fft_info():
    print("""
          Input
            * t_or_Fs - time stamp (list) or sampling frequency (float or int)
            * signal - signal to be analysis (list)
            * lpf_hz (optional) - low pass filter in Hz (float or int)
            * hpf_hz (optional) - high pass filter in Hz (float or int)
          Output
            * fft_df - frequency and amplitude (pandas.Dataframe)
          """)
    
def fft(t_or_Fs,signal,lpf_hz=2,hpf_hz=500):

    data_type = type(t_or_Fs)
    if data_type == float or data_type == int: Fs = t_or_Fs
    else: Fs = 1/(np.mean(np.diff(t_or_Fs))) # calculate sampling freq

    N = len(signal)

    f = np.linspace(0,(N-1)*(Fs/N), N)
    freq = f[0:int(N/2+1)]

    X_mag = np.abs(np.fft.fft(signal))/N
    X_mag_plot = 2 * X_mag[0:int(N/2+1)]  
    X_mag_plot[0] = X_mag_plot[0] / 2

    is_low_freq =  freq < lpf_hz # low pass filter
    X_mag_plot[is_low_freq] = 0
    is_high_freq =  freq > hpf_hz # high pass filter
    X_mag_plot[is_high_freq] = 0

    fft_df = pd.DataFrame(list(zip(freq, X_mag_plot)),columns=["freq","amp"])

    return fft_df