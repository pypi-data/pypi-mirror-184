"""Trivy Container tool class"""
import shlex
import textwrap

from pydash import py_

from eze.core.enums import VulnerabilityType, VulnerabilitySeverityEnum, ToolType, SourceType, Vulnerability
from eze.core.tool import (
    ToolMeta,
    ScanResult,
)
from eze.utils.cli.run import run_async_cli_command, CompletedProcess
from eze.utils.io.file import load_json
from eze.utils.error import EzeConfigError
from eze.utils.cli.exe import exe_variable_interpolation_single


class TrivyTool(ToolMeta):
    """SCA Container scanning tool Trivy tool class"""

    TOOL_NAME: str = "container-trivy"
    TOOL_URL: str = "https://aquasecurity.github.io/trivy/latest/"
    TOOL_TYPE: ToolType = ToolType.SCA
    SOURCE_SUPPORT: list = [SourceType.CONTAINER]
    SHORT_DESCRIPTION: str = "opensource container scanner"
    INSTALL_HELP: str = """You don't need to install anything, since this tool runs on its docker image
Inside Docker:  docker run aquasec/trivy --version

As of writing, no native windows 10 trivy exists, can be run locally via wsl2
https://aquasecurity.github.io/trivy/latest/installation/
"""
    MORE_INFO: str = """https://aquasecurity.github.io/trivy/latest/

Tips
===========================
- use slim versions of base images
- always create a application user for running entry_point and cmd commands
- read https://owasp.org/www-project-docker-top-10/

Common Gotchas
===========================
Worth mentioning vulnerability counts are quite high for official out the box docker images

trivy image node:slim
Total: 101 (UNKNOWN: 2, LOW: 67, MEDIUM: 8, HIGH: 20, CRITICAL: 4)

trivy image python:3.8-slim
Total: 112 (UNKNOWN: 2, LOW: 74, MEDIUM: 11, HIGH: 21, CRITICAL: 4)"""
    # https://github.com/aquasecurity/trivy/blob/main/LICENSE
    LICENSE: str = """Apache-2.0"""
    VERSION_CHECK: dict = {
        "FROM_EXE": "trivy --version",
        "FROM_DOCKER": {"DOCKER_COMMAND": {"IMAGE_NAME": "aquasec/trivy:0.35.0", "BASE_COMMAND": "version"}},
    }
    EZE_CONFIG: dict = {
        "IMAGE_NAME": {
            "type": str,
            "default": "",
            "help_text": """docker image name and tag(optional) to scan""",
            "help_example": "aquasec/trivy",
        },
        "IMAGE_FILE": {
            "type": str,
            "default": "",
            "help_text": """tar file to scan, generated by docker save""",
            "help_example": "docker-image.tar",
        },
        "TRIVY_VULN_TYPE": {
            "type": list,
            "default": ["os", "library"],
            "help_text": textwrap.dedent(
                """By default standard trivy image of "os,library", maps to trivy argument
--vuln-type value  comma-separated list of vulnerability types (os,library) (default: "os,library")"""
            ),
        },
        "TRIVY_IGNORE_UNFIXED": {
            "type": str,
            "default": "false",
            "help_text": textwrap.dedent(
                """By default false, maps to trivy argument
--ignore-unfixed  display only fixed vulnerabilities (default: false) [$TRIVY_IGNORE_UNFIXED]"""
            ),
        },
        "REPORT_FILE": {
            "type": str,
            "default": "__ABSOLUTE_CWD__.eze/raw/_trivy-report.json",
            "default_help_value": "<cwd>.eze/raw/_trivy-report.json",
            "help_text": "output report location",
        },
    }
    TOOL_CLI_CONFIG = {
        "CMD_CONFIG": {
            # tool command prefix
            "BASE_COMMAND": shlex.split("trivy image --no-progress --format=json --severity CRITICAL,HIGH,MEDIUM,LOW"),
            "DOCKER_COMMAND": {
                "FOLDER_NAME": "/path",
                "IMAGE_NAME": "aquasec/trivy:0.35.0",
                "BASE_COMMAND": "image --no-progress --format=json --severity CRITICAL,HIGH,MEDIUM,LOW",
            },
            # eze config fields -> arguments
            "TAIL_ARGUMENTS": ["IMAGE_NAME"],
            # eze config fields -> flags
            "FLAGS": {
                "TRIVY_VULN_TYPE": "--vuln-type=",
                "TRIVY_IGNORE_UNFIXED": "--ignore-unfixed=",
                "REPORT_FILE": "-o=",
                "IMAGE_FILE": "-i=",
            },
        }
    }

    async def run_scan(self) -> ScanResult:
        """
        Run scan using tool

        typical steps
        1) setup config
        2) run tool
        3) parse tool report & normalise into common format

        :raises EzeError
        """

        completed_process: CompletedProcess = await run_async_cli_command(
            self.TOOL_CLI_CONFIG["CMD_CONFIG"], self.config, self.TOOL_NAME
        )

        report_local_filepath = exe_variable_interpolation_single(self.config["REPORT_FILE"])
        report_events = load_json(report_local_filepath)
        report = self.parse_report(report_events)
        if completed_process.stderr:
            report.warnings.append(completed_process.stderr)

        return report

    def trivy_severity_to_cwe_severity(self, trivy_severity: str) -> str:
        """convert trivy severities into standard cvss severity

        as per
        https://semgrep.dev/docs/writing-rules/rule-syntax/#schema
        https://nvd.nist.gov/vuln-metrics/cvss"""
        trivy_severity = trivy_severity.lower()
        has_severity = hasattr(VulnerabilitySeverityEnum, trivy_severity)
        if not has_severity:
            if trivy_severity in ("$unknown", "unknown"):
                # unknown trivy severity, defaulting to na
                return VulnerabilitySeverityEnum.na.name
            return VulnerabilitySeverityEnum.na.name

        return VulnerabilitySeverityEnum[trivy_severity].name

    def parse_report(self, parsed_json: list) -> ScanResult:
        """convert report json into ScanResult"""
        # TODO Review if the trivy exe output is also within 'Results.[0].Vulnerabilities' or '[0].Vulnerabilities'
        report_events = py_.get(parsed_json, "[0].Vulnerabilities") or py_.get(
            parsed_json, "Results.[0].Vulnerabilities", []
        )
        vulnerabilities_list: list = []
        for report_event in report_events:
            vulnerable_package = py_.get(report_event, "PkgName", "unknown")
            installed_version = py_.get(report_event, "InstalledVersion", "unknown")
            fixed_version = py_.get(report_event, "FixedVersion", "")
            if fixed_version:
                recommendation = f"Update {vulnerable_package} ({installed_version}) to a non vulnerable version, issue fixed in {fixed_version}"
            else:
                recommendation = ""

            identifiers = {}
            cve_id = py_.get(report_event, "VulnerabilityID", "")
            cwe_id = py_.get(report_event, "CweIDs[0]", "")
            if cve_id:
                identifiers["cve"] = cve_id
            if cwe_id:
                identifiers["cwe"] = cwe_id

            references = py_.get(report_event, "References", [])
            references.insert(0, py_.get(report_event, "PrimaryURL", ""))

            trivy_severity = py_.get(report_event, "Severity", "unknown")
            severity = self.trivy_severity_to_cwe_severity(trivy_severity)

            vulnerability_raw = {
                "vulnerability_type": VulnerabilityType.dependency.name,
                "name": py_.get(report_event, "Title", py_.get(report_event, "PkgName", "unknown")),
                "version": py_.get(report_event, "InstalledVersion", "unknown"),
                "overview": py_.get(report_event, "Description", "unknown"),
                "recommendation": recommendation,
                "severity": severity,
                "identifiers": identifiers,
                "references": references,
            }
            vulnerability = Vulnerability(vulnerability_raw)
            vulnerabilities_list.append(vulnerability)

        report = ScanResult(
            {
                "tool": self.TOOL_NAME,
                "vulnerabilities": vulnerabilities_list,
            }
        )
        return report

    def _parse_config(self, eze_config: dict) -> dict:
        """take raw config dict and normalise values"""
        parsed_config = super()._parse_config(eze_config)

        # ADDITION PARSING: IMAGE_NAME or IMAGE_FILE
        if not parsed_config.get("IMAGE_NAME") and not parsed_config.get("IMAGE_FILE"):
            raise EzeConfigError("required param 'IMAGE_NAME' or 'IMAGE_FILE' missing from configuration")

        # ADDITION PARSING: VULNERABILITY_TYPES
        # convert to space separated, clean os specific regex
        if len(parsed_config["TRIVY_VULN_TYPE"]) > 0:
            parsed_config["TRIVY_VULN_TYPE"] = ",".join(parsed_config["TRIVY_VULN_TYPE"])
        else:
            parsed_config["TRIVY_VULN_TYPE"] = ""

        return parsed_config
