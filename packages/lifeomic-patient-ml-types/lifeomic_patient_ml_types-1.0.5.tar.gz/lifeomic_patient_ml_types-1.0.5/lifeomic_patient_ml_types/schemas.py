# generated by datamodel-codegen:
#   filename:  openapi.json
#   timestamp: 2022-12-27T22:15:10+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, Dict, List, Literal, Optional, Union

from pydantic import BaseModel, Extra, Field


class FhirRef(BaseModel):
    class Config:
        extra = Extra.forbid

    path: str
    """
    TODO figure out what this should look like. How do you uniquely reference a fhir resource, and a specific data element in that resource?
    """


class InputConfig(BaseModel):
    class Config:
        extra = Extra.forbid

    ref: FhirRef


class TargetConfig(BaseModel):
    class Config:
        extra = Extra.forbid

    ref: FhirRef


class MlProblemType(Enum):
    imgSeg = "imgSeg"
    imgClf = "imgClf"


class TrainingApproachBase(BaseModel):
    class Config:
        extra = Extra.forbid

    id: str
    """
    UUID uniquely identifying this training approach.
    """
    name: str
    description: str
    problemType: MlProblemType
    """
    The problem type this training approach is designed to solve.
    """


class TuningJobTrainingApproach(TrainingApproachBase):
    type: Literal["tuningJob"]
    tuningJobConfig: Dict[str, Any]
    """
    TODO - stub out this type.
    """
    deployConfig: Dict[str, Any]
    """
    TODO - stub out this type.
    """


class TrainingApproach(BaseModel):
    __root__: TuningJobTrainingApproach


class ModelConfigBase(BaseModel):
    class Config:
        extra = Extra.forbid

    name: str
    description: str
    inputs: List[InputConfig]
    target: TargetConfig
    avgLatencyUb: float
    """
    The allowed upper bound on the model's average latency, in seconds. A lower upper bound will mean higher inference costs.
    """


class ModelConfig(ModelConfigBase):
    id: str
    """
    UUID uniquely identifying this model config.
    """
    approach: TrainingApproach
    deployedId: str
    """
    The ID of the model version currently deployed for this model config.
    """


class Split(BaseModel):
    class Config:
        extra = Extra.forbid

    n: float
    """
    The number of examples in this split.
    """
    start: float
    """
    Timestamp marking the beginning of the data for this split (inclusive). Expressed as milliseconds since the UTC epoch.
    """
    end: float
    """
    Timestamp marking the end of the data for this split (exclusive). Expressed as milliseconds since the UTC epoch.
    """
    uri: str = Field(..., regex="^s3:\\/\\/.+$")
    """
    S3 URI of where a copy of this exact split is saved.
    """


class Metric(BaseModel):
    class Config:
        extra = Extra.forbid

    name: str
    """
    The name of the metric e.g. "Cross Entopy Loss", "Accuracy", "F1 Macro", etc.
    """
    value: float


class ApprovalChoice(Enum):
    approved = "approved"
    rejected = "rejected"


class ApprovalDecisionBase(BaseModel):
    class Config:
        extra = Extra.forbid

    timestamp: float
    """
    Timestamp of when the decision was made. Expressed as milliseconds since the UTC epoch.
    """
    decision: ApprovalChoice


class SystemApprovalDecision(ApprovalDecisionBase):
    actor: Literal["system"]


class UserApprovalDecision(ApprovalDecisionBase):
    actor: Literal["user"]
    user: str


class ApprovalDecision(BaseModel):
    __root__: Union[SystemApprovalDecision, UserApprovalDecision]


class RunSplits(BaseModel):
    """
    Information about the different splits of the dataset used to train this model version.
    """

    class Config:
        extra = Extra.forbid

    train: Split
    val: Split
    test: Split


class RunMetrics(BaseModel):
    class Config:
        extra = Extra.forbid

    challenger: List[Metric]
    """
    Metrics about how the model version trained in this run performed, the challenger model.
    """
    champion: Optional[List[Metric]] = None
    """
    Decisions made by various actors representing whether they think this model version should be used in production and become the new champion.
    """


class ModelRun(BaseModel):
    """
    TODO - add the hyperparameters of the model artifact to this object.
    """

    class Config:
        extra = Extra.forbid

    id: str
    """
    UUID uniquely identifying this model run.
    """
    slug: str
    """
    Human-readable slug uniquely identifying the model run. Acts as an auto-generated name for the run.
    """
    modelId: str
    """
    ID of the model config this run was produced for.
    """
    modelArtifactUri: str
    """
    S3 URI location where the final trained model artifact produced by this run is saved to.
    """
    start: float
    """
    Timestamp of when the run started. Expressed as milliseconds since the UTC epoch.
    """
    end: float
    """
    Timestamp of when the run ended. Expressed as milliseconds since the UTC epoch.
    """
    splits: RunSplits
    metrics: RunMetrics
    approvals: List[ApprovalDecision]
    """
    Decisions made by various actors representing whether they think this model version should be used in production and become the new champion.
    """
    approach: TrainingApproach
