"""@Author: Rayane AMROUCHE

Report generation functions
"""
from typing import Any, List
import explainerdashboard as ed  # type: ignore
import sweetviz as sv  # type: ignore
import pandas as pd  # type: ignore


class UnknownExplainableModel(Exception):
    """Exception raised for errors related to unknown model for shap.
    """

    def __init__(self, model: Any,
                 model_type: str,
                 message: str = "Model Type unknown or not supported"):
        """Init the Exception for a given model and model type

        Args:
            model (Any): Model that cannot be explained
            model_type (str): Type of model announced
            message (str, optional): Exception message. Defaults to "Model Type
                unknown or not supported".
        """

        self.model = model
        self.model_type = model_type
        self.message = message
        super().__init__(self.message)


def make_shap_explainer(df_test: pd.DataFrame,
                        model: Any,
                        model_type: str,
                        x_cols: List[str],
                        y_cols: List[str],
                        **kwargs: int) -> Any:
    """Generates a shap explainer report

    Args:
        df_ (pd.DataFrame): Data for the model in a pandas DataFrame
        model (Any): Model to explain
        model_type (str): Model type as a string to select the right explainer
        x_cols (List[str]): Independant features list
        y_cols (List[str]): Dependant features list

    Raises:
        Exception: Raised if model_type is not supported

    Returns:
        Any: Explainer report generated by shap and explainerdashboard
    """
    var_x = df_test[x_cols]
    var_y = df_test[y_cols]
    if model_type == "Regression":
        explainer = ed.RegressionExplainer(model, X=var_x, y=var_y, **kwargs)
    elif model_type == "Classification":
        explainer = ed.ClassifierExplainer(model, X=var_x, y=var_y, **kwargs)
    else:
        raise UnknownExplainableModel(model, model_type)
    return explainer


def make_eda_report(df_: pd.DataFrame, **kwargs: int) -> Any:
    """Generates an EDA report with sweetviz

    Args:
        df_ (pd.DataFrame): Dataframa for which we want to do an EDA

    Returns:
        Any: EDA report generated by sweetviz
    """
    report = sv.analyze(df_, **kwargs)
    return report
