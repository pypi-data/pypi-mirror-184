Metadata-Version: 2.1
Name: pysequoia
Version: 0.1.2
Classifier: Programming Language :: Rust
Classifier: Programming Language :: Python :: Implementation :: CPython
Classifier: Programming Language :: Python :: Implementation :: PyPy
Summary: Provides encryption and signing capabilities through Sequoia
Requires-Python: >=3.7
Description-Content-Type: text/plain; charset=UTF-8

#+TITLE: PySequoia
#+HTML_HEAD: <link rel="stylesheet" href="doc/tufte.min.css">
#+PROPERTY: header-args :tangle yes :exports both
#+OPTIONS: html-postamble:nil

Note: This is a work in progress. The API is *not* stable!

Building:

#+BEGIN_SRC sh
python3 -m venv .env
source .env/bin/activate
pip install maturin
maturin develop
#+END_SRC

Now open the console with =python= and import the library:

#+BEGIN_SRC python
import pysequoia
#+END_SRC

** Available functions

*** encrypt

Signs and encrypts a string to one or more recipients:

#+BEGIN_SRC python
  s = open("signing-key.asc", "r").read()
  r = open("wiktor.asc", "r").read()
  pysequoia.encrypt(s, r, "content to encrypt")
#+END_SRC

*** merge

Merges data from old certificate with new packets:

#+BEGIN_SRC python
  old = open("wiktor.asc", "r").read()
  new = open("wiktor-fresh.asc", "r").read()
  pysequoia.merge(old, new)
#+END_SRC

*** minimize

Discards expired subkeys and User IDs:

#+BEGIN_SRC python
cert = open("wiktor.asc", "r").read()
pysequoia.minimize(cert)
#+END_SRC

