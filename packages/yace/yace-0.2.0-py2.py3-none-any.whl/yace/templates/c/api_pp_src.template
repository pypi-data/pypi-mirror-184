/**
 * Copyright (C) Simon A. F. Lund <os@safl.dk>
 * SPDX-License-Identifier: BSD-3-CLAUSE
 *
 * @file {{ meta.prefix }}_spec.c
 */
#include <inttypes.h>
#include <stdio.h>
#include <errno.h>
#include <lib{{ meta.prefix }}.h>
#include <lib{{ meta.prefix }}_pp.h>

{%- for ent in entities %}
{% set ident=meta['prefix'] + '_' + ent['symbol'] %}
{%- if ent['cls'] in ['enum'] %}
const char *
{{ ident }}_str(int enum_val)
{
	switch (enum_val) {
	{%- for member in ent['members'] %}
	case {{ ident | upper }}_{{ member['symbol'] | upper }}:
		return "{{ member['symbol'] }}";
	{%- endfor %}
	}

	return "ENOSYS";

}
{%- elif ent['cls'] in ['struct', 'union'] %}
static int
{{ ident }}_yaml(FILE *stream, const struct {{ ident }} *obj, int flags)
{
	int wrtn = 0;

	wrtn += fprintf(stream, "{{ ident }}:");

	if (!obj) {
		wrtn += fprintf(stream, " ~\n");
		return wrtn;
	}

	// TODO: implement the yaml-representation

	return wrtn;
}

int
{{ ident }}_fpr(FILE *stream, const struct {{ ident }} *obj, int flags)
{
	switch (flags) {
	case {{ meta.prefix | upper }}_PR_DEF:
	case {{ meta.prefix | upper }}_PR_YAML:
		return {{ ident }}_yaml(stream, obj, flags);
		break;

	case {{ meta.prefix | upper }}_PR_JSON:
		return -ENOSYS;
	}

	return -ENOSYS;
}

int
{{ ident }}_pr(const struct {{ ident }} *obj, int flags)
{
	return {{ ident }}_fpr(stdout, obj, flags);
}
{%- endif %}
{%- endfor %}
