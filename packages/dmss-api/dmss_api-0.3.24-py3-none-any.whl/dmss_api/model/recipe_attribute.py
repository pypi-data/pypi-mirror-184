# coding: utf-8

"""
    Data Modelling Storage Service

    API for basic data modelling interaction  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from dmss_api import schemas  # noqa: F401


class RecipeAttribute(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "name",
        }
        
        class properties:
            name = schemas.StrSchema
            type = schemas.StrSchema
            attributeType = schemas.StrSchema
            label = schemas.StrSchema
            contained = schemas.BoolSchema
            field = schemas.StrSchema
            array_field = schemas.StrSchema
            collapsible = schemas.BoolSchema
            ui_recipe = schemas.StrSchema
            mapping = schemas.StrSchema
            __annotations__ = {
                "name": name,
                "type": type,
                "attributeType": attributeType,
                "label": label,
                "contained": contained,
                "field": field,
                "array_field": array_field,
                "collapsible": collapsible,
                "ui_recipe": ui_recipe,
                "mapping": mapping,
            }
    
    name: MetaOapg.properties.name
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["attributeType"]) -> MetaOapg.properties.attributeType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["label"]) -> MetaOapg.properties.label: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["contained"]) -> MetaOapg.properties.contained: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["field"]) -> MetaOapg.properties.field: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["array_field"]) -> MetaOapg.properties.array_field: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["collapsible"]) -> MetaOapg.properties.collapsible: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ui_recipe"]) -> MetaOapg.properties.ui_recipe: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mapping"]) -> MetaOapg.properties.mapping: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["name", "type", "attributeType", "label", "contained", "field", "array_field", "collapsible", "ui_recipe", "mapping", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union[MetaOapg.properties.type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["attributeType"]) -> typing.Union[MetaOapg.properties.attributeType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["label"]) -> typing.Union[MetaOapg.properties.label, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["contained"]) -> typing.Union[MetaOapg.properties.contained, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["field"]) -> typing.Union[MetaOapg.properties.field, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["array_field"]) -> typing.Union[MetaOapg.properties.array_field, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["collapsible"]) -> typing.Union[MetaOapg.properties.collapsible, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ui_recipe"]) -> typing.Union[MetaOapg.properties.ui_recipe, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mapping"]) -> typing.Union[MetaOapg.properties.mapping, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["name", "type", "attributeType", "label", "contained", "field", "array_field", "collapsible", "ui_recipe", "mapping", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        type: typing.Union[MetaOapg.properties.type, str, schemas.Unset] = schemas.unset,
        attributeType: typing.Union[MetaOapg.properties.attributeType, str, schemas.Unset] = schemas.unset,
        label: typing.Union[MetaOapg.properties.label, str, schemas.Unset] = schemas.unset,
        contained: typing.Union[MetaOapg.properties.contained, bool, schemas.Unset] = schemas.unset,
        field: typing.Union[MetaOapg.properties.field, str, schemas.Unset] = schemas.unset,
        array_field: typing.Union[MetaOapg.properties.array_field, str, schemas.Unset] = schemas.unset,
        collapsible: typing.Union[MetaOapg.properties.collapsible, bool, schemas.Unset] = schemas.unset,
        ui_recipe: typing.Union[MetaOapg.properties.ui_recipe, str, schemas.Unset] = schemas.unset,
        mapping: typing.Union[MetaOapg.properties.mapping, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'RecipeAttribute':
        return super().__new__(
            cls,
            *args,
            name=name,
            type=type,
            attributeType=attributeType,
            label=label,
            contained=contained,
            field=field,
            array_field=array_field,
            collapsible=collapsible,
            ui_recipe=ui_recipe,
            mapping=mapping,
            _configuration=_configuration,
            **kwargs,
        )
