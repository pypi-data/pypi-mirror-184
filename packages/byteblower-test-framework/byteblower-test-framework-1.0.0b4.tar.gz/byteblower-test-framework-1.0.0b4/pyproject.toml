[build-system]
# Using ``flit`` with ``setuptools_scm`` for automatic versioning support:
# See:
#   https://pypi.org/project/flit-scm/
#
# - Forcing flit version using new-style metadata with TOML >= 1.0 features
requires = ['flit_core >=3.4', 'flit-scm >=1.7.0']
build-backend = 'flit_scm:buildapi'

[project]
name = "byteblower-test-framework"

# NOTE: Not all build tools support dynamic version and/or description fields:
# - When using setuptools:
# version = "1.0.0a99"
# description = "Test Framework for the ByteBlower Traffic Generator"
# - When using other build tool (flit, PDM, ...):
dynamic = ['version', 'description']

# Build tool / pip should detect content-type automatically:
# readme = "README.rst"
# TODO - For now, until we have our source code and Docker images publicly available.
readme = "README.pypi.rst"
authors = [
    { name = 'ByteBlower Development Team', email = 'support.byteblower@excentis.com' },
]
maintainers = [
    { name = "Tom Ghyselinck", email = "tom.ghyselinck@excentis.com" },
]
requires-python = ">=3.7"
dependencies = [
    'byteblowerll >=2.13, ==2.19.2a114', # ByteBlower Lower Layer API
    'scapy >=2.2.0',                     # for frame creation
    'junit_xml >=1.8.0',                 # for reporting
    'pandas >=0.24.2',                   # for tables
    'python-highcharts >=0.4.2',         # for graphs
    'jinja2 >=2.10.1',                   # for templates
]
keywords = ["ByteBlower", "Test Framework"]
classifiers = [
    # See also https://pypi.org/classifiers/
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Information Technology",
    "Intended Audience :: Manufacturing",
    "Intended Audience :: Other Audience",
    "Intended Audience :: Science/Research",
    # 'Intended Audience :: System Administrators',
    "Intended Audience :: Telecommunications Industry",
    #
    # ! XXX - Also keep ``project.license`` in sync!
    #
    'License :: OSI Approved :: GNU Lesser General Public License v3 (LGPLv3)',
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.7",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Topic :: Software Development",
    "Topic :: Software Development :: Testing",
    "Topic :: Software Development :: Testing :: Traffic Generation",
    "Topic :: Software Development :: Libraries",
    "Topic :: Software Development :: Libraries :: Python Modules",
    # "Topic :: System :: Networking",
]

[project.license]
#
# ! XXX - Also keep ``project.classifiers`` ('License :: OSI Approved :: ') in sync!
#
file = "LICENSE"

[project.urls]
Homepage = "https://www.byteblower.com"
Documentation = "https://api.byteblower.com/test-framework"
"Support Portal" = "https://support.excentis.com"
# TODO: Once deployed on GitLab!
# "Source" = "https://gitlab.com/excentis/byteblower/test-framework/"
# "Bug Tracker" = "https://gitlab.com/excentis/byteblower/test-framework/-/issues"
# "Changelog" = "https://gitlab.com/excentis/byteblower/test-framework/-/path/to/changelog"
# TODO: Once examples deployed on GitLab!
# Examples = "https://gitlab.com/excentis/byteblower/test-framework-examples"

[project.optional-dependencies]
dev = [
    "yapf",
    "isort",
    "rstcheck[sphinx,toml]",
    "doc8",
    "Pygments",
    "pydocstyle[toml]",
    "toml ~=0.10.2",
]
test = [
    "pylint[spelling]",
    "pydocstyle[toml]",
    "rstcheck[sphinx,toml]",
    "pytest >=6.0",          # to support pyproject.toml
    "pytest-cov",
    "pytest-pydocstyle",
    "toml ~=0.10.2",
]
docs-dev = [
    "Sphinx >= 5.0",
    "sphinx-rtd-theme >=1.0",
    "importlib-metadata>=4.8.3; python_version<'3.8'", # 3.7 compatible; introduction importlib.metadata
]

# Enable version inference:
[tool.setuptools_scm]
write_to = "byteblower_test_framework/_version.py"

[tool.flit.module]
# NOTE: Required when building using flit backend
#
# hyphens in ``project.name`` do not seem to be replaced,
# although it should be according to https://flit.pypa.io/en/latest/pyproject_toml.html#new-style-metadata
name = "byteblower_test_framework"

# -- FLAK8 CONFIG ---------------------------------------------------------------------
# https://pypi.org/project/flake8/
[tool.flake8]
exclude = [".git", "build", "dist"]
# B = bugbear
# E = pycodestyle errors
# F = flake8 pyflakes
# W = pycodestyle warnings
# B9 = bugbear opinions
select = ["B", "E", "F", "W", "B9"]
per-file-ignores = [
    "**/__init__.py: F401", # __init__ modules export names
]

# -- PYLINT CONFIG --------------------------------------------------------------------
# https://pypi.org/project/pylint/
[tool.pylint]

[tool.pylint.format]
# Maximum number of characters on a single line.
max-line-length = 79

# Maximum number of lines in a module.
max-module-lines = 500

[tool.pylint."messages control"]
disable = [
    # See https://pylint.pycqa.org/en/latest/user_guide/checkers/features.html
    # Deactivated because incompatible with SonarQube
    "R0205", # useless-object-inheritance
]

[tool.pylint.reports]
# Set the output format. Available formats are text, parseable, colorized, json
# and msvs (visual studio). You can also give a reporter class, e.g.
# mypackage.mymodule.MyReporterClass.
output-format = "json:test-reports/pylint.json,parseable:test-reports/pylint.txt,text:test-reports/pylint.log,colorized"

# Activate the evaluation score.
score = true

# -- PYDOCSTYLE CONFIG ----------------------------------------------------------------
# https://pypi.org/project/pydocstyle/
[tool.pydocstyle]

# -- RSTCHECK CONFIG ------------------------------------------------------------------
# https://pypi.org/project/rstcheck/
[tool.rstcheck]

# -- PYTEST CONFIG --------------------------------------------------------------------
# https://pypi.org/project/pytest/
[tool.pytest.ini_options]
minversion = "6.0" # to support pyproject.toml
testpaths = ["tests"]
log_file = "test-reports/pytest.log"
log_file_level = "info"
required_plugins = ["pytest-cov", "pytest-pydocstyle"]
addopts = """
    --color=yes
    --code-highlight=yes
    --junit-xml="test-reports/junit.xml"
    --doctest-modules
    --cov=byteblower_test_framework
    --cov-report="xml:test-reports/coverage.xml"
    --cov-branch
    --pydocstyle
    -ra
    -q
    """

# -- COVERAGE CONFIG ------------------------------------------------------------------
# https://pypi.org/project/coverage/
[tool.coverage]

[tool.coverage.run]
# See also https://docs.sonarqube.org/latest/analysis/test-coverage/python-test-coverage/
relative_files = true
source = ["byteblower_test_framework/"]
branch = true
parallel = true
omit = ["tests/*"]

[tool.coverage.report]
show_missing = true

[tool.coverage.xml]

