# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import bastionlab_torch_pb2 as bastionlab__torch__pb2


class TorchServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SendDataset = channel.stream_unary(
                '/bastionlab_torch.TorchService/SendDataset',
                request_serializer=bastionlab__torch__pb2.Chunk.SerializeToString,
                response_deserializer=bastionlab__torch__pb2.Reference.FromString,
                )
        self.SendModel = channel.stream_unary(
                '/bastionlab_torch.TorchService/SendModel',
                request_serializer=bastionlab__torch__pb2.Chunk.SerializeToString,
                response_deserializer=bastionlab__torch__pb2.Reference.FromString,
                )
        self.FetchDataset = channel.unary_stream(
                '/bastionlab_torch.TorchService/FetchDataset',
                request_serializer=bastionlab__torch__pb2.Reference.SerializeToString,
                response_deserializer=bastionlab__torch__pb2.Chunk.FromString,
                )
        self.FetchModule = channel.unary_stream(
                '/bastionlab_torch.TorchService/FetchModule',
                request_serializer=bastionlab__torch__pb2.Reference.SerializeToString,
                response_deserializer=bastionlab__torch__pb2.Chunk.FromString,
                )
        self.DeleteDataset = channel.unary_unary(
                '/bastionlab_torch.TorchService/DeleteDataset',
                request_serializer=bastionlab__torch__pb2.Reference.SerializeToString,
                response_deserializer=bastionlab__torch__pb2.Empty.FromString,
                )
        self.DeleteModule = channel.unary_unary(
                '/bastionlab_torch.TorchService/DeleteModule',
                request_serializer=bastionlab__torch__pb2.Reference.SerializeToString,
                response_deserializer=bastionlab__torch__pb2.Empty.FromString,
                )
        self.AvailableModels = channel.unary_unary(
                '/bastionlab_torch.TorchService/AvailableModels',
                request_serializer=bastionlab__torch__pb2.Empty.SerializeToString,
                response_deserializer=bastionlab__torch__pb2.References.FromString,
                )
        self.AvailableDatasets = channel.unary_unary(
                '/bastionlab_torch.TorchService/AvailableDatasets',
                request_serializer=bastionlab__torch__pb2.Empty.SerializeToString,
                response_deserializer=bastionlab__torch__pb2.References.FromString,
                )
        self.AvailableDevices = channel.unary_unary(
                '/bastionlab_torch.TorchService/AvailableDevices',
                request_serializer=bastionlab__torch__pb2.Empty.SerializeToString,
                response_deserializer=bastionlab__torch__pb2.Devices.FromString,
                )
        self.AvailableOptimizers = channel.unary_unary(
                '/bastionlab_torch.TorchService/AvailableOptimizers',
                request_serializer=bastionlab__torch__pb2.Empty.SerializeToString,
                response_deserializer=bastionlab__torch__pb2.Optimizers.FromString,
                )
        self.Train = channel.unary_unary(
                '/bastionlab_torch.TorchService/Train',
                request_serializer=bastionlab__torch__pb2.TrainConfig.SerializeToString,
                response_deserializer=bastionlab__torch__pb2.Reference.FromString,
                )
        self.Test = channel.unary_unary(
                '/bastionlab_torch.TorchService/Test',
                request_serializer=bastionlab__torch__pb2.TestConfig.SerializeToString,
                response_deserializer=bastionlab__torch__pb2.Reference.FromString,
                )
        self.GetMetric = channel.unary_unary(
                '/bastionlab_torch.TorchService/GetMetric',
                request_serializer=bastionlab__torch__pb2.Reference.SerializeToString,
                response_deserializer=bastionlab__torch__pb2.Metric.FromString,
                )


class TorchServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def SendDataset(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendModel(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FetchDataset(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FetchModule(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteDataset(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteModule(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AvailableModels(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AvailableDatasets(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AvailableDevices(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AvailableOptimizers(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Train(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Test(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetMetric(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TorchServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SendDataset': grpc.stream_unary_rpc_method_handler(
                    servicer.SendDataset,
                    request_deserializer=bastionlab__torch__pb2.Chunk.FromString,
                    response_serializer=bastionlab__torch__pb2.Reference.SerializeToString,
            ),
            'SendModel': grpc.stream_unary_rpc_method_handler(
                    servicer.SendModel,
                    request_deserializer=bastionlab__torch__pb2.Chunk.FromString,
                    response_serializer=bastionlab__torch__pb2.Reference.SerializeToString,
            ),
            'FetchDataset': grpc.unary_stream_rpc_method_handler(
                    servicer.FetchDataset,
                    request_deserializer=bastionlab__torch__pb2.Reference.FromString,
                    response_serializer=bastionlab__torch__pb2.Chunk.SerializeToString,
            ),
            'FetchModule': grpc.unary_stream_rpc_method_handler(
                    servicer.FetchModule,
                    request_deserializer=bastionlab__torch__pb2.Reference.FromString,
                    response_serializer=bastionlab__torch__pb2.Chunk.SerializeToString,
            ),
            'DeleteDataset': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteDataset,
                    request_deserializer=bastionlab__torch__pb2.Reference.FromString,
                    response_serializer=bastionlab__torch__pb2.Empty.SerializeToString,
            ),
            'DeleteModule': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteModule,
                    request_deserializer=bastionlab__torch__pb2.Reference.FromString,
                    response_serializer=bastionlab__torch__pb2.Empty.SerializeToString,
            ),
            'AvailableModels': grpc.unary_unary_rpc_method_handler(
                    servicer.AvailableModels,
                    request_deserializer=bastionlab__torch__pb2.Empty.FromString,
                    response_serializer=bastionlab__torch__pb2.References.SerializeToString,
            ),
            'AvailableDatasets': grpc.unary_unary_rpc_method_handler(
                    servicer.AvailableDatasets,
                    request_deserializer=bastionlab__torch__pb2.Empty.FromString,
                    response_serializer=bastionlab__torch__pb2.References.SerializeToString,
            ),
            'AvailableDevices': grpc.unary_unary_rpc_method_handler(
                    servicer.AvailableDevices,
                    request_deserializer=bastionlab__torch__pb2.Empty.FromString,
                    response_serializer=bastionlab__torch__pb2.Devices.SerializeToString,
            ),
            'AvailableOptimizers': grpc.unary_unary_rpc_method_handler(
                    servicer.AvailableOptimizers,
                    request_deserializer=bastionlab__torch__pb2.Empty.FromString,
                    response_serializer=bastionlab__torch__pb2.Optimizers.SerializeToString,
            ),
            'Train': grpc.unary_unary_rpc_method_handler(
                    servicer.Train,
                    request_deserializer=bastionlab__torch__pb2.TrainConfig.FromString,
                    response_serializer=bastionlab__torch__pb2.Reference.SerializeToString,
            ),
            'Test': grpc.unary_unary_rpc_method_handler(
                    servicer.Test,
                    request_deserializer=bastionlab__torch__pb2.TestConfig.FromString,
                    response_serializer=bastionlab__torch__pb2.Reference.SerializeToString,
            ),
            'GetMetric': grpc.unary_unary_rpc_method_handler(
                    servicer.GetMetric,
                    request_deserializer=bastionlab__torch__pb2.Reference.FromString,
                    response_serializer=bastionlab__torch__pb2.Metric.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'bastionlab_torch.TorchService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class TorchService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def SendDataset(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/bastionlab_torch.TorchService/SendDataset',
            bastionlab__torch__pb2.Chunk.SerializeToString,
            bastionlab__torch__pb2.Reference.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SendModel(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/bastionlab_torch.TorchService/SendModel',
            bastionlab__torch__pb2.Chunk.SerializeToString,
            bastionlab__torch__pb2.Reference.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FetchDataset(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/bastionlab_torch.TorchService/FetchDataset',
            bastionlab__torch__pb2.Reference.SerializeToString,
            bastionlab__torch__pb2.Chunk.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FetchModule(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/bastionlab_torch.TorchService/FetchModule',
            bastionlab__torch__pb2.Reference.SerializeToString,
            bastionlab__torch__pb2.Chunk.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteDataset(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bastionlab_torch.TorchService/DeleteDataset',
            bastionlab__torch__pb2.Reference.SerializeToString,
            bastionlab__torch__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteModule(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bastionlab_torch.TorchService/DeleteModule',
            bastionlab__torch__pb2.Reference.SerializeToString,
            bastionlab__torch__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AvailableModels(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bastionlab_torch.TorchService/AvailableModels',
            bastionlab__torch__pb2.Empty.SerializeToString,
            bastionlab__torch__pb2.References.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AvailableDatasets(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bastionlab_torch.TorchService/AvailableDatasets',
            bastionlab__torch__pb2.Empty.SerializeToString,
            bastionlab__torch__pb2.References.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AvailableDevices(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bastionlab_torch.TorchService/AvailableDevices',
            bastionlab__torch__pb2.Empty.SerializeToString,
            bastionlab__torch__pb2.Devices.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AvailableOptimizers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bastionlab_torch.TorchService/AvailableOptimizers',
            bastionlab__torch__pb2.Empty.SerializeToString,
            bastionlab__torch__pb2.Optimizers.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Train(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bastionlab_torch.TorchService/Train',
            bastionlab__torch__pb2.TrainConfig.SerializeToString,
            bastionlab__torch__pb2.Reference.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Test(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bastionlab_torch.TorchService/Test',
            bastionlab__torch__pb2.TestConfig.SerializeToString,
            bastionlab__torch__pb2.Reference.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetMetric(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bastionlab_torch.TorchService/GetMetric',
            bastionlab__torch__pb2.Reference.SerializeToString,
            bastionlab__torch__pb2.Metric.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
