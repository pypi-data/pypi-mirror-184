// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: oneflow/core/framework/user_op_conf.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_oneflow_2fcore_2fframework_2fuser_5fop_5fconf_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_oneflow_2fcore_2fframework_2fuser_5fop_5fconf_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include "oneflow/core/framework/user_op_attr.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_oneflow_2fcore_2fframework_2fuser_5fop_5fconf_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_oneflow_2fcore_2fframework_2fuser_5fop_5fconf_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_oneflow_2fcore_2fframework_2fuser_5fop_5fconf_2eproto;
namespace oneflow {
class UserOpConf;
class UserOpConfDefaultTypeInternal;
extern UserOpConfDefaultTypeInternal _UserOpConf_default_instance_;
class UserOpConf_AttrEntry_DoNotUse;
class UserOpConf_AttrEntry_DoNotUseDefaultTypeInternal;
extern UserOpConf_AttrEntry_DoNotUseDefaultTypeInternal _UserOpConf_AttrEntry_DoNotUse_default_instance_;
class UserOpConf_InputEntry_DoNotUse;
class UserOpConf_InputEntry_DoNotUseDefaultTypeInternal;
extern UserOpConf_InputEntry_DoNotUseDefaultTypeInternal _UserOpConf_InputEntry_DoNotUse_default_instance_;
class UserOpConf_ListString;
class UserOpConf_ListStringDefaultTypeInternal;
extern UserOpConf_ListStringDefaultTypeInternal _UserOpConf_ListString_default_instance_;
class UserOpConf_OutputEntry_DoNotUse;
class UserOpConf_OutputEntry_DoNotUseDefaultTypeInternal;
extern UserOpConf_OutputEntry_DoNotUseDefaultTypeInternal _UserOpConf_OutputEntry_DoNotUse_default_instance_;
}  // namespace oneflow
PROTOBUF_NAMESPACE_OPEN
template<> ::oneflow::UserOpConf* Arena::CreateMaybeMessage<::oneflow::UserOpConf>(Arena*);
template<> ::oneflow::UserOpConf_AttrEntry_DoNotUse* Arena::CreateMaybeMessage<::oneflow::UserOpConf_AttrEntry_DoNotUse>(Arena*);
template<> ::oneflow::UserOpConf_InputEntry_DoNotUse* Arena::CreateMaybeMessage<::oneflow::UserOpConf_InputEntry_DoNotUse>(Arena*);
template<> ::oneflow::UserOpConf_ListString* Arena::CreateMaybeMessage<::oneflow::UserOpConf_ListString>(Arena*);
template<> ::oneflow::UserOpConf_OutputEntry_DoNotUse* Arena::CreateMaybeMessage<::oneflow::UserOpConf_OutputEntry_DoNotUse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace oneflow {

// ===================================================================

class UserOpConf_ListString :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:oneflow.UserOpConf.ListString) */ {
 public:
  UserOpConf_ListString();
  virtual ~UserOpConf_ListString();

  UserOpConf_ListString(const UserOpConf_ListString& from);
  UserOpConf_ListString(UserOpConf_ListString&& from) noexcept
    : UserOpConf_ListString() {
    *this = ::std::move(from);
  }

  inline UserOpConf_ListString& operator=(const UserOpConf_ListString& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserOpConf_ListString& operator=(UserOpConf_ListString&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UserOpConf_ListString& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserOpConf_ListString* internal_default_instance() {
    return reinterpret_cast<const UserOpConf_ListString*>(
               &_UserOpConf_ListString_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(UserOpConf_ListString& a, UserOpConf_ListString& b) {
    a.Swap(&b);
  }
  inline void Swap(UserOpConf_ListString* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserOpConf_ListString* New() const final {
    return CreateMaybeMessage<UserOpConf_ListString>(nullptr);
  }

  UserOpConf_ListString* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserOpConf_ListString>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserOpConf_ListString& from);
  void MergeFrom(const UserOpConf_ListString& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserOpConf_ListString* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "oneflow.UserOpConf.ListString";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_oneflow_2fcore_2fframework_2fuser_5fop_5fconf_2eproto);
    return ::descriptor_table_oneflow_2fcore_2fframework_2fuser_5fop_5fconf_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSFieldNumber = 1,
  };
  // repeated string s = 1;
  int s_size() const;
  void clear_s();
  const std::string& s(int index) const;
  std::string* mutable_s(int index);
  void set_s(int index, const std::string& value);
  void set_s(int index, std::string&& value);
  void set_s(int index, const char* value);
  void set_s(int index, const char* value, size_t size);
  std::string* add_s();
  void add_s(const std::string& value);
  void add_s(std::string&& value);
  void add_s(const char* value);
  void add_s(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& s() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_s();

  // @@protoc_insertion_point(class_scope:oneflow.UserOpConf.ListString)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> s_;
  friend struct ::TableStruct_oneflow_2fcore_2fframework_2fuser_5fop_5fconf_2eproto;
};
// -------------------------------------------------------------------

class UserOpConf_InputEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<UserOpConf_InputEntry_DoNotUse, 
    std::string, ::oneflow::UserOpConf_ListString,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<UserOpConf_InputEntry_DoNotUse, 
    std::string, ::oneflow::UserOpConf_ListString,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  UserOpConf_InputEntry_DoNotUse();
  UserOpConf_InputEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const UserOpConf_InputEntry_DoNotUse& other);
  static const UserOpConf_InputEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const UserOpConf_InputEntry_DoNotUse*>(&_UserOpConf_InputEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
#ifndef NDEBUG
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
       s->data(), s->size(), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "oneflow.UserOpConf.InputEntry.key");
#endif
    return true;
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_oneflow_2fcore_2fframework_2fuser_5fop_5fconf_2eproto);
    return ::descriptor_table_oneflow_2fcore_2fframework_2fuser_5fop_5fconf_2eproto.file_level_metadata[1];
  }

  public:
};

// -------------------------------------------------------------------

class UserOpConf_OutputEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<UserOpConf_OutputEntry_DoNotUse, 
    std::string, ::oneflow::UserOpConf_ListString,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<UserOpConf_OutputEntry_DoNotUse, 
    std::string, ::oneflow::UserOpConf_ListString,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  UserOpConf_OutputEntry_DoNotUse();
  UserOpConf_OutputEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const UserOpConf_OutputEntry_DoNotUse& other);
  static const UserOpConf_OutputEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const UserOpConf_OutputEntry_DoNotUse*>(&_UserOpConf_OutputEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
#ifndef NDEBUG
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
       s->data(), s->size(), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "oneflow.UserOpConf.OutputEntry.key");
#endif
    return true;
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_oneflow_2fcore_2fframework_2fuser_5fop_5fconf_2eproto);
    return ::descriptor_table_oneflow_2fcore_2fframework_2fuser_5fop_5fconf_2eproto.file_level_metadata[2];
  }

  public:
};

// -------------------------------------------------------------------

class UserOpConf_AttrEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<UserOpConf_AttrEntry_DoNotUse, 
    std::string, ::oneflow::AttrValue,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<UserOpConf_AttrEntry_DoNotUse, 
    std::string, ::oneflow::AttrValue,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  UserOpConf_AttrEntry_DoNotUse();
  UserOpConf_AttrEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const UserOpConf_AttrEntry_DoNotUse& other);
  static const UserOpConf_AttrEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const UserOpConf_AttrEntry_DoNotUse*>(&_UserOpConf_AttrEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
#ifndef NDEBUG
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
       s->data(), s->size(), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "oneflow.UserOpConf.AttrEntry.key");
#endif
    return true;
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_oneflow_2fcore_2fframework_2fuser_5fop_5fconf_2eproto);
    return ::descriptor_table_oneflow_2fcore_2fframework_2fuser_5fop_5fconf_2eproto.file_level_metadata[3];
  }

  public:
};

// -------------------------------------------------------------------

class UserOpConf :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:oneflow.UserOpConf) */ {
 public:
  UserOpConf();
  virtual ~UserOpConf();

  UserOpConf(const UserOpConf& from);
  UserOpConf(UserOpConf&& from) noexcept
    : UserOpConf() {
    *this = ::std::move(from);
  }

  inline UserOpConf& operator=(const UserOpConf& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserOpConf& operator=(UserOpConf&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UserOpConf& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserOpConf* internal_default_instance() {
    return reinterpret_cast<const UserOpConf*>(
               &_UserOpConf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(UserOpConf& a, UserOpConf& b) {
    a.Swap(&b);
  }
  inline void Swap(UserOpConf* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserOpConf* New() const final {
    return CreateMaybeMessage<UserOpConf>(nullptr);
  }

  UserOpConf* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserOpConf>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserOpConf& from);
  void MergeFrom(const UserOpConf& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserOpConf* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "oneflow.UserOpConf";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_oneflow_2fcore_2fframework_2fuser_5fop_5fconf_2eproto);
    return ::descriptor_table_oneflow_2fcore_2fframework_2fuser_5fop_5fconf_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef UserOpConf_ListString ListString;

  // accessors -------------------------------------------------------

  enum : int {
    kInputFieldNumber = 2,
    kOutputFieldNumber = 3,
    kAttrFieldNumber = 4,
    kInputOrderFieldNumber = 5,
    kOutputOrderFieldNumber = 6,
    kOpTypeNameFieldNumber = 1,
  };
  // map<string, .oneflow.UserOpConf.ListString> input = 2;
  int input_size() const;
  void clear_input();
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::oneflow::UserOpConf_ListString >&
      input() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::oneflow::UserOpConf_ListString >*
      mutable_input();

  // map<string, .oneflow.UserOpConf.ListString> output = 3;
  int output_size() const;
  void clear_output();
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::oneflow::UserOpConf_ListString >&
      output() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::oneflow::UserOpConf_ListString >*
      mutable_output();

  // map<string, .oneflow.AttrValue> attr = 4;
  int attr_size() const;
  void clear_attr();
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::oneflow::AttrValue >&
      attr() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::oneflow::AttrValue >*
      mutable_attr();

  // repeated string input_order = 5;
  int input_order_size() const;
  void clear_input_order();
  const std::string& input_order(int index) const;
  std::string* mutable_input_order(int index);
  void set_input_order(int index, const std::string& value);
  void set_input_order(int index, std::string&& value);
  void set_input_order(int index, const char* value);
  void set_input_order(int index, const char* value, size_t size);
  std::string* add_input_order();
  void add_input_order(const std::string& value);
  void add_input_order(std::string&& value);
  void add_input_order(const char* value);
  void add_input_order(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& input_order() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_input_order();

  // repeated string output_order = 6;
  int output_order_size() const;
  void clear_output_order();
  const std::string& output_order(int index) const;
  std::string* mutable_output_order(int index);
  void set_output_order(int index, const std::string& value);
  void set_output_order(int index, std::string&& value);
  void set_output_order(int index, const char* value);
  void set_output_order(int index, const char* value, size_t size);
  std::string* add_output_order();
  void add_output_order(const std::string& value);
  void add_output_order(std::string&& value);
  void add_output_order(const char* value);
  void add_output_order(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& output_order() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_output_order();

  // required string op_type_name = 1;
  bool has_op_type_name() const;
  void clear_op_type_name();
  const std::string& op_type_name() const;
  void set_op_type_name(const std::string& value);
  void set_op_type_name(std::string&& value);
  void set_op_type_name(const char* value);
  void set_op_type_name(const char* value, size_t size);
  std::string* mutable_op_type_name();
  std::string* release_op_type_name();
  void set_allocated_op_type_name(std::string* op_type_name);

  // @@protoc_insertion_point(class_scope:oneflow.UserOpConf)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      UserOpConf_InputEntry_DoNotUse,
      std::string, ::oneflow::UserOpConf_ListString,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > input_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      UserOpConf_OutputEntry_DoNotUse,
      std::string, ::oneflow::UserOpConf_ListString,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > output_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      UserOpConf_AttrEntry_DoNotUse,
      std::string, ::oneflow::AttrValue,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > attr_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> input_order_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> output_order_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr op_type_name_;
  friend struct ::TableStruct_oneflow_2fcore_2fframework_2fuser_5fop_5fconf_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// UserOpConf_ListString

// repeated string s = 1;
inline int UserOpConf_ListString::s_size() const {
  return s_.size();
}
inline void UserOpConf_ListString::clear_s() {
  s_.Clear();
}
inline const std::string& UserOpConf_ListString::s(int index) const {
  // @@protoc_insertion_point(field_get:oneflow.UserOpConf.ListString.s)
  return s_.Get(index);
}
inline std::string* UserOpConf_ListString::mutable_s(int index) {
  // @@protoc_insertion_point(field_mutable:oneflow.UserOpConf.ListString.s)
  return s_.Mutable(index);
}
inline void UserOpConf_ListString::set_s(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:oneflow.UserOpConf.ListString.s)
  s_.Mutable(index)->assign(value);
}
inline void UserOpConf_ListString::set_s(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:oneflow.UserOpConf.ListString.s)
  s_.Mutable(index)->assign(std::move(value));
}
inline void UserOpConf_ListString::set_s(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  s_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:oneflow.UserOpConf.ListString.s)
}
inline void UserOpConf_ListString::set_s(int index, const char* value, size_t size) {
  s_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:oneflow.UserOpConf.ListString.s)
}
inline std::string* UserOpConf_ListString::add_s() {
  // @@protoc_insertion_point(field_add_mutable:oneflow.UserOpConf.ListString.s)
  return s_.Add();
}
inline void UserOpConf_ListString::add_s(const std::string& value) {
  s_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:oneflow.UserOpConf.ListString.s)
}
inline void UserOpConf_ListString::add_s(std::string&& value) {
  s_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:oneflow.UserOpConf.ListString.s)
}
inline void UserOpConf_ListString::add_s(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  s_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:oneflow.UserOpConf.ListString.s)
}
inline void UserOpConf_ListString::add_s(const char* value, size_t size) {
  s_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:oneflow.UserOpConf.ListString.s)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
UserOpConf_ListString::s() const {
  // @@protoc_insertion_point(field_list:oneflow.UserOpConf.ListString.s)
  return s_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
UserOpConf_ListString::mutable_s() {
  // @@protoc_insertion_point(field_mutable_list:oneflow.UserOpConf.ListString.s)
  return &s_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// UserOpConf

// required string op_type_name = 1;
inline bool UserOpConf::has_op_type_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserOpConf::clear_op_type_name() {
  op_type_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& UserOpConf::op_type_name() const {
  // @@protoc_insertion_point(field_get:oneflow.UserOpConf.op_type_name)
  return op_type_name_.GetNoArena();
}
inline void UserOpConf::set_op_type_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  op_type_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:oneflow.UserOpConf.op_type_name)
}
inline void UserOpConf::set_op_type_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  op_type_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:oneflow.UserOpConf.op_type_name)
}
inline void UserOpConf::set_op_type_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  op_type_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:oneflow.UserOpConf.op_type_name)
}
inline void UserOpConf::set_op_type_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  op_type_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:oneflow.UserOpConf.op_type_name)
}
inline std::string* UserOpConf::mutable_op_type_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:oneflow.UserOpConf.op_type_name)
  return op_type_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UserOpConf::release_op_type_name() {
  // @@protoc_insertion_point(field_release:oneflow.UserOpConf.op_type_name)
  if (!has_op_type_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return op_type_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UserOpConf::set_allocated_op_type_name(std::string* op_type_name) {
  if (op_type_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  op_type_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), op_type_name);
  // @@protoc_insertion_point(field_set_allocated:oneflow.UserOpConf.op_type_name)
}

// map<string, .oneflow.UserOpConf.ListString> input = 2;
inline int UserOpConf::input_size() const {
  return input_.size();
}
inline void UserOpConf::clear_input() {
  input_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::oneflow::UserOpConf_ListString >&
UserOpConf::input() const {
  // @@protoc_insertion_point(field_map:oneflow.UserOpConf.input)
  return input_.GetMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::oneflow::UserOpConf_ListString >*
UserOpConf::mutable_input() {
  // @@protoc_insertion_point(field_mutable_map:oneflow.UserOpConf.input)
  return input_.MutableMap();
}

// map<string, .oneflow.UserOpConf.ListString> output = 3;
inline int UserOpConf::output_size() const {
  return output_.size();
}
inline void UserOpConf::clear_output() {
  output_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::oneflow::UserOpConf_ListString >&
UserOpConf::output() const {
  // @@protoc_insertion_point(field_map:oneflow.UserOpConf.output)
  return output_.GetMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::oneflow::UserOpConf_ListString >*
UserOpConf::mutable_output() {
  // @@protoc_insertion_point(field_mutable_map:oneflow.UserOpConf.output)
  return output_.MutableMap();
}

// map<string, .oneflow.AttrValue> attr = 4;
inline int UserOpConf::attr_size() const {
  return attr_.size();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::oneflow::AttrValue >&
UserOpConf::attr() const {
  // @@protoc_insertion_point(field_map:oneflow.UserOpConf.attr)
  return attr_.GetMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::oneflow::AttrValue >*
UserOpConf::mutable_attr() {
  // @@protoc_insertion_point(field_mutable_map:oneflow.UserOpConf.attr)
  return attr_.MutableMap();
}

// repeated string input_order = 5;
inline int UserOpConf::input_order_size() const {
  return input_order_.size();
}
inline void UserOpConf::clear_input_order() {
  input_order_.Clear();
}
inline const std::string& UserOpConf::input_order(int index) const {
  // @@protoc_insertion_point(field_get:oneflow.UserOpConf.input_order)
  return input_order_.Get(index);
}
inline std::string* UserOpConf::mutable_input_order(int index) {
  // @@protoc_insertion_point(field_mutable:oneflow.UserOpConf.input_order)
  return input_order_.Mutable(index);
}
inline void UserOpConf::set_input_order(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:oneflow.UserOpConf.input_order)
  input_order_.Mutable(index)->assign(value);
}
inline void UserOpConf::set_input_order(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:oneflow.UserOpConf.input_order)
  input_order_.Mutable(index)->assign(std::move(value));
}
inline void UserOpConf::set_input_order(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  input_order_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:oneflow.UserOpConf.input_order)
}
inline void UserOpConf::set_input_order(int index, const char* value, size_t size) {
  input_order_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:oneflow.UserOpConf.input_order)
}
inline std::string* UserOpConf::add_input_order() {
  // @@protoc_insertion_point(field_add_mutable:oneflow.UserOpConf.input_order)
  return input_order_.Add();
}
inline void UserOpConf::add_input_order(const std::string& value) {
  input_order_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:oneflow.UserOpConf.input_order)
}
inline void UserOpConf::add_input_order(std::string&& value) {
  input_order_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:oneflow.UserOpConf.input_order)
}
inline void UserOpConf::add_input_order(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  input_order_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:oneflow.UserOpConf.input_order)
}
inline void UserOpConf::add_input_order(const char* value, size_t size) {
  input_order_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:oneflow.UserOpConf.input_order)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
UserOpConf::input_order() const {
  // @@protoc_insertion_point(field_list:oneflow.UserOpConf.input_order)
  return input_order_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
UserOpConf::mutable_input_order() {
  // @@protoc_insertion_point(field_mutable_list:oneflow.UserOpConf.input_order)
  return &input_order_;
}

// repeated string output_order = 6;
inline int UserOpConf::output_order_size() const {
  return output_order_.size();
}
inline void UserOpConf::clear_output_order() {
  output_order_.Clear();
}
inline const std::string& UserOpConf::output_order(int index) const {
  // @@protoc_insertion_point(field_get:oneflow.UserOpConf.output_order)
  return output_order_.Get(index);
}
inline std::string* UserOpConf::mutable_output_order(int index) {
  // @@protoc_insertion_point(field_mutable:oneflow.UserOpConf.output_order)
  return output_order_.Mutable(index);
}
inline void UserOpConf::set_output_order(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:oneflow.UserOpConf.output_order)
  output_order_.Mutable(index)->assign(value);
}
inline void UserOpConf::set_output_order(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:oneflow.UserOpConf.output_order)
  output_order_.Mutable(index)->assign(std::move(value));
}
inline void UserOpConf::set_output_order(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  output_order_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:oneflow.UserOpConf.output_order)
}
inline void UserOpConf::set_output_order(int index, const char* value, size_t size) {
  output_order_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:oneflow.UserOpConf.output_order)
}
inline std::string* UserOpConf::add_output_order() {
  // @@protoc_insertion_point(field_add_mutable:oneflow.UserOpConf.output_order)
  return output_order_.Add();
}
inline void UserOpConf::add_output_order(const std::string& value) {
  output_order_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:oneflow.UserOpConf.output_order)
}
inline void UserOpConf::add_output_order(std::string&& value) {
  output_order_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:oneflow.UserOpConf.output_order)
}
inline void UserOpConf::add_output_order(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  output_order_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:oneflow.UserOpConf.output_order)
}
inline void UserOpConf::add_output_order(const char* value, size_t size) {
  output_order_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:oneflow.UserOpConf.output_order)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
UserOpConf::output_order() const {
  // @@protoc_insertion_point(field_list:oneflow.UserOpConf.output_order)
  return output_order_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
UserOpConf::mutable_output_order() {
  // @@protoc_insertion_point(field_mutable_list:oneflow.UserOpConf.output_order)
  return &output_order_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace oneflow

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_oneflow_2fcore_2fframework_2fuser_5fop_5fconf_2eproto
