// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: oneflow/core/summary/projector.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_oneflow_2fcore_2fsummary_2fprojector_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_oneflow_2fcore_2fsummary_2fprojector_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_oneflow_2fcore_2fsummary_2fprojector_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_oneflow_2fcore_2fsummary_2fprojector_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_oneflow_2fcore_2fsummary_2fprojector_2eproto;
namespace oneflow {
namespace summary {
class MetaData;
class MetaDataDefaultTypeInternal;
extern MetaDataDefaultTypeInternal _MetaData_default_instance_;
class Projector;
class ProjectorDefaultTypeInternal;
extern ProjectorDefaultTypeInternal _Projector_default_instance_;
class Sample;
class SampleDefaultTypeInternal;
extern SampleDefaultTypeInternal _Sample_default_instance_;
class SummaryProjector;
class SummaryProjectorDefaultTypeInternal;
extern SummaryProjectorDefaultTypeInternal _SummaryProjector_default_instance_;
class Tensor;
class TensorDefaultTypeInternal;
extern TensorDefaultTypeInternal _Tensor_default_instance_;
class Tensor_TensorShape;
class Tensor_TensorShapeDefaultTypeInternal;
extern Tensor_TensorShapeDefaultTypeInternal _Tensor_TensorShape_default_instance_;
class Tensor_TensorShape_Dim;
class Tensor_TensorShape_DimDefaultTypeInternal;
extern Tensor_TensorShape_DimDefaultTypeInternal _Tensor_TensorShape_Dim_default_instance_;
}  // namespace summary
}  // namespace oneflow
PROTOBUF_NAMESPACE_OPEN
template<> ::oneflow::summary::MetaData* Arena::CreateMaybeMessage<::oneflow::summary::MetaData>(Arena*);
template<> ::oneflow::summary::Projector* Arena::CreateMaybeMessage<::oneflow::summary::Projector>(Arena*);
template<> ::oneflow::summary::Sample* Arena::CreateMaybeMessage<::oneflow::summary::Sample>(Arena*);
template<> ::oneflow::summary::SummaryProjector* Arena::CreateMaybeMessage<::oneflow::summary::SummaryProjector>(Arena*);
template<> ::oneflow::summary::Tensor* Arena::CreateMaybeMessage<::oneflow::summary::Tensor>(Arena*);
template<> ::oneflow::summary::Tensor_TensorShape* Arena::CreateMaybeMessage<::oneflow::summary::Tensor_TensorShape>(Arena*);
template<> ::oneflow::summary::Tensor_TensorShape_Dim* Arena::CreateMaybeMessage<::oneflow::summary::Tensor_TensorShape_Dim>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace oneflow {
namespace summary {

enum MetaData_ProjectorType : int {
  MetaData_ProjectorType_EMBEDDING = 0,
  MetaData_ProjectorType_EXCEPTION = 1
};
bool MetaData_ProjectorType_IsValid(int value);
constexpr MetaData_ProjectorType MetaData_ProjectorType_ProjectorType_MIN = MetaData_ProjectorType_EMBEDDING;
constexpr MetaData_ProjectorType MetaData_ProjectorType_ProjectorType_MAX = MetaData_ProjectorType_EXCEPTION;
constexpr int MetaData_ProjectorType_ProjectorType_ARRAYSIZE = MetaData_ProjectorType_ProjectorType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MetaData_ProjectorType_descriptor();
template<typename T>
inline const std::string& MetaData_ProjectorType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MetaData_ProjectorType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MetaData_ProjectorType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MetaData_ProjectorType_descriptor(), enum_t_value);
}
inline bool MetaData_ProjectorType_Parse(
    const std::string& name, MetaData_ProjectorType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MetaData_ProjectorType>(
    MetaData_ProjectorType_descriptor(), name, value);
}
enum Sample_SampleType : int {
  Sample_SampleType_IMAGE = 0,
  Sample_SampleType_AUDIO = 1,
  Sample_SampleType_TEXT = 2
};
bool Sample_SampleType_IsValid(int value);
constexpr Sample_SampleType Sample_SampleType_SampleType_MIN = Sample_SampleType_IMAGE;
constexpr Sample_SampleType Sample_SampleType_SampleType_MAX = Sample_SampleType_TEXT;
constexpr int Sample_SampleType_SampleType_ARRAYSIZE = Sample_SampleType_SampleType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Sample_SampleType_descriptor();
template<typename T>
inline const std::string& Sample_SampleType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Sample_SampleType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Sample_SampleType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Sample_SampleType_descriptor(), enum_t_value);
}
inline bool Sample_SampleType_Parse(
    const std::string& name, Sample_SampleType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Sample_SampleType>(
    Sample_SampleType_descriptor(), name, value);
}
// ===================================================================

class MetaData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:oneflow.summary.MetaData) */ {
 public:
  MetaData();
  virtual ~MetaData();

  MetaData(const MetaData& from);
  MetaData(MetaData&& from) noexcept
    : MetaData() {
    *this = ::std::move(from);
  }

  inline MetaData& operator=(const MetaData& from) {
    CopyFrom(from);
    return *this;
  }
  inline MetaData& operator=(MetaData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MetaData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MetaData* internal_default_instance() {
    return reinterpret_cast<const MetaData*>(
               &_MetaData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MetaData& a, MetaData& b) {
    a.Swap(&b);
  }
  inline void Swap(MetaData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MetaData* New() const final {
    return CreateMaybeMessage<MetaData>(nullptr);
  }

  MetaData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MetaData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MetaData& from);
  void MergeFrom(const MetaData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MetaData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "oneflow.summary.MetaData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_oneflow_2fcore_2fsummary_2fprojector_2eproto);
    return ::descriptor_table_oneflow_2fcore_2fsummary_2fprojector_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef MetaData_ProjectorType ProjectorType;
  static constexpr ProjectorType EMBEDDING =
    MetaData_ProjectorType_EMBEDDING;
  static constexpr ProjectorType EXCEPTION =
    MetaData_ProjectorType_EXCEPTION;
  static inline bool ProjectorType_IsValid(int value) {
    return MetaData_ProjectorType_IsValid(value);
  }
  static constexpr ProjectorType ProjectorType_MIN =
    MetaData_ProjectorType_ProjectorType_MIN;
  static constexpr ProjectorType ProjectorType_MAX =
    MetaData_ProjectorType_ProjectorType_MAX;
  static constexpr int ProjectorType_ARRAYSIZE =
    MetaData_ProjectorType_ProjectorType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ProjectorType_descriptor() {
    return MetaData_ProjectorType_descriptor();
  }
  template<typename T>
  static inline const std::string& ProjectorType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ProjectorType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ProjectorType_Name.");
    return MetaData_ProjectorType_Name(enum_t_value);
  }
  static inline bool ProjectorType_Parse(const std::string& name,
      ProjectorType* value) {
    return MetaData_ProjectorType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kContentFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // optional string content = 2;
  bool has_content() const;
  void clear_content();
  const std::string& content() const;
  void set_content(const std::string& value);
  void set_content(std::string&& value);
  void set_content(const char* value);
  void set_content(const char* value, size_t size);
  std::string* mutable_content();
  std::string* release_content();
  void set_allocated_content(std::string* content);

  // required .oneflow.summary.MetaData.ProjectorType type = 1;
  bool has_type() const;
  void clear_type();
  ::oneflow::summary::MetaData_ProjectorType type() const;
  void set_type(::oneflow::summary::MetaData_ProjectorType value);

  // @@protoc_insertion_point(class_scope:oneflow.summary.MetaData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
  int type_;
  friend struct ::TableStruct_oneflow_2fcore_2fsummary_2fprojector_2eproto;
};
// -------------------------------------------------------------------

class Tensor_TensorShape_Dim :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:oneflow.summary.Tensor.TensorShape.Dim) */ {
 public:
  Tensor_TensorShape_Dim();
  virtual ~Tensor_TensorShape_Dim();

  Tensor_TensorShape_Dim(const Tensor_TensorShape_Dim& from);
  Tensor_TensorShape_Dim(Tensor_TensorShape_Dim&& from) noexcept
    : Tensor_TensorShape_Dim() {
    *this = ::std::move(from);
  }

  inline Tensor_TensorShape_Dim& operator=(const Tensor_TensorShape_Dim& from) {
    CopyFrom(from);
    return *this;
  }
  inline Tensor_TensorShape_Dim& operator=(Tensor_TensorShape_Dim&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Tensor_TensorShape_Dim& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Tensor_TensorShape_Dim* internal_default_instance() {
    return reinterpret_cast<const Tensor_TensorShape_Dim*>(
               &_Tensor_TensorShape_Dim_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Tensor_TensorShape_Dim& a, Tensor_TensorShape_Dim& b) {
    a.Swap(&b);
  }
  inline void Swap(Tensor_TensorShape_Dim* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Tensor_TensorShape_Dim* New() const final {
    return CreateMaybeMessage<Tensor_TensorShape_Dim>(nullptr);
  }

  Tensor_TensorShape_Dim* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Tensor_TensorShape_Dim>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Tensor_TensorShape_Dim& from);
  void MergeFrom(const Tensor_TensorShape_Dim& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Tensor_TensorShape_Dim* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "oneflow.summary.Tensor.TensorShape.Dim";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_oneflow_2fcore_2fsummary_2fprojector_2eproto);
    return ::descriptor_table_oneflow_2fcore_2fsummary_2fprojector_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kSizeFieldNumber = 1,
  };
  // optional string name = 2;
  bool has_name() const;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // required int64 size = 1;
  bool has_size() const;
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::int64 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:oneflow.summary.Tensor.TensorShape.Dim)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int64 size_;
  friend struct ::TableStruct_oneflow_2fcore_2fsummary_2fprojector_2eproto;
};
// -------------------------------------------------------------------

class Tensor_TensorShape :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:oneflow.summary.Tensor.TensorShape) */ {
 public:
  Tensor_TensorShape();
  virtual ~Tensor_TensorShape();

  Tensor_TensorShape(const Tensor_TensorShape& from);
  Tensor_TensorShape(Tensor_TensorShape&& from) noexcept
    : Tensor_TensorShape() {
    *this = ::std::move(from);
  }

  inline Tensor_TensorShape& operator=(const Tensor_TensorShape& from) {
    CopyFrom(from);
    return *this;
  }
  inline Tensor_TensorShape& operator=(Tensor_TensorShape&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Tensor_TensorShape& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Tensor_TensorShape* internal_default_instance() {
    return reinterpret_cast<const Tensor_TensorShape*>(
               &_Tensor_TensorShape_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Tensor_TensorShape& a, Tensor_TensorShape& b) {
    a.Swap(&b);
  }
  inline void Swap(Tensor_TensorShape* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Tensor_TensorShape* New() const final {
    return CreateMaybeMessage<Tensor_TensorShape>(nullptr);
  }

  Tensor_TensorShape* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Tensor_TensorShape>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Tensor_TensorShape& from);
  void MergeFrom(const Tensor_TensorShape& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Tensor_TensorShape* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "oneflow.summary.Tensor.TensorShape";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_oneflow_2fcore_2fsummary_2fprojector_2eproto);
    return ::descriptor_table_oneflow_2fcore_2fsummary_2fprojector_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Tensor_TensorShape_Dim Dim;

  // accessors -------------------------------------------------------

  enum : int {
    kDimFieldNumber = 1,
  };
  // repeated .oneflow.summary.Tensor.TensorShape.Dim dim = 1;
  int dim_size() const;
  void clear_dim();
  ::oneflow::summary::Tensor_TensorShape_Dim* mutable_dim(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oneflow::summary::Tensor_TensorShape_Dim >*
      mutable_dim();
  const ::oneflow::summary::Tensor_TensorShape_Dim& dim(int index) const;
  ::oneflow::summary::Tensor_TensorShape_Dim* add_dim();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oneflow::summary::Tensor_TensorShape_Dim >&
      dim() const;

  // @@protoc_insertion_point(class_scope:oneflow.summary.Tensor.TensorShape)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oneflow::summary::Tensor_TensorShape_Dim > dim_;
  friend struct ::TableStruct_oneflow_2fcore_2fsummary_2fprojector_2eproto;
};
// -------------------------------------------------------------------

class Tensor :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:oneflow.summary.Tensor) */ {
 public:
  Tensor();
  virtual ~Tensor();

  Tensor(const Tensor& from);
  Tensor(Tensor&& from) noexcept
    : Tensor() {
    *this = ::std::move(from);
  }

  inline Tensor& operator=(const Tensor& from) {
    CopyFrom(from);
    return *this;
  }
  inline Tensor& operator=(Tensor&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Tensor& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Tensor* internal_default_instance() {
    return reinterpret_cast<const Tensor*>(
               &_Tensor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Tensor& a, Tensor& b) {
    a.Swap(&b);
  }
  inline void Swap(Tensor* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Tensor* New() const final {
    return CreateMaybeMessage<Tensor>(nullptr);
  }

  Tensor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Tensor>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Tensor& from);
  void MergeFrom(const Tensor& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Tensor* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "oneflow.summary.Tensor";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_oneflow_2fcore_2fsummary_2fprojector_2eproto);
    return ::descriptor_table_oneflow_2fcore_2fsummary_2fprojector_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Tensor_TensorShape TensorShape;

  // accessors -------------------------------------------------------

  enum : int {
    kDtypeFieldNumber = 1,
    kContentFieldNumber = 3,
    kShapeFieldNumber = 2,
  };
  // required string dtype = 1;
  bool has_dtype() const;
  void clear_dtype();
  const std::string& dtype() const;
  void set_dtype(const std::string& value);
  void set_dtype(std::string&& value);
  void set_dtype(const char* value);
  void set_dtype(const char* value, size_t size);
  std::string* mutable_dtype();
  std::string* release_dtype();
  void set_allocated_dtype(std::string* dtype);

  // optional bytes content = 3;
  bool has_content() const;
  void clear_content();
  const std::string& content() const;
  void set_content(const std::string& value);
  void set_content(std::string&& value);
  void set_content(const char* value);
  void set_content(const void* value, size_t size);
  std::string* mutable_content();
  std::string* release_content();
  void set_allocated_content(std::string* content);

  // required .oneflow.summary.Tensor.TensorShape shape = 2;
  bool has_shape() const;
  void clear_shape();
  const ::oneflow::summary::Tensor_TensorShape& shape() const;
  ::oneflow::summary::Tensor_TensorShape* release_shape();
  ::oneflow::summary::Tensor_TensorShape* mutable_shape();
  void set_allocated_shape(::oneflow::summary::Tensor_TensorShape* shape);

  // @@protoc_insertion_point(class_scope:oneflow.summary.Tensor)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dtype_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
  ::oneflow::summary::Tensor_TensorShape* shape_;
  friend struct ::TableStruct_oneflow_2fcore_2fsummary_2fprojector_2eproto;
};
// -------------------------------------------------------------------

class Sample :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:oneflow.summary.Sample) */ {
 public:
  Sample();
  virtual ~Sample();

  Sample(const Sample& from);
  Sample(Sample&& from) noexcept
    : Sample() {
    *this = ::std::move(from);
  }

  inline Sample& operator=(const Sample& from) {
    CopyFrom(from);
    return *this;
  }
  inline Sample& operator=(Sample&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Sample& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Sample* internal_default_instance() {
    return reinterpret_cast<const Sample*>(
               &_Sample_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Sample& a, Sample& b) {
    a.Swap(&b);
  }
  inline void Swap(Sample* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Sample* New() const final {
    return CreateMaybeMessage<Sample>(nullptr);
  }

  Sample* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Sample>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Sample& from);
  void MergeFrom(const Sample& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Sample* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "oneflow.summary.Sample";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_oneflow_2fcore_2fsummary_2fprojector_2eproto);
    return ::descriptor_table_oneflow_2fcore_2fsummary_2fprojector_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Sample_SampleType SampleType;
  static constexpr SampleType IMAGE =
    Sample_SampleType_IMAGE;
  static constexpr SampleType AUDIO =
    Sample_SampleType_AUDIO;
  static constexpr SampleType TEXT =
    Sample_SampleType_TEXT;
  static inline bool SampleType_IsValid(int value) {
    return Sample_SampleType_IsValid(value);
  }
  static constexpr SampleType SampleType_MIN =
    Sample_SampleType_SampleType_MIN;
  static constexpr SampleType SampleType_MAX =
    Sample_SampleType_SampleType_MAX;
  static constexpr int SampleType_ARRAYSIZE =
    Sample_SampleType_SampleType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  SampleType_descriptor() {
    return Sample_SampleType_descriptor();
  }
  template<typename T>
  static inline const std::string& SampleType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, SampleType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function SampleType_Name.");
    return Sample_SampleType_Name(enum_t_value);
  }
  static inline bool SampleType_Parse(const std::string& name,
      SampleType* value) {
    return Sample_SampleType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kXFieldNumber = 3,
    kTypeFieldNumber = 2,
  };
  // required string name = 1;
  bool has_name() const;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // required .oneflow.summary.Tensor X = 3;
  bool has_x() const;
  void clear_x();
  const ::oneflow::summary::Tensor& x() const;
  ::oneflow::summary::Tensor* release_x();
  ::oneflow::summary::Tensor* mutable_x();
  void set_allocated_x(::oneflow::summary::Tensor* x);

  // required .oneflow.summary.Sample.SampleType type = 2;
  bool has_type() const;
  void clear_type();
  ::oneflow::summary::Sample_SampleType type() const;
  void set_type(::oneflow::summary::Sample_SampleType value);

  // @@protoc_insertion_point(class_scope:oneflow.summary.Sample)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::oneflow::summary::Tensor* x_;
  int type_;
  friend struct ::TableStruct_oneflow_2fcore_2fsummary_2fprojector_2eproto;
};
// -------------------------------------------------------------------

class Projector :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:oneflow.summary.Projector) */ {
 public:
  Projector();
  virtual ~Projector();

  Projector(const Projector& from);
  Projector(Projector&& from) noexcept
    : Projector() {
    *this = ::std::move(from);
  }

  inline Projector& operator=(const Projector& from) {
    CopyFrom(from);
    return *this;
  }
  inline Projector& operator=(Projector&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Projector& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Projector* internal_default_instance() {
    return reinterpret_cast<const Projector*>(
               &_Projector_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Projector& a, Projector& b) {
    a.Swap(&b);
  }
  inline void Swap(Projector* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Projector* New() const final {
    return CreateMaybeMessage<Projector>(nullptr);
  }

  Projector* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Projector>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Projector& from);
  void MergeFrom(const Projector& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Projector* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "oneflow.summary.Projector";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_oneflow_2fcore_2fsummary_2fprojector_2eproto);
    return ::descriptor_table_oneflow_2fcore_2fsummary_2fprojector_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTagFieldNumber = 1,
    kValueFieldNumber = 4,
    kLabelFieldNumber = 5,
    kStepFieldNumber = 2,
    kWALLTIMEFieldNumber = 3,
  };
  // required string tag = 1;
  bool has_tag() const;
  void clear_tag();
  const std::string& tag() const;
  void set_tag(const std::string& value);
  void set_tag(std::string&& value);
  void set_tag(const char* value);
  void set_tag(const char* value, size_t size);
  std::string* mutable_tag();
  std::string* release_tag();
  void set_allocated_tag(std::string* tag);

  // required .oneflow.summary.Tensor value = 4;
  bool has_value() const;
  void clear_value();
  const ::oneflow::summary::Tensor& value() const;
  ::oneflow::summary::Tensor* release_value();
  ::oneflow::summary::Tensor* mutable_value();
  void set_allocated_value(::oneflow::summary::Tensor* value);

  // optional .oneflow.summary.Tensor label = 5;
  bool has_label() const;
  void clear_label();
  const ::oneflow::summary::Tensor& label() const;
  ::oneflow::summary::Tensor* release_label();
  ::oneflow::summary::Tensor* mutable_label();
  void set_allocated_label(::oneflow::summary::Tensor* label);

  // optional int64 step = 2;
  bool has_step() const;
  void clear_step();
  ::PROTOBUF_NAMESPACE_ID::int64 step() const;
  void set_step(::PROTOBUF_NAMESPACE_ID::int64 value);

  // required double WALL_TIME = 3;
  bool has_wall_time() const;
  void clear_wall_time();
  double wall_time() const;
  void set_wall_time(double value);

  // @@protoc_insertion_point(class_scope:oneflow.summary.Projector)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tag_;
  ::oneflow::summary::Tensor* value_;
  ::oneflow::summary::Tensor* label_;
  ::PROTOBUF_NAMESPACE_ID::int64 step_;
  double wall_time_;
  friend struct ::TableStruct_oneflow_2fcore_2fsummary_2fprojector_2eproto;
};
// -------------------------------------------------------------------

class SummaryProjector :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:oneflow.summary.SummaryProjector) */ {
 public:
  SummaryProjector();
  virtual ~SummaryProjector();

  SummaryProjector(const SummaryProjector& from);
  SummaryProjector(SummaryProjector&& from) noexcept
    : SummaryProjector() {
    *this = ::std::move(from);
  }

  inline SummaryProjector& operator=(const SummaryProjector& from) {
    CopyFrom(from);
    return *this;
  }
  inline SummaryProjector& operator=(SummaryProjector&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SummaryProjector& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SummaryProjector* internal_default_instance() {
    return reinterpret_cast<const SummaryProjector*>(
               &_SummaryProjector_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(SummaryProjector& a, SummaryProjector& b) {
    a.Swap(&b);
  }
  inline void Swap(SummaryProjector* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SummaryProjector* New() const final {
    return CreateMaybeMessage<SummaryProjector>(nullptr);
  }

  SummaryProjector* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SummaryProjector>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SummaryProjector& from);
  void MergeFrom(const SummaryProjector& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SummaryProjector* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "oneflow.summary.SummaryProjector";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_oneflow_2fcore_2fsummary_2fprojector_2eproto);
    return ::descriptor_table_oneflow_2fcore_2fsummary_2fprojector_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProjectorFieldNumber = 1,
    kSampleFieldNumber = 2,
    kMetadataFieldNumber = 6,
  };
  // repeated .oneflow.summary.Projector projector = 1;
  int projector_size() const;
  void clear_projector();
  ::oneflow::summary::Projector* mutable_projector(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oneflow::summary::Projector >*
      mutable_projector();
  const ::oneflow::summary::Projector& projector(int index) const;
  ::oneflow::summary::Projector* add_projector();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oneflow::summary::Projector >&
      projector() const;

  // optional .oneflow.summary.Sample sample = 2;
  bool has_sample() const;
  void clear_sample();
  const ::oneflow::summary::Sample& sample() const;
  ::oneflow::summary::Sample* release_sample();
  ::oneflow::summary::Sample* mutable_sample();
  void set_allocated_sample(::oneflow::summary::Sample* sample);

  // required .oneflow.summary.MetaData metadata = 6;
  bool has_metadata() const;
  void clear_metadata();
  const ::oneflow::summary::MetaData& metadata() const;
  ::oneflow::summary::MetaData* release_metadata();
  ::oneflow::summary::MetaData* mutable_metadata();
  void set_allocated_metadata(::oneflow::summary::MetaData* metadata);

  // @@protoc_insertion_point(class_scope:oneflow.summary.SummaryProjector)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oneflow::summary::Projector > projector_;
  ::oneflow::summary::Sample* sample_;
  ::oneflow::summary::MetaData* metadata_;
  friend struct ::TableStruct_oneflow_2fcore_2fsummary_2fprojector_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MetaData

// required .oneflow.summary.MetaData.ProjectorType type = 1;
inline bool MetaData::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MetaData::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::oneflow::summary::MetaData_ProjectorType MetaData::type() const {
  // @@protoc_insertion_point(field_get:oneflow.summary.MetaData.type)
  return static_cast< ::oneflow::summary::MetaData_ProjectorType >(type_);
}
inline void MetaData::set_type(::oneflow::summary::MetaData_ProjectorType value) {
  assert(::oneflow::summary::MetaData_ProjectorType_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  type_ = value;
  // @@protoc_insertion_point(field_set:oneflow.summary.MetaData.type)
}

// optional string content = 2;
inline bool MetaData::has_content() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MetaData::clear_content() {
  content_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& MetaData::content() const {
  // @@protoc_insertion_point(field_get:oneflow.summary.MetaData.content)
  return content_.GetNoArena();
}
inline void MetaData::set_content(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:oneflow.summary.MetaData.content)
}
inline void MetaData::set_content(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  content_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:oneflow.summary.MetaData.content)
}
inline void MetaData::set_content(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:oneflow.summary.MetaData.content)
}
inline void MetaData::set_content(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:oneflow.summary.MetaData.content)
}
inline std::string* MetaData::mutable_content() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:oneflow.summary.MetaData.content)
  return content_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MetaData::release_content() {
  // @@protoc_insertion_point(field_release:oneflow.summary.MetaData.content)
  if (!has_content()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return content_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MetaData::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  content_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:oneflow.summary.MetaData.content)
}

// -------------------------------------------------------------------

// Tensor_TensorShape_Dim

// required int64 size = 1;
inline bool Tensor_TensorShape_Dim::has_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Tensor_TensorShape_Dim::clear_size() {
  size_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Tensor_TensorShape_Dim::size() const {
  // @@protoc_insertion_point(field_get:oneflow.summary.Tensor.TensorShape.Dim.size)
  return size_;
}
inline void Tensor_TensorShape_Dim::set_size(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  size_ = value;
  // @@protoc_insertion_point(field_set:oneflow.summary.Tensor.TensorShape.Dim.size)
}

// optional string name = 2;
inline bool Tensor_TensorShape_Dim::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Tensor_TensorShape_Dim::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Tensor_TensorShape_Dim::name() const {
  // @@protoc_insertion_point(field_get:oneflow.summary.Tensor.TensorShape.Dim.name)
  return name_.GetNoArena();
}
inline void Tensor_TensorShape_Dim::set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:oneflow.summary.Tensor.TensorShape.Dim.name)
}
inline void Tensor_TensorShape_Dim::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:oneflow.summary.Tensor.TensorShape.Dim.name)
}
inline void Tensor_TensorShape_Dim::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:oneflow.summary.Tensor.TensorShape.Dim.name)
}
inline void Tensor_TensorShape_Dim::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:oneflow.summary.Tensor.TensorShape.Dim.name)
}
inline std::string* Tensor_TensorShape_Dim::mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:oneflow.summary.Tensor.TensorShape.Dim.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Tensor_TensorShape_Dim::release_name() {
  // @@protoc_insertion_point(field_release:oneflow.summary.Tensor.TensorShape.Dim.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Tensor_TensorShape_Dim::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:oneflow.summary.Tensor.TensorShape.Dim.name)
}

// -------------------------------------------------------------------

// Tensor_TensorShape

// repeated .oneflow.summary.Tensor.TensorShape.Dim dim = 1;
inline int Tensor_TensorShape::dim_size() const {
  return dim_.size();
}
inline void Tensor_TensorShape::clear_dim() {
  dim_.Clear();
}
inline ::oneflow::summary::Tensor_TensorShape_Dim* Tensor_TensorShape::mutable_dim(int index) {
  // @@protoc_insertion_point(field_mutable:oneflow.summary.Tensor.TensorShape.dim)
  return dim_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oneflow::summary::Tensor_TensorShape_Dim >*
Tensor_TensorShape::mutable_dim() {
  // @@protoc_insertion_point(field_mutable_list:oneflow.summary.Tensor.TensorShape.dim)
  return &dim_;
}
inline const ::oneflow::summary::Tensor_TensorShape_Dim& Tensor_TensorShape::dim(int index) const {
  // @@protoc_insertion_point(field_get:oneflow.summary.Tensor.TensorShape.dim)
  return dim_.Get(index);
}
inline ::oneflow::summary::Tensor_TensorShape_Dim* Tensor_TensorShape::add_dim() {
  // @@protoc_insertion_point(field_add:oneflow.summary.Tensor.TensorShape.dim)
  return dim_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oneflow::summary::Tensor_TensorShape_Dim >&
Tensor_TensorShape::dim() const {
  // @@protoc_insertion_point(field_list:oneflow.summary.Tensor.TensorShape.dim)
  return dim_;
}

// -------------------------------------------------------------------

// Tensor

// required string dtype = 1;
inline bool Tensor::has_dtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Tensor::clear_dtype() {
  dtype_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Tensor::dtype() const {
  // @@protoc_insertion_point(field_get:oneflow.summary.Tensor.dtype)
  return dtype_.GetNoArena();
}
inline void Tensor::set_dtype(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  dtype_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:oneflow.summary.Tensor.dtype)
}
inline void Tensor::set_dtype(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  dtype_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:oneflow.summary.Tensor.dtype)
}
inline void Tensor::set_dtype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  dtype_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:oneflow.summary.Tensor.dtype)
}
inline void Tensor::set_dtype(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  dtype_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:oneflow.summary.Tensor.dtype)
}
inline std::string* Tensor::mutable_dtype() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:oneflow.summary.Tensor.dtype)
  return dtype_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Tensor::release_dtype() {
  // @@protoc_insertion_point(field_release:oneflow.summary.Tensor.dtype)
  if (!has_dtype()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return dtype_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Tensor::set_allocated_dtype(std::string* dtype) {
  if (dtype != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  dtype_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dtype);
  // @@protoc_insertion_point(field_set_allocated:oneflow.summary.Tensor.dtype)
}

// required .oneflow.summary.Tensor.TensorShape shape = 2;
inline bool Tensor::has_shape() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Tensor::clear_shape() {
  if (shape_ != nullptr) shape_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::oneflow::summary::Tensor_TensorShape& Tensor::shape() const {
  const ::oneflow::summary::Tensor_TensorShape* p = shape_;
  // @@protoc_insertion_point(field_get:oneflow.summary.Tensor.shape)
  return p != nullptr ? *p : *reinterpret_cast<const ::oneflow::summary::Tensor_TensorShape*>(
      &::oneflow::summary::_Tensor_TensorShape_default_instance_);
}
inline ::oneflow::summary::Tensor_TensorShape* Tensor::release_shape() {
  // @@protoc_insertion_point(field_release:oneflow.summary.Tensor.shape)
  _has_bits_[0] &= ~0x00000004u;
  ::oneflow::summary::Tensor_TensorShape* temp = shape_;
  shape_ = nullptr;
  return temp;
}
inline ::oneflow::summary::Tensor_TensorShape* Tensor::mutable_shape() {
  _has_bits_[0] |= 0x00000004u;
  if (shape_ == nullptr) {
    auto* p = CreateMaybeMessage<::oneflow::summary::Tensor_TensorShape>(GetArenaNoVirtual());
    shape_ = p;
  }
  // @@protoc_insertion_point(field_mutable:oneflow.summary.Tensor.shape)
  return shape_;
}
inline void Tensor::set_allocated_shape(::oneflow::summary::Tensor_TensorShape* shape) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete shape_;
  }
  if (shape) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      shape = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, shape, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  shape_ = shape;
  // @@protoc_insertion_point(field_set_allocated:oneflow.summary.Tensor.shape)
}

// optional bytes content = 3;
inline bool Tensor::has_content() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Tensor::clear_content() {
  content_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Tensor::content() const {
  // @@protoc_insertion_point(field_get:oneflow.summary.Tensor.content)
  return content_.GetNoArena();
}
inline void Tensor::set_content(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:oneflow.summary.Tensor.content)
}
inline void Tensor::set_content(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  content_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:oneflow.summary.Tensor.content)
}
inline void Tensor::set_content(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:oneflow.summary.Tensor.content)
}
inline void Tensor::set_content(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:oneflow.summary.Tensor.content)
}
inline std::string* Tensor::mutable_content() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:oneflow.summary.Tensor.content)
  return content_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Tensor::release_content() {
  // @@protoc_insertion_point(field_release:oneflow.summary.Tensor.content)
  if (!has_content()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return content_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Tensor::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  content_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:oneflow.summary.Tensor.content)
}

// -------------------------------------------------------------------

// Sample

// required string name = 1;
inline bool Sample::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Sample::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Sample::name() const {
  // @@protoc_insertion_point(field_get:oneflow.summary.Sample.name)
  return name_.GetNoArena();
}
inline void Sample::set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:oneflow.summary.Sample.name)
}
inline void Sample::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:oneflow.summary.Sample.name)
}
inline void Sample::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:oneflow.summary.Sample.name)
}
inline void Sample::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:oneflow.summary.Sample.name)
}
inline std::string* Sample::mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:oneflow.summary.Sample.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Sample::release_name() {
  // @@protoc_insertion_point(field_release:oneflow.summary.Sample.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Sample::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:oneflow.summary.Sample.name)
}

// required .oneflow.summary.Sample.SampleType type = 2;
inline bool Sample::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Sample::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::oneflow::summary::Sample_SampleType Sample::type() const {
  // @@protoc_insertion_point(field_get:oneflow.summary.Sample.type)
  return static_cast< ::oneflow::summary::Sample_SampleType >(type_);
}
inline void Sample::set_type(::oneflow::summary::Sample_SampleType value) {
  assert(::oneflow::summary::Sample_SampleType_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  type_ = value;
  // @@protoc_insertion_point(field_set:oneflow.summary.Sample.type)
}

// required .oneflow.summary.Tensor X = 3;
inline bool Sample::has_x() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Sample::clear_x() {
  if (x_ != nullptr) x_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::oneflow::summary::Tensor& Sample::x() const {
  const ::oneflow::summary::Tensor* p = x_;
  // @@protoc_insertion_point(field_get:oneflow.summary.Sample.X)
  return p != nullptr ? *p : *reinterpret_cast<const ::oneflow::summary::Tensor*>(
      &::oneflow::summary::_Tensor_default_instance_);
}
inline ::oneflow::summary::Tensor* Sample::release_x() {
  // @@protoc_insertion_point(field_release:oneflow.summary.Sample.X)
  _has_bits_[0] &= ~0x00000002u;
  ::oneflow::summary::Tensor* temp = x_;
  x_ = nullptr;
  return temp;
}
inline ::oneflow::summary::Tensor* Sample::mutable_x() {
  _has_bits_[0] |= 0x00000002u;
  if (x_ == nullptr) {
    auto* p = CreateMaybeMessage<::oneflow::summary::Tensor>(GetArenaNoVirtual());
    x_ = p;
  }
  // @@protoc_insertion_point(field_mutable:oneflow.summary.Sample.X)
  return x_;
}
inline void Sample::set_allocated_x(::oneflow::summary::Tensor* x) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete x_;
  }
  if (x) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      x = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, x, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  x_ = x;
  // @@protoc_insertion_point(field_set_allocated:oneflow.summary.Sample.X)
}

// -------------------------------------------------------------------

// Projector

// required string tag = 1;
inline bool Projector::has_tag() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Projector::clear_tag() {
  tag_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Projector::tag() const {
  // @@protoc_insertion_point(field_get:oneflow.summary.Projector.tag)
  return tag_.GetNoArena();
}
inline void Projector::set_tag(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  tag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:oneflow.summary.Projector.tag)
}
inline void Projector::set_tag(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  tag_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:oneflow.summary.Projector.tag)
}
inline void Projector::set_tag(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  tag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:oneflow.summary.Projector.tag)
}
inline void Projector::set_tag(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  tag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:oneflow.summary.Projector.tag)
}
inline std::string* Projector::mutable_tag() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:oneflow.summary.Projector.tag)
  return tag_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Projector::release_tag() {
  // @@protoc_insertion_point(field_release:oneflow.summary.Projector.tag)
  if (!has_tag()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return tag_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Projector::set_allocated_tag(std::string* tag) {
  if (tag != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  tag_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tag);
  // @@protoc_insertion_point(field_set_allocated:oneflow.summary.Projector.tag)
}

// optional int64 step = 2;
inline bool Projector::has_step() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Projector::clear_step() {
  step_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Projector::step() const {
  // @@protoc_insertion_point(field_get:oneflow.summary.Projector.step)
  return step_;
}
inline void Projector::set_step(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000008u;
  step_ = value;
  // @@protoc_insertion_point(field_set:oneflow.summary.Projector.step)
}

// required double WALL_TIME = 3;
inline bool Projector::has_wall_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Projector::clear_wall_time() {
  wall_time_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline double Projector::wall_time() const {
  // @@protoc_insertion_point(field_get:oneflow.summary.Projector.WALL_TIME)
  return wall_time_;
}
inline void Projector::set_wall_time(double value) {
  _has_bits_[0] |= 0x00000010u;
  wall_time_ = value;
  // @@protoc_insertion_point(field_set:oneflow.summary.Projector.WALL_TIME)
}

// required .oneflow.summary.Tensor value = 4;
inline bool Projector::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Projector::clear_value() {
  if (value_ != nullptr) value_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::oneflow::summary::Tensor& Projector::value() const {
  const ::oneflow::summary::Tensor* p = value_;
  // @@protoc_insertion_point(field_get:oneflow.summary.Projector.value)
  return p != nullptr ? *p : *reinterpret_cast<const ::oneflow::summary::Tensor*>(
      &::oneflow::summary::_Tensor_default_instance_);
}
inline ::oneflow::summary::Tensor* Projector::release_value() {
  // @@protoc_insertion_point(field_release:oneflow.summary.Projector.value)
  _has_bits_[0] &= ~0x00000002u;
  ::oneflow::summary::Tensor* temp = value_;
  value_ = nullptr;
  return temp;
}
inline ::oneflow::summary::Tensor* Projector::mutable_value() {
  _has_bits_[0] |= 0x00000002u;
  if (value_ == nullptr) {
    auto* p = CreateMaybeMessage<::oneflow::summary::Tensor>(GetArenaNoVirtual());
    value_ = p;
  }
  // @@protoc_insertion_point(field_mutable:oneflow.summary.Projector.value)
  return value_;
}
inline void Projector::set_allocated_value(::oneflow::summary::Tensor* value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete value_;
  }
  if (value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  value_ = value;
  // @@protoc_insertion_point(field_set_allocated:oneflow.summary.Projector.value)
}

// optional .oneflow.summary.Tensor label = 5;
inline bool Projector::has_label() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Projector::clear_label() {
  if (label_ != nullptr) label_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::oneflow::summary::Tensor& Projector::label() const {
  const ::oneflow::summary::Tensor* p = label_;
  // @@protoc_insertion_point(field_get:oneflow.summary.Projector.label)
  return p != nullptr ? *p : *reinterpret_cast<const ::oneflow::summary::Tensor*>(
      &::oneflow::summary::_Tensor_default_instance_);
}
inline ::oneflow::summary::Tensor* Projector::release_label() {
  // @@protoc_insertion_point(field_release:oneflow.summary.Projector.label)
  _has_bits_[0] &= ~0x00000004u;
  ::oneflow::summary::Tensor* temp = label_;
  label_ = nullptr;
  return temp;
}
inline ::oneflow::summary::Tensor* Projector::mutable_label() {
  _has_bits_[0] |= 0x00000004u;
  if (label_ == nullptr) {
    auto* p = CreateMaybeMessage<::oneflow::summary::Tensor>(GetArenaNoVirtual());
    label_ = p;
  }
  // @@protoc_insertion_point(field_mutable:oneflow.summary.Projector.label)
  return label_;
}
inline void Projector::set_allocated_label(::oneflow::summary::Tensor* label) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete label_;
  }
  if (label) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      label = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, label, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  label_ = label;
  // @@protoc_insertion_point(field_set_allocated:oneflow.summary.Projector.label)
}

// -------------------------------------------------------------------

// SummaryProjector

// required .oneflow.summary.MetaData metadata = 6;
inline bool SummaryProjector::has_metadata() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SummaryProjector::clear_metadata() {
  if (metadata_ != nullptr) metadata_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::oneflow::summary::MetaData& SummaryProjector::metadata() const {
  const ::oneflow::summary::MetaData* p = metadata_;
  // @@protoc_insertion_point(field_get:oneflow.summary.SummaryProjector.metadata)
  return p != nullptr ? *p : *reinterpret_cast<const ::oneflow::summary::MetaData*>(
      &::oneflow::summary::_MetaData_default_instance_);
}
inline ::oneflow::summary::MetaData* SummaryProjector::release_metadata() {
  // @@protoc_insertion_point(field_release:oneflow.summary.SummaryProjector.metadata)
  _has_bits_[0] &= ~0x00000002u;
  ::oneflow::summary::MetaData* temp = metadata_;
  metadata_ = nullptr;
  return temp;
}
inline ::oneflow::summary::MetaData* SummaryProjector::mutable_metadata() {
  _has_bits_[0] |= 0x00000002u;
  if (metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::oneflow::summary::MetaData>(GetArenaNoVirtual());
    metadata_ = p;
  }
  // @@protoc_insertion_point(field_mutable:oneflow.summary.SummaryProjector.metadata)
  return metadata_;
}
inline void SummaryProjector::set_allocated_metadata(::oneflow::summary::MetaData* metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete metadata_;
  }
  if (metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metadata, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  metadata_ = metadata;
  // @@protoc_insertion_point(field_set_allocated:oneflow.summary.SummaryProjector.metadata)
}

// optional .oneflow.summary.Sample sample = 2;
inline bool SummaryProjector::has_sample() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SummaryProjector::clear_sample() {
  if (sample_ != nullptr) sample_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::oneflow::summary::Sample& SummaryProjector::sample() const {
  const ::oneflow::summary::Sample* p = sample_;
  // @@protoc_insertion_point(field_get:oneflow.summary.SummaryProjector.sample)
  return p != nullptr ? *p : *reinterpret_cast<const ::oneflow::summary::Sample*>(
      &::oneflow::summary::_Sample_default_instance_);
}
inline ::oneflow::summary::Sample* SummaryProjector::release_sample() {
  // @@protoc_insertion_point(field_release:oneflow.summary.SummaryProjector.sample)
  _has_bits_[0] &= ~0x00000001u;
  ::oneflow::summary::Sample* temp = sample_;
  sample_ = nullptr;
  return temp;
}
inline ::oneflow::summary::Sample* SummaryProjector::mutable_sample() {
  _has_bits_[0] |= 0x00000001u;
  if (sample_ == nullptr) {
    auto* p = CreateMaybeMessage<::oneflow::summary::Sample>(GetArenaNoVirtual());
    sample_ = p;
  }
  // @@protoc_insertion_point(field_mutable:oneflow.summary.SummaryProjector.sample)
  return sample_;
}
inline void SummaryProjector::set_allocated_sample(::oneflow::summary::Sample* sample) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete sample_;
  }
  if (sample) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      sample = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sample, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  sample_ = sample;
  // @@protoc_insertion_point(field_set_allocated:oneflow.summary.SummaryProjector.sample)
}

// repeated .oneflow.summary.Projector projector = 1;
inline int SummaryProjector::projector_size() const {
  return projector_.size();
}
inline void SummaryProjector::clear_projector() {
  projector_.Clear();
}
inline ::oneflow::summary::Projector* SummaryProjector::mutable_projector(int index) {
  // @@protoc_insertion_point(field_mutable:oneflow.summary.SummaryProjector.projector)
  return projector_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oneflow::summary::Projector >*
SummaryProjector::mutable_projector() {
  // @@protoc_insertion_point(field_mutable_list:oneflow.summary.SummaryProjector.projector)
  return &projector_;
}
inline const ::oneflow::summary::Projector& SummaryProjector::projector(int index) const {
  // @@protoc_insertion_point(field_get:oneflow.summary.SummaryProjector.projector)
  return projector_.Get(index);
}
inline ::oneflow::summary::Projector* SummaryProjector::add_projector() {
  // @@protoc_insertion_point(field_add:oneflow.summary.SummaryProjector.projector)
  return projector_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oneflow::summary::Projector >&
SummaryProjector::projector() const {
  // @@protoc_insertion_point(field_list:oneflow.summary.SummaryProjector.projector)
  return projector_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace summary
}  // namespace oneflow

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::oneflow::summary::MetaData_ProjectorType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::oneflow::summary::MetaData_ProjectorType>() {
  return ::oneflow::summary::MetaData_ProjectorType_descriptor();
}
template <> struct is_proto_enum< ::oneflow::summary::Sample_SampleType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::oneflow::summary::Sample_SampleType>() {
  return ::oneflow::summary::Sample_SampleType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_oneflow_2fcore_2fsummary_2fprojector_2eproto
