// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: oneflow/core/summary/tensor.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_oneflow_2fcore_2fsummary_2ftensor_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_oneflow_2fcore_2fsummary_2ftensor_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_oneflow_2fcore_2fsummary_2ftensor_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_oneflow_2fcore_2fsummary_2ftensor_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_oneflow_2fcore_2fsummary_2ftensor_2eproto;
namespace oneflow {
namespace summary {
class TensorProto;
class TensorProtoDefaultTypeInternal;
extern TensorProtoDefaultTypeInternal _TensorProto_default_instance_;
class TensorShapeProto;
class TensorShapeProtoDefaultTypeInternal;
extern TensorShapeProtoDefaultTypeInternal _TensorShapeProto_default_instance_;
class TensorShapeProto_Dim;
class TensorShapeProto_DimDefaultTypeInternal;
extern TensorShapeProto_DimDefaultTypeInternal _TensorShapeProto_Dim_default_instance_;
}  // namespace summary
}  // namespace oneflow
PROTOBUF_NAMESPACE_OPEN
template<> ::oneflow::summary::TensorProto* Arena::CreateMaybeMessage<::oneflow::summary::TensorProto>(Arena*);
template<> ::oneflow::summary::TensorShapeProto* Arena::CreateMaybeMessage<::oneflow::summary::TensorShapeProto>(Arena*);
template<> ::oneflow::summary::TensorShapeProto_Dim* Arena::CreateMaybeMessage<::oneflow::summary::TensorShapeProto_Dim>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace oneflow {
namespace summary {

enum TensorDataType : int {
  DT_INVALID = 0,
  DT_FLOAT = 1,
  DT_DOUBLE = 2,
  DT_INT32 = 3,
  DT_UINT8 = 4,
  DT_INT16 = 5,
  DT_INT8 = 6,
  DT_STRING = 7,
  DT_INT64 = 8,
  DT_UINT16 = 9,
  DT_HALF = 10,
  DT_UINT32 = 11,
  DT_UINT64 = 12
};
bool TensorDataType_IsValid(int value);
constexpr TensorDataType TensorDataType_MIN = DT_INVALID;
constexpr TensorDataType TensorDataType_MAX = DT_UINT64;
constexpr int TensorDataType_ARRAYSIZE = TensorDataType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TensorDataType_descriptor();
template<typename T>
inline const std::string& TensorDataType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TensorDataType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TensorDataType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TensorDataType_descriptor(), enum_t_value);
}
inline bool TensorDataType_Parse(
    const std::string& name, TensorDataType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TensorDataType>(
    TensorDataType_descriptor(), name, value);
}
// ===================================================================

class TensorProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:oneflow.summary.TensorProto) */ {
 public:
  TensorProto();
  virtual ~TensorProto();

  TensorProto(const TensorProto& from);
  TensorProto(TensorProto&& from) noexcept
    : TensorProto() {
    *this = ::std::move(from);
  }

  inline TensorProto& operator=(const TensorProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline TensorProto& operator=(TensorProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TensorProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TensorProto* internal_default_instance() {
    return reinterpret_cast<const TensorProto*>(
               &_TensorProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TensorProto& a, TensorProto& b) {
    a.Swap(&b);
  }
  inline void Swap(TensorProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TensorProto* New() const final {
    return CreateMaybeMessage<TensorProto>(nullptr);
  }

  TensorProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TensorProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TensorProto& from);
  void MergeFrom(const TensorProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TensorProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "oneflow.summary.TensorProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_oneflow_2fcore_2fsummary_2ftensor_2eproto);
    return ::descriptor_table_oneflow_2fcore_2fsummary_2ftensor_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFloatValFieldNumber = 5,
    kDoubleValFieldNumber = 6,
    kIntValFieldNumber = 7,
    kStringValFieldNumber = 8,
    kInt64ValFieldNumber = 9,
    kBoolValFieldNumber = 10,
    kUint32ValFieldNumber = 11,
    kUint64ValFieldNumber = 12,
    kHalfValFieldNumber = 13,
    kTensorContentFieldNumber = 4,
    kTensorShapeFieldNumber = 2,
    kDtypeFieldNumber = 1,
    kVersionNumberFieldNumber = 3,
  };
  // repeated float float_val = 5 [packed = true];
  int float_val_size() const;
  void clear_float_val();
  float float_val(int index) const;
  void set_float_val(int index, float value);
  void add_float_val(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      float_val() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_float_val();

  // repeated double double_val = 6 [packed = true];
  int double_val_size() const;
  void clear_double_val();
  double double_val(int index) const;
  void set_double_val(int index, double value);
  void add_double_val(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      double_val() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_double_val();

  // repeated int32 int_val = 7 [packed = true];
  int int_val_size() const;
  void clear_int_val();
  ::PROTOBUF_NAMESPACE_ID::int32 int_val(int index) const;
  void set_int_val(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_int_val(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      int_val() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_int_val();

  // repeated bytes string_val = 8;
  int string_val_size() const;
  void clear_string_val();
  const std::string& string_val(int index) const;
  std::string* mutable_string_val(int index);
  void set_string_val(int index, const std::string& value);
  void set_string_val(int index, std::string&& value);
  void set_string_val(int index, const char* value);
  void set_string_val(int index, const void* value, size_t size);
  std::string* add_string_val();
  void add_string_val(const std::string& value);
  void add_string_val(std::string&& value);
  void add_string_val(const char* value);
  void add_string_val(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& string_val() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_string_val();

  // repeated int64 int64_val = 9 [packed = true];
  int int64_val_size() const;
  void clear_int64_val();
  ::PROTOBUF_NAMESPACE_ID::int64 int64_val(int index) const;
  void set_int64_val(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_int64_val(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      int64_val() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_int64_val();

  // repeated bool bool_val = 10 [packed = true];
  int bool_val_size() const;
  void clear_bool_val();
  bool bool_val(int index) const;
  void set_bool_val(int index, bool value);
  void add_bool_val(bool value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      bool_val() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      mutable_bool_val();

  // repeated uint32 uint32_val = 11 [packed = true];
  int uint32_val_size() const;
  void clear_uint32_val();
  ::PROTOBUF_NAMESPACE_ID::uint32 uint32_val(int index) const;
  void set_uint32_val(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_uint32_val(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      uint32_val() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_uint32_val();

  // repeated uint64 uint64_val = 12 [packed = true];
  int uint64_val_size() const;
  void clear_uint64_val();
  ::PROTOBUF_NAMESPACE_ID::uint64 uint64_val(int index) const;
  void set_uint64_val(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_uint64_val(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      uint64_val() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_uint64_val();

  // repeated int32 half_val = 13 [packed = true];
  int half_val_size() const;
  void clear_half_val();
  ::PROTOBUF_NAMESPACE_ID::int32 half_val(int index) const;
  void set_half_val(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_half_val(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      half_val() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_half_val();

  // optional bytes tensor_content = 4;
  bool has_tensor_content() const;
  void clear_tensor_content();
  const std::string& tensor_content() const;
  void set_tensor_content(const std::string& value);
  void set_tensor_content(std::string&& value);
  void set_tensor_content(const char* value);
  void set_tensor_content(const void* value, size_t size);
  std::string* mutable_tensor_content();
  std::string* release_tensor_content();
  void set_allocated_tensor_content(std::string* tensor_content);

  // required .oneflow.summary.TensorShapeProto tensor_shape = 2;
  bool has_tensor_shape() const;
  void clear_tensor_shape();
  const ::oneflow::summary::TensorShapeProto& tensor_shape() const;
  ::oneflow::summary::TensorShapeProto* release_tensor_shape();
  ::oneflow::summary::TensorShapeProto* mutable_tensor_shape();
  void set_allocated_tensor_shape(::oneflow::summary::TensorShapeProto* tensor_shape);

  // required .oneflow.summary.TensorDataType dtype = 1;
  bool has_dtype() const;
  void clear_dtype();
  ::oneflow::summary::TensorDataType dtype() const;
  void set_dtype(::oneflow::summary::TensorDataType value);

  // optional int32 version_number = 3;
  bool has_version_number() const;
  void clear_version_number();
  ::PROTOBUF_NAMESPACE_ID::int32 version_number() const;
  void set_version_number(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:oneflow.summary.TensorProto)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > float_val_;
  mutable std::atomic<int> _float_val_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > double_val_;
  mutable std::atomic<int> _double_val_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > int_val_;
  mutable std::atomic<int> _int_val_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> string_val_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > int64_val_;
  mutable std::atomic<int> _int64_val_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool > bool_val_;
  mutable std::atomic<int> _bool_val_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > uint32_val_;
  mutable std::atomic<int> _uint32_val_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > uint64_val_;
  mutable std::atomic<int> _uint64_val_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > half_val_;
  mutable std::atomic<int> _half_val_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tensor_content_;
  ::oneflow::summary::TensorShapeProto* tensor_shape_;
  int dtype_;
  ::PROTOBUF_NAMESPACE_ID::int32 version_number_;
  friend struct ::TableStruct_oneflow_2fcore_2fsummary_2ftensor_2eproto;
};
// -------------------------------------------------------------------

class TensorShapeProto_Dim :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:oneflow.summary.TensorShapeProto.Dim) */ {
 public:
  TensorShapeProto_Dim();
  virtual ~TensorShapeProto_Dim();

  TensorShapeProto_Dim(const TensorShapeProto_Dim& from);
  TensorShapeProto_Dim(TensorShapeProto_Dim&& from) noexcept
    : TensorShapeProto_Dim() {
    *this = ::std::move(from);
  }

  inline TensorShapeProto_Dim& operator=(const TensorShapeProto_Dim& from) {
    CopyFrom(from);
    return *this;
  }
  inline TensorShapeProto_Dim& operator=(TensorShapeProto_Dim&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TensorShapeProto_Dim& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TensorShapeProto_Dim* internal_default_instance() {
    return reinterpret_cast<const TensorShapeProto_Dim*>(
               &_TensorShapeProto_Dim_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TensorShapeProto_Dim& a, TensorShapeProto_Dim& b) {
    a.Swap(&b);
  }
  inline void Swap(TensorShapeProto_Dim* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TensorShapeProto_Dim* New() const final {
    return CreateMaybeMessage<TensorShapeProto_Dim>(nullptr);
  }

  TensorShapeProto_Dim* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TensorShapeProto_Dim>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TensorShapeProto_Dim& from);
  void MergeFrom(const TensorShapeProto_Dim& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TensorShapeProto_Dim* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "oneflow.summary.TensorShapeProto.Dim";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_oneflow_2fcore_2fsummary_2ftensor_2eproto);
    return ::descriptor_table_oneflow_2fcore_2fsummary_2ftensor_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kSizeFieldNumber = 1,
  };
  // optional string name = 2;
  bool has_name() const;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // required int64 size = 1;
  bool has_size() const;
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::int64 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:oneflow.summary.TensorShapeProto.Dim)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int64 size_;
  friend struct ::TableStruct_oneflow_2fcore_2fsummary_2ftensor_2eproto;
};
// -------------------------------------------------------------------

class TensorShapeProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:oneflow.summary.TensorShapeProto) */ {
 public:
  TensorShapeProto();
  virtual ~TensorShapeProto();

  TensorShapeProto(const TensorShapeProto& from);
  TensorShapeProto(TensorShapeProto&& from) noexcept
    : TensorShapeProto() {
    *this = ::std::move(from);
  }

  inline TensorShapeProto& operator=(const TensorShapeProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline TensorShapeProto& operator=(TensorShapeProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TensorShapeProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TensorShapeProto* internal_default_instance() {
    return reinterpret_cast<const TensorShapeProto*>(
               &_TensorShapeProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(TensorShapeProto& a, TensorShapeProto& b) {
    a.Swap(&b);
  }
  inline void Swap(TensorShapeProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TensorShapeProto* New() const final {
    return CreateMaybeMessage<TensorShapeProto>(nullptr);
  }

  TensorShapeProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TensorShapeProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TensorShapeProto& from);
  void MergeFrom(const TensorShapeProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TensorShapeProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "oneflow.summary.TensorShapeProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_oneflow_2fcore_2fsummary_2ftensor_2eproto);
    return ::descriptor_table_oneflow_2fcore_2fsummary_2ftensor_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef TensorShapeProto_Dim Dim;

  // accessors -------------------------------------------------------

  enum : int {
    kDimFieldNumber = 2,
  };
  // repeated .oneflow.summary.TensorShapeProto.Dim dim = 2;
  int dim_size() const;
  void clear_dim();
  ::oneflow::summary::TensorShapeProto_Dim* mutable_dim(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oneflow::summary::TensorShapeProto_Dim >*
      mutable_dim();
  const ::oneflow::summary::TensorShapeProto_Dim& dim(int index) const;
  ::oneflow::summary::TensorShapeProto_Dim* add_dim();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oneflow::summary::TensorShapeProto_Dim >&
      dim() const;

  // @@protoc_insertion_point(class_scope:oneflow.summary.TensorShapeProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oneflow::summary::TensorShapeProto_Dim > dim_;
  friend struct ::TableStruct_oneflow_2fcore_2fsummary_2ftensor_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TensorProto

// required .oneflow.summary.TensorDataType dtype = 1;
inline bool TensorProto::has_dtype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TensorProto::clear_dtype() {
  dtype_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::oneflow::summary::TensorDataType TensorProto::dtype() const {
  // @@protoc_insertion_point(field_get:oneflow.summary.TensorProto.dtype)
  return static_cast< ::oneflow::summary::TensorDataType >(dtype_);
}
inline void TensorProto::set_dtype(::oneflow::summary::TensorDataType value) {
  assert(::oneflow::summary::TensorDataType_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  dtype_ = value;
  // @@protoc_insertion_point(field_set:oneflow.summary.TensorProto.dtype)
}

// required .oneflow.summary.TensorShapeProto tensor_shape = 2;
inline bool TensorProto::has_tensor_shape() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TensorProto::clear_tensor_shape() {
  if (tensor_shape_ != nullptr) tensor_shape_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::oneflow::summary::TensorShapeProto& TensorProto::tensor_shape() const {
  const ::oneflow::summary::TensorShapeProto* p = tensor_shape_;
  // @@protoc_insertion_point(field_get:oneflow.summary.TensorProto.tensor_shape)
  return p != nullptr ? *p : *reinterpret_cast<const ::oneflow::summary::TensorShapeProto*>(
      &::oneflow::summary::_TensorShapeProto_default_instance_);
}
inline ::oneflow::summary::TensorShapeProto* TensorProto::release_tensor_shape() {
  // @@protoc_insertion_point(field_release:oneflow.summary.TensorProto.tensor_shape)
  _has_bits_[0] &= ~0x00000002u;
  ::oneflow::summary::TensorShapeProto* temp = tensor_shape_;
  tensor_shape_ = nullptr;
  return temp;
}
inline ::oneflow::summary::TensorShapeProto* TensorProto::mutable_tensor_shape() {
  _has_bits_[0] |= 0x00000002u;
  if (tensor_shape_ == nullptr) {
    auto* p = CreateMaybeMessage<::oneflow::summary::TensorShapeProto>(GetArenaNoVirtual());
    tensor_shape_ = p;
  }
  // @@protoc_insertion_point(field_mutable:oneflow.summary.TensorProto.tensor_shape)
  return tensor_shape_;
}
inline void TensorProto::set_allocated_tensor_shape(::oneflow::summary::TensorShapeProto* tensor_shape) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete tensor_shape_;
  }
  if (tensor_shape) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      tensor_shape = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tensor_shape, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  tensor_shape_ = tensor_shape;
  // @@protoc_insertion_point(field_set_allocated:oneflow.summary.TensorProto.tensor_shape)
}

// optional int32 version_number = 3;
inline bool TensorProto::has_version_number() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TensorProto::clear_version_number() {
  version_number_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TensorProto::version_number() const {
  // @@protoc_insertion_point(field_get:oneflow.summary.TensorProto.version_number)
  return version_number_;
}
inline void TensorProto::set_version_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  version_number_ = value;
  // @@protoc_insertion_point(field_set:oneflow.summary.TensorProto.version_number)
}

// optional bytes tensor_content = 4;
inline bool TensorProto::has_tensor_content() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TensorProto::clear_tensor_content() {
  tensor_content_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TensorProto::tensor_content() const {
  // @@protoc_insertion_point(field_get:oneflow.summary.TensorProto.tensor_content)
  return tensor_content_.GetNoArena();
}
inline void TensorProto::set_tensor_content(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  tensor_content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:oneflow.summary.TensorProto.tensor_content)
}
inline void TensorProto::set_tensor_content(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  tensor_content_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:oneflow.summary.TensorProto.tensor_content)
}
inline void TensorProto::set_tensor_content(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  tensor_content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:oneflow.summary.TensorProto.tensor_content)
}
inline void TensorProto::set_tensor_content(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  tensor_content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:oneflow.summary.TensorProto.tensor_content)
}
inline std::string* TensorProto::mutable_tensor_content() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:oneflow.summary.TensorProto.tensor_content)
  return tensor_content_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TensorProto::release_tensor_content() {
  // @@protoc_insertion_point(field_release:oneflow.summary.TensorProto.tensor_content)
  if (!has_tensor_content()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return tensor_content_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TensorProto::set_allocated_tensor_content(std::string* tensor_content) {
  if (tensor_content != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  tensor_content_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tensor_content);
  // @@protoc_insertion_point(field_set_allocated:oneflow.summary.TensorProto.tensor_content)
}

// repeated float float_val = 5 [packed = true];
inline int TensorProto::float_val_size() const {
  return float_val_.size();
}
inline void TensorProto::clear_float_val() {
  float_val_.Clear();
}
inline float TensorProto::float_val(int index) const {
  // @@protoc_insertion_point(field_get:oneflow.summary.TensorProto.float_val)
  return float_val_.Get(index);
}
inline void TensorProto::set_float_val(int index, float value) {
  float_val_.Set(index, value);
  // @@protoc_insertion_point(field_set:oneflow.summary.TensorProto.float_val)
}
inline void TensorProto::add_float_val(float value) {
  float_val_.Add(value);
  // @@protoc_insertion_point(field_add:oneflow.summary.TensorProto.float_val)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
TensorProto::float_val() const {
  // @@protoc_insertion_point(field_list:oneflow.summary.TensorProto.float_val)
  return float_val_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
TensorProto::mutable_float_val() {
  // @@protoc_insertion_point(field_mutable_list:oneflow.summary.TensorProto.float_val)
  return &float_val_;
}

// repeated double double_val = 6 [packed = true];
inline int TensorProto::double_val_size() const {
  return double_val_.size();
}
inline void TensorProto::clear_double_val() {
  double_val_.Clear();
}
inline double TensorProto::double_val(int index) const {
  // @@protoc_insertion_point(field_get:oneflow.summary.TensorProto.double_val)
  return double_val_.Get(index);
}
inline void TensorProto::set_double_val(int index, double value) {
  double_val_.Set(index, value);
  // @@protoc_insertion_point(field_set:oneflow.summary.TensorProto.double_val)
}
inline void TensorProto::add_double_val(double value) {
  double_val_.Add(value);
  // @@protoc_insertion_point(field_add:oneflow.summary.TensorProto.double_val)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
TensorProto::double_val() const {
  // @@protoc_insertion_point(field_list:oneflow.summary.TensorProto.double_val)
  return double_val_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
TensorProto::mutable_double_val() {
  // @@protoc_insertion_point(field_mutable_list:oneflow.summary.TensorProto.double_val)
  return &double_val_;
}

// repeated int32 int_val = 7 [packed = true];
inline int TensorProto::int_val_size() const {
  return int_val_.size();
}
inline void TensorProto::clear_int_val() {
  int_val_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TensorProto::int_val(int index) const {
  // @@protoc_insertion_point(field_get:oneflow.summary.TensorProto.int_val)
  return int_val_.Get(index);
}
inline void TensorProto::set_int_val(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  int_val_.Set(index, value);
  // @@protoc_insertion_point(field_set:oneflow.summary.TensorProto.int_val)
}
inline void TensorProto::add_int_val(::PROTOBUF_NAMESPACE_ID::int32 value) {
  int_val_.Add(value);
  // @@protoc_insertion_point(field_add:oneflow.summary.TensorProto.int_val)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
TensorProto::int_val() const {
  // @@protoc_insertion_point(field_list:oneflow.summary.TensorProto.int_val)
  return int_val_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
TensorProto::mutable_int_val() {
  // @@protoc_insertion_point(field_mutable_list:oneflow.summary.TensorProto.int_val)
  return &int_val_;
}

// repeated bytes string_val = 8;
inline int TensorProto::string_val_size() const {
  return string_val_.size();
}
inline void TensorProto::clear_string_val() {
  string_val_.Clear();
}
inline const std::string& TensorProto::string_val(int index) const {
  // @@protoc_insertion_point(field_get:oneflow.summary.TensorProto.string_val)
  return string_val_.Get(index);
}
inline std::string* TensorProto::mutable_string_val(int index) {
  // @@protoc_insertion_point(field_mutable:oneflow.summary.TensorProto.string_val)
  return string_val_.Mutable(index);
}
inline void TensorProto::set_string_val(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:oneflow.summary.TensorProto.string_val)
  string_val_.Mutable(index)->assign(value);
}
inline void TensorProto::set_string_val(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:oneflow.summary.TensorProto.string_val)
  string_val_.Mutable(index)->assign(std::move(value));
}
inline void TensorProto::set_string_val(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  string_val_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:oneflow.summary.TensorProto.string_val)
}
inline void TensorProto::set_string_val(int index, const void* value, size_t size) {
  string_val_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:oneflow.summary.TensorProto.string_val)
}
inline std::string* TensorProto::add_string_val() {
  // @@protoc_insertion_point(field_add_mutable:oneflow.summary.TensorProto.string_val)
  return string_val_.Add();
}
inline void TensorProto::add_string_val(const std::string& value) {
  string_val_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:oneflow.summary.TensorProto.string_val)
}
inline void TensorProto::add_string_val(std::string&& value) {
  string_val_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:oneflow.summary.TensorProto.string_val)
}
inline void TensorProto::add_string_val(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  string_val_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:oneflow.summary.TensorProto.string_val)
}
inline void TensorProto::add_string_val(const void* value, size_t size) {
  string_val_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:oneflow.summary.TensorProto.string_val)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TensorProto::string_val() const {
  // @@protoc_insertion_point(field_list:oneflow.summary.TensorProto.string_val)
  return string_val_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TensorProto::mutable_string_val() {
  // @@protoc_insertion_point(field_mutable_list:oneflow.summary.TensorProto.string_val)
  return &string_val_;
}

// repeated int64 int64_val = 9 [packed = true];
inline int TensorProto::int64_val_size() const {
  return int64_val_.size();
}
inline void TensorProto::clear_int64_val() {
  int64_val_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TensorProto::int64_val(int index) const {
  // @@protoc_insertion_point(field_get:oneflow.summary.TensorProto.int64_val)
  return int64_val_.Get(index);
}
inline void TensorProto::set_int64_val(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  int64_val_.Set(index, value);
  // @@protoc_insertion_point(field_set:oneflow.summary.TensorProto.int64_val)
}
inline void TensorProto::add_int64_val(::PROTOBUF_NAMESPACE_ID::int64 value) {
  int64_val_.Add(value);
  // @@protoc_insertion_point(field_add:oneflow.summary.TensorProto.int64_val)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
TensorProto::int64_val() const {
  // @@protoc_insertion_point(field_list:oneflow.summary.TensorProto.int64_val)
  return int64_val_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
TensorProto::mutable_int64_val() {
  // @@protoc_insertion_point(field_mutable_list:oneflow.summary.TensorProto.int64_val)
  return &int64_val_;
}

// repeated bool bool_val = 10 [packed = true];
inline int TensorProto::bool_val_size() const {
  return bool_val_.size();
}
inline void TensorProto::clear_bool_val() {
  bool_val_.Clear();
}
inline bool TensorProto::bool_val(int index) const {
  // @@protoc_insertion_point(field_get:oneflow.summary.TensorProto.bool_val)
  return bool_val_.Get(index);
}
inline void TensorProto::set_bool_val(int index, bool value) {
  bool_val_.Set(index, value);
  // @@protoc_insertion_point(field_set:oneflow.summary.TensorProto.bool_val)
}
inline void TensorProto::add_bool_val(bool value) {
  bool_val_.Add(value);
  // @@protoc_insertion_point(field_add:oneflow.summary.TensorProto.bool_val)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
TensorProto::bool_val() const {
  // @@protoc_insertion_point(field_list:oneflow.summary.TensorProto.bool_val)
  return bool_val_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
TensorProto::mutable_bool_val() {
  // @@protoc_insertion_point(field_mutable_list:oneflow.summary.TensorProto.bool_val)
  return &bool_val_;
}

// repeated uint32 uint32_val = 11 [packed = true];
inline int TensorProto::uint32_val_size() const {
  return uint32_val_.size();
}
inline void TensorProto::clear_uint32_val() {
  uint32_val_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TensorProto::uint32_val(int index) const {
  // @@protoc_insertion_point(field_get:oneflow.summary.TensorProto.uint32_val)
  return uint32_val_.Get(index);
}
inline void TensorProto::set_uint32_val(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  uint32_val_.Set(index, value);
  // @@protoc_insertion_point(field_set:oneflow.summary.TensorProto.uint32_val)
}
inline void TensorProto::add_uint32_val(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  uint32_val_.Add(value);
  // @@protoc_insertion_point(field_add:oneflow.summary.TensorProto.uint32_val)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
TensorProto::uint32_val() const {
  // @@protoc_insertion_point(field_list:oneflow.summary.TensorProto.uint32_val)
  return uint32_val_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
TensorProto::mutable_uint32_val() {
  // @@protoc_insertion_point(field_mutable_list:oneflow.summary.TensorProto.uint32_val)
  return &uint32_val_;
}

// repeated uint64 uint64_val = 12 [packed = true];
inline int TensorProto::uint64_val_size() const {
  return uint64_val_.size();
}
inline void TensorProto::clear_uint64_val() {
  uint64_val_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TensorProto::uint64_val(int index) const {
  // @@protoc_insertion_point(field_get:oneflow.summary.TensorProto.uint64_val)
  return uint64_val_.Get(index);
}
inline void TensorProto::set_uint64_val(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  uint64_val_.Set(index, value);
  // @@protoc_insertion_point(field_set:oneflow.summary.TensorProto.uint64_val)
}
inline void TensorProto::add_uint64_val(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  uint64_val_.Add(value);
  // @@protoc_insertion_point(field_add:oneflow.summary.TensorProto.uint64_val)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
TensorProto::uint64_val() const {
  // @@protoc_insertion_point(field_list:oneflow.summary.TensorProto.uint64_val)
  return uint64_val_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
TensorProto::mutable_uint64_val() {
  // @@protoc_insertion_point(field_mutable_list:oneflow.summary.TensorProto.uint64_val)
  return &uint64_val_;
}

// repeated int32 half_val = 13 [packed = true];
inline int TensorProto::half_val_size() const {
  return half_val_.size();
}
inline void TensorProto::clear_half_val() {
  half_val_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TensorProto::half_val(int index) const {
  // @@protoc_insertion_point(field_get:oneflow.summary.TensorProto.half_val)
  return half_val_.Get(index);
}
inline void TensorProto::set_half_val(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  half_val_.Set(index, value);
  // @@protoc_insertion_point(field_set:oneflow.summary.TensorProto.half_val)
}
inline void TensorProto::add_half_val(::PROTOBUF_NAMESPACE_ID::int32 value) {
  half_val_.Add(value);
  // @@protoc_insertion_point(field_add:oneflow.summary.TensorProto.half_val)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
TensorProto::half_val() const {
  // @@protoc_insertion_point(field_list:oneflow.summary.TensorProto.half_val)
  return half_val_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
TensorProto::mutable_half_val() {
  // @@protoc_insertion_point(field_mutable_list:oneflow.summary.TensorProto.half_val)
  return &half_val_;
}

// -------------------------------------------------------------------

// TensorShapeProto_Dim

// required int64 size = 1;
inline bool TensorShapeProto_Dim::has_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TensorShapeProto_Dim::clear_size() {
  size_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TensorShapeProto_Dim::size() const {
  // @@protoc_insertion_point(field_get:oneflow.summary.TensorShapeProto.Dim.size)
  return size_;
}
inline void TensorShapeProto_Dim::set_size(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  size_ = value;
  // @@protoc_insertion_point(field_set:oneflow.summary.TensorShapeProto.Dim.size)
}

// optional string name = 2;
inline bool TensorShapeProto_Dim::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TensorShapeProto_Dim::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TensorShapeProto_Dim::name() const {
  // @@protoc_insertion_point(field_get:oneflow.summary.TensorShapeProto.Dim.name)
  return name_.GetNoArena();
}
inline void TensorShapeProto_Dim::set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:oneflow.summary.TensorShapeProto.Dim.name)
}
inline void TensorShapeProto_Dim::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:oneflow.summary.TensorShapeProto.Dim.name)
}
inline void TensorShapeProto_Dim::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:oneflow.summary.TensorShapeProto.Dim.name)
}
inline void TensorShapeProto_Dim::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:oneflow.summary.TensorShapeProto.Dim.name)
}
inline std::string* TensorShapeProto_Dim::mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:oneflow.summary.TensorShapeProto.Dim.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TensorShapeProto_Dim::release_name() {
  // @@protoc_insertion_point(field_release:oneflow.summary.TensorShapeProto.Dim.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TensorShapeProto_Dim::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:oneflow.summary.TensorShapeProto.Dim.name)
}

// -------------------------------------------------------------------

// TensorShapeProto

// repeated .oneflow.summary.TensorShapeProto.Dim dim = 2;
inline int TensorShapeProto::dim_size() const {
  return dim_.size();
}
inline void TensorShapeProto::clear_dim() {
  dim_.Clear();
}
inline ::oneflow::summary::TensorShapeProto_Dim* TensorShapeProto::mutable_dim(int index) {
  // @@protoc_insertion_point(field_mutable:oneflow.summary.TensorShapeProto.dim)
  return dim_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oneflow::summary::TensorShapeProto_Dim >*
TensorShapeProto::mutable_dim() {
  // @@protoc_insertion_point(field_mutable_list:oneflow.summary.TensorShapeProto.dim)
  return &dim_;
}
inline const ::oneflow::summary::TensorShapeProto_Dim& TensorShapeProto::dim(int index) const {
  // @@protoc_insertion_point(field_get:oneflow.summary.TensorShapeProto.dim)
  return dim_.Get(index);
}
inline ::oneflow::summary::TensorShapeProto_Dim* TensorShapeProto::add_dim() {
  // @@protoc_insertion_point(field_add:oneflow.summary.TensorShapeProto.dim)
  return dim_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oneflow::summary::TensorShapeProto_Dim >&
TensorShapeProto::dim() const {
  // @@protoc_insertion_point(field_list:oneflow.summary.TensorShapeProto.dim)
  return dim_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace summary
}  // namespace oneflow

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::oneflow::summary::TensorDataType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::oneflow::summary::TensorDataType>() {
  return ::oneflow::summary::TensorDataType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_oneflow_2fcore_2fsummary_2ftensor_2eproto
