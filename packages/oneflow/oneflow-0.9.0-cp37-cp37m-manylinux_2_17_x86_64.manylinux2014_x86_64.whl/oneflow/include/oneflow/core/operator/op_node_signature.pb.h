// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: oneflow/core/operator/op_node_signature.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_oneflow_2fcore_2foperator_2fop_5fnode_5fsignature_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_oneflow_2fcore_2foperator_2fop_5fnode_5fsignature_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "oneflow/core/job/sbp_parallel.pb.h"
#include "oneflow/core/job/local_parallel.pb.h"
#include "oneflow/core/register/blob_desc.pb.h"
#include "oneflow/core/job/parallel_signature.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_oneflow_2fcore_2foperator_2fop_5fnode_5fsignature_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_oneflow_2fcore_2foperator_2fop_5fnode_5fsignature_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_oneflow_2fcore_2foperator_2fop_5fnode_5fsignature_2eproto;
namespace oneflow {
class OpNodeSignature;
class OpNodeSignatureDefaultTypeInternal;
extern OpNodeSignatureDefaultTypeInternal _OpNodeSignature_default_instance_;
}  // namespace oneflow
PROTOBUF_NAMESPACE_OPEN
template<> ::oneflow::OpNodeSignature* Arena::CreateMaybeMessage<::oneflow::OpNodeSignature>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace oneflow {

// ===================================================================

class OpNodeSignature :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:oneflow.OpNodeSignature) */ {
 public:
  OpNodeSignature();
  virtual ~OpNodeSignature();

  OpNodeSignature(const OpNodeSignature& from);
  OpNodeSignature(OpNodeSignature&& from) noexcept
    : OpNodeSignature() {
    *this = ::std::move(from);
  }

  inline OpNodeSignature& operator=(const OpNodeSignature& from) {
    CopyFrom(from);
    return *this;
  }
  inline OpNodeSignature& operator=(OpNodeSignature&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OpNodeSignature& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OpNodeSignature* internal_default_instance() {
    return reinterpret_cast<const OpNodeSignature*>(
               &_OpNodeSignature_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(OpNodeSignature& a, OpNodeSignature& b) {
    a.Swap(&b);
  }
  inline void Swap(OpNodeSignature* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OpNodeSignature* New() const final {
    return CreateMaybeMessage<OpNodeSignature>(nullptr);
  }

  OpNodeSignature* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OpNodeSignature>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OpNodeSignature& from);
  void MergeFrom(const OpNodeSignature& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OpNodeSignature* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "oneflow.OpNodeSignature";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_oneflow_2fcore_2foperator_2fop_5fnode_5fsignature_2eproto);
    return ::descriptor_table_oneflow_2fcore_2foperator_2fop_5fnode_5fsignature_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSbpSignatureFieldNumber = 1,
    kLocalSignatureFieldNumber = 2,
    kLogicalBlobDescSignatureFieldNumber = 3,
    kParallelSignatureFieldNumber = 5,
  };
  // optional .oneflow.SbpSignature sbp_signature = 1;
  bool has_sbp_signature() const;
  void clear_sbp_signature();
  const ::oneflow::SbpSignature& sbp_signature() const;
  ::oneflow::SbpSignature* release_sbp_signature();
  ::oneflow::SbpSignature* mutable_sbp_signature();
  void set_allocated_sbp_signature(::oneflow::SbpSignature* sbp_signature);

  // optional .oneflow.LocalSignature local_signature = 2;
  bool has_local_signature() const;
  void clear_local_signature();
  const ::oneflow::LocalSignature& local_signature() const;
  ::oneflow::LocalSignature* release_local_signature();
  ::oneflow::LocalSignature* mutable_local_signature();
  void set_allocated_local_signature(::oneflow::LocalSignature* local_signature);

  // optional .oneflow.BlobDescSignature logical_blob_desc_signature = 3;
  bool has_logical_blob_desc_signature() const;
  void clear_logical_blob_desc_signature();
  const ::oneflow::BlobDescSignature& logical_blob_desc_signature() const;
  ::oneflow::BlobDescSignature* release_logical_blob_desc_signature();
  ::oneflow::BlobDescSignature* mutable_logical_blob_desc_signature();
  void set_allocated_logical_blob_desc_signature(::oneflow::BlobDescSignature* logical_blob_desc_signature);

  // optional .oneflow.ParallelSignature parallel_signature = 5;
  bool has_parallel_signature() const;
  void clear_parallel_signature();
  const ::oneflow::ParallelSignature& parallel_signature() const;
  ::oneflow::ParallelSignature* release_parallel_signature();
  ::oneflow::ParallelSignature* mutable_parallel_signature();
  void set_allocated_parallel_signature(::oneflow::ParallelSignature* parallel_signature);

  // @@protoc_insertion_point(class_scope:oneflow.OpNodeSignature)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::oneflow::SbpSignature* sbp_signature_;
  ::oneflow::LocalSignature* local_signature_;
  ::oneflow::BlobDescSignature* logical_blob_desc_signature_;
  ::oneflow::ParallelSignature* parallel_signature_;
  friend struct ::TableStruct_oneflow_2fcore_2foperator_2fop_5fnode_5fsignature_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// OpNodeSignature

// optional .oneflow.SbpSignature sbp_signature = 1;
inline bool OpNodeSignature::has_sbp_signature() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::oneflow::SbpSignature& OpNodeSignature::sbp_signature() const {
  const ::oneflow::SbpSignature* p = sbp_signature_;
  // @@protoc_insertion_point(field_get:oneflow.OpNodeSignature.sbp_signature)
  return p != nullptr ? *p : *reinterpret_cast<const ::oneflow::SbpSignature*>(
      &::oneflow::_SbpSignature_default_instance_);
}
inline ::oneflow::SbpSignature* OpNodeSignature::release_sbp_signature() {
  // @@protoc_insertion_point(field_release:oneflow.OpNodeSignature.sbp_signature)
  _has_bits_[0] &= ~0x00000001u;
  ::oneflow::SbpSignature* temp = sbp_signature_;
  sbp_signature_ = nullptr;
  return temp;
}
inline ::oneflow::SbpSignature* OpNodeSignature::mutable_sbp_signature() {
  _has_bits_[0] |= 0x00000001u;
  if (sbp_signature_ == nullptr) {
    auto* p = CreateMaybeMessage<::oneflow::SbpSignature>(GetArenaNoVirtual());
    sbp_signature_ = p;
  }
  // @@protoc_insertion_point(field_mutable:oneflow.OpNodeSignature.sbp_signature)
  return sbp_signature_;
}
inline void OpNodeSignature::set_allocated_sbp_signature(::oneflow::SbpSignature* sbp_signature) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(sbp_signature_);
  }
  if (sbp_signature) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      sbp_signature = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sbp_signature, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  sbp_signature_ = sbp_signature;
  // @@protoc_insertion_point(field_set_allocated:oneflow.OpNodeSignature.sbp_signature)
}

// optional .oneflow.LocalSignature local_signature = 2;
inline bool OpNodeSignature::has_local_signature() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::oneflow::LocalSignature& OpNodeSignature::local_signature() const {
  const ::oneflow::LocalSignature* p = local_signature_;
  // @@protoc_insertion_point(field_get:oneflow.OpNodeSignature.local_signature)
  return p != nullptr ? *p : *reinterpret_cast<const ::oneflow::LocalSignature*>(
      &::oneflow::_LocalSignature_default_instance_);
}
inline ::oneflow::LocalSignature* OpNodeSignature::release_local_signature() {
  // @@protoc_insertion_point(field_release:oneflow.OpNodeSignature.local_signature)
  _has_bits_[0] &= ~0x00000002u;
  ::oneflow::LocalSignature* temp = local_signature_;
  local_signature_ = nullptr;
  return temp;
}
inline ::oneflow::LocalSignature* OpNodeSignature::mutable_local_signature() {
  _has_bits_[0] |= 0x00000002u;
  if (local_signature_ == nullptr) {
    auto* p = CreateMaybeMessage<::oneflow::LocalSignature>(GetArenaNoVirtual());
    local_signature_ = p;
  }
  // @@protoc_insertion_point(field_mutable:oneflow.OpNodeSignature.local_signature)
  return local_signature_;
}
inline void OpNodeSignature::set_allocated_local_signature(::oneflow::LocalSignature* local_signature) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(local_signature_);
  }
  if (local_signature) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      local_signature = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, local_signature, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  local_signature_ = local_signature;
  // @@protoc_insertion_point(field_set_allocated:oneflow.OpNodeSignature.local_signature)
}

// optional .oneflow.BlobDescSignature logical_blob_desc_signature = 3;
inline bool OpNodeSignature::has_logical_blob_desc_signature() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline const ::oneflow::BlobDescSignature& OpNodeSignature::logical_blob_desc_signature() const {
  const ::oneflow::BlobDescSignature* p = logical_blob_desc_signature_;
  // @@protoc_insertion_point(field_get:oneflow.OpNodeSignature.logical_blob_desc_signature)
  return p != nullptr ? *p : *reinterpret_cast<const ::oneflow::BlobDescSignature*>(
      &::oneflow::_BlobDescSignature_default_instance_);
}
inline ::oneflow::BlobDescSignature* OpNodeSignature::release_logical_blob_desc_signature() {
  // @@protoc_insertion_point(field_release:oneflow.OpNodeSignature.logical_blob_desc_signature)
  _has_bits_[0] &= ~0x00000004u;
  ::oneflow::BlobDescSignature* temp = logical_blob_desc_signature_;
  logical_blob_desc_signature_ = nullptr;
  return temp;
}
inline ::oneflow::BlobDescSignature* OpNodeSignature::mutable_logical_blob_desc_signature() {
  _has_bits_[0] |= 0x00000004u;
  if (logical_blob_desc_signature_ == nullptr) {
    auto* p = CreateMaybeMessage<::oneflow::BlobDescSignature>(GetArenaNoVirtual());
    logical_blob_desc_signature_ = p;
  }
  // @@protoc_insertion_point(field_mutable:oneflow.OpNodeSignature.logical_blob_desc_signature)
  return logical_blob_desc_signature_;
}
inline void OpNodeSignature::set_allocated_logical_blob_desc_signature(::oneflow::BlobDescSignature* logical_blob_desc_signature) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(logical_blob_desc_signature_);
  }
  if (logical_blob_desc_signature) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      logical_blob_desc_signature = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, logical_blob_desc_signature, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  logical_blob_desc_signature_ = logical_blob_desc_signature;
  // @@protoc_insertion_point(field_set_allocated:oneflow.OpNodeSignature.logical_blob_desc_signature)
}

// optional .oneflow.ParallelSignature parallel_signature = 5;
inline bool OpNodeSignature::has_parallel_signature() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline const ::oneflow::ParallelSignature& OpNodeSignature::parallel_signature() const {
  const ::oneflow::ParallelSignature* p = parallel_signature_;
  // @@protoc_insertion_point(field_get:oneflow.OpNodeSignature.parallel_signature)
  return p != nullptr ? *p : *reinterpret_cast<const ::oneflow::ParallelSignature*>(
      &::oneflow::_ParallelSignature_default_instance_);
}
inline ::oneflow::ParallelSignature* OpNodeSignature::release_parallel_signature() {
  // @@protoc_insertion_point(field_release:oneflow.OpNodeSignature.parallel_signature)
  _has_bits_[0] &= ~0x00000008u;
  ::oneflow::ParallelSignature* temp = parallel_signature_;
  parallel_signature_ = nullptr;
  return temp;
}
inline ::oneflow::ParallelSignature* OpNodeSignature::mutable_parallel_signature() {
  _has_bits_[0] |= 0x00000008u;
  if (parallel_signature_ == nullptr) {
    auto* p = CreateMaybeMessage<::oneflow::ParallelSignature>(GetArenaNoVirtual());
    parallel_signature_ = p;
  }
  // @@protoc_insertion_point(field_mutable:oneflow.OpNodeSignature.parallel_signature)
  return parallel_signature_;
}
inline void OpNodeSignature::set_allocated_parallel_signature(::oneflow::ParallelSignature* parallel_signature) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(parallel_signature_);
  }
  if (parallel_signature) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      parallel_signature = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, parallel_signature, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  parallel_signature_ = parallel_signature;
  // @@protoc_insertion_point(field_set_allocated:oneflow.OpNodeSignature.parallel_signature)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace oneflow

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_oneflow_2fcore_2foperator_2fop_5fnode_5fsignature_2eproto
