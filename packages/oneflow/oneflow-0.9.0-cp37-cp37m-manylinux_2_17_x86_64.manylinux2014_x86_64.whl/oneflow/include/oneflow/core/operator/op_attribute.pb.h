// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: oneflow/core/operator/op_attribute.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_oneflow_2fcore_2foperator_2fop_5fattribute_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_oneflow_2fcore_2foperator_2fop_5fattribute_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "oneflow/core/register/logical_blob_id.pb.h"
#include "oneflow/core/register/blob_desc.pb.h"
#include "oneflow/core/operator/op_conf.pb.h"
#include "oneflow/core/operator/arg_modifier_signature.pb.h"
#include "oneflow/core/job/sbp_parallel.pb.h"
#include "oneflow/core/job/local_parallel.pb.h"
#include "oneflow/core/job/blob_lifetime_signature.pb.h"
#include "oneflow/core/job/parallel_signature.pb.h"
#include "oneflow/core/job/parallel_conf_signature.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_oneflow_2fcore_2foperator_2fop_5fattribute_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_oneflow_2fcore_2foperator_2fop_5fattribute_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_oneflow_2fcore_2foperator_2fop_5fattribute_2eproto;
namespace oneflow {
class OpAttribute;
class OpAttributeDefaultTypeInternal;
extern OpAttributeDefaultTypeInternal _OpAttribute_default_instance_;
class OpAttributeList;
class OpAttributeListDefaultTypeInternal;
extern OpAttributeListDefaultTypeInternal _OpAttributeList_default_instance_;
}  // namespace oneflow
PROTOBUF_NAMESPACE_OPEN
template<> ::oneflow::OpAttribute* Arena::CreateMaybeMessage<::oneflow::OpAttribute>(Arena*);
template<> ::oneflow::OpAttributeList* Arena::CreateMaybeMessage<::oneflow::OpAttributeList>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace oneflow {

// ===================================================================

class OpAttribute :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:oneflow.OpAttribute) */ {
 public:
  OpAttribute();
  virtual ~OpAttribute();

  OpAttribute(const OpAttribute& from);
  OpAttribute(OpAttribute&& from) noexcept
    : OpAttribute() {
    *this = ::std::move(from);
  }

  inline OpAttribute& operator=(const OpAttribute& from) {
    CopyFrom(from);
    return *this;
  }
  inline OpAttribute& operator=(OpAttribute&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OpAttribute& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OpAttribute* internal_default_instance() {
    return reinterpret_cast<const OpAttribute*>(
               &_OpAttribute_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(OpAttribute& a, OpAttribute& b) {
    a.Swap(&b);
  }
  inline void Swap(OpAttribute* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OpAttribute* New() const final {
    return CreateMaybeMessage<OpAttribute>(nullptr);
  }

  OpAttribute* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OpAttribute>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OpAttribute& from);
  void MergeFrom(const OpAttribute& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OpAttribute* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "oneflow.OpAttribute";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_oneflow_2fcore_2foperator_2fop_5fattribute_2eproto);
    return ::descriptor_table_oneflow_2fcore_2foperator_2fop_5fattribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInputBnsFieldNumber = 1,
    kOutputBnsFieldNumber = 2,
    kTmpBnsFieldNumber = 3,
    kOpConfFieldNumber = 50,
    kArgSignatureFieldNumber = 100,
    kArgModifierSignatureFieldNumber = 101,
    kBlobLastUsedSignatureFieldNumber = 102,
    kBlobBackwardUsedSignatureFieldNumber = 103,
    kSbpSignatureFieldNumber = 104,
    kLocalSignatureFieldNumber = 105,
    kLogicalBlobDescSignatureFieldNumber = 106,
    kParallelSignatureFieldNumber = 108,
    kParallelConfSignatureFieldNumber = 109,
    kNdSbpSignatureFieldNumber = 110,
  };
  // repeated string input_bns = 1;
  int input_bns_size() const;
  void clear_input_bns();
  const std::string& input_bns(int index) const;
  std::string* mutable_input_bns(int index);
  void set_input_bns(int index, const std::string& value);
  void set_input_bns(int index, std::string&& value);
  void set_input_bns(int index, const char* value);
  void set_input_bns(int index, const char* value, size_t size);
  std::string* add_input_bns();
  void add_input_bns(const std::string& value);
  void add_input_bns(std::string&& value);
  void add_input_bns(const char* value);
  void add_input_bns(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& input_bns() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_input_bns();

  // repeated string output_bns = 2;
  int output_bns_size() const;
  void clear_output_bns();
  const std::string& output_bns(int index) const;
  std::string* mutable_output_bns(int index);
  void set_output_bns(int index, const std::string& value);
  void set_output_bns(int index, std::string&& value);
  void set_output_bns(int index, const char* value);
  void set_output_bns(int index, const char* value, size_t size);
  std::string* add_output_bns();
  void add_output_bns(const std::string& value);
  void add_output_bns(std::string&& value);
  void add_output_bns(const char* value);
  void add_output_bns(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& output_bns() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_output_bns();

  // repeated string tmp_bns = 3;
  int tmp_bns_size() const;
  void clear_tmp_bns();
  const std::string& tmp_bns(int index) const;
  std::string* mutable_tmp_bns(int index);
  void set_tmp_bns(int index, const std::string& value);
  void set_tmp_bns(int index, std::string&& value);
  void set_tmp_bns(int index, const char* value);
  void set_tmp_bns(int index, const char* value, size_t size);
  std::string* add_tmp_bns();
  void add_tmp_bns(const std::string& value);
  void add_tmp_bns(std::string&& value);
  void add_tmp_bns(const char* value);
  void add_tmp_bns(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& tmp_bns() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_tmp_bns();

  // required .oneflow.OperatorConf op_conf = 50;
  bool has_op_conf() const;
  void clear_op_conf();
  const ::oneflow::OperatorConf& op_conf() const;
  ::oneflow::OperatorConf* release_op_conf();
  ::oneflow::OperatorConf* mutable_op_conf();
  void set_allocated_op_conf(::oneflow::OperatorConf* op_conf);

  // required .oneflow.ArgSignature arg_signature = 100;
  bool has_arg_signature() const;
  void clear_arg_signature();
  const ::oneflow::ArgSignature& arg_signature() const;
  ::oneflow::ArgSignature* release_arg_signature();
  ::oneflow::ArgSignature* mutable_arg_signature();
  void set_allocated_arg_signature(::oneflow::ArgSignature* arg_signature);

  // required .oneflow.ArgModifierSignature arg_modifier_signature = 101;
  bool has_arg_modifier_signature() const;
  void clear_arg_modifier_signature();
  const ::oneflow::ArgModifierSignature& arg_modifier_signature() const;
  ::oneflow::ArgModifierSignature* release_arg_modifier_signature();
  ::oneflow::ArgModifierSignature* mutable_arg_modifier_signature();
  void set_allocated_arg_modifier_signature(::oneflow::ArgModifierSignature* arg_modifier_signature);

  // optional .oneflow.BlobLastUsedSignature blob_last_used_signature = 102;
  bool has_blob_last_used_signature() const;
  void clear_blob_last_used_signature();
  const ::oneflow::BlobLastUsedSignature& blob_last_used_signature() const;
  ::oneflow::BlobLastUsedSignature* release_blob_last_used_signature();
  ::oneflow::BlobLastUsedSignature* mutable_blob_last_used_signature();
  void set_allocated_blob_last_used_signature(::oneflow::BlobLastUsedSignature* blob_last_used_signature);

  // optional .oneflow.BlobBackwardUsedSignature blob_backward_used_signature = 103;
  bool has_blob_backward_used_signature() const;
  void clear_blob_backward_used_signature();
  const ::oneflow::BlobBackwardUsedSignature& blob_backward_used_signature() const;
  ::oneflow::BlobBackwardUsedSignature* release_blob_backward_used_signature();
  ::oneflow::BlobBackwardUsedSignature* mutable_blob_backward_used_signature();
  void set_allocated_blob_backward_used_signature(::oneflow::BlobBackwardUsedSignature* blob_backward_used_signature);

  // optional .oneflow.SbpSignature sbp_signature = 104;
  bool has_sbp_signature() const;
  void clear_sbp_signature();
  const ::oneflow::SbpSignature& sbp_signature() const;
  ::oneflow::SbpSignature* release_sbp_signature();
  ::oneflow::SbpSignature* mutable_sbp_signature();
  void set_allocated_sbp_signature(::oneflow::SbpSignature* sbp_signature);

  // optional .oneflow.LocalSignature local_signature = 105;
  bool has_local_signature() const;
  void clear_local_signature();
  const ::oneflow::LocalSignature& local_signature() const;
  ::oneflow::LocalSignature* release_local_signature();
  ::oneflow::LocalSignature* mutable_local_signature();
  void set_allocated_local_signature(::oneflow::LocalSignature* local_signature);

  // optional .oneflow.BlobDescSignature logical_blob_desc_signature = 106;
  bool has_logical_blob_desc_signature() const;
  void clear_logical_blob_desc_signature();
  const ::oneflow::BlobDescSignature& logical_blob_desc_signature() const;
  ::oneflow::BlobDescSignature* release_logical_blob_desc_signature();
  ::oneflow::BlobDescSignature* mutable_logical_blob_desc_signature();
  void set_allocated_logical_blob_desc_signature(::oneflow::BlobDescSignature* logical_blob_desc_signature);

  // optional .oneflow.ParallelSignature parallel_signature = 108;
  bool has_parallel_signature() const;
  void clear_parallel_signature();
  const ::oneflow::ParallelSignature& parallel_signature() const;
  ::oneflow::ParallelSignature* release_parallel_signature();
  ::oneflow::ParallelSignature* mutable_parallel_signature();
  void set_allocated_parallel_signature(::oneflow::ParallelSignature* parallel_signature);

  // optional .oneflow.ParallelConfSignature parallel_conf_signature = 109;
  bool has_parallel_conf_signature() const;
  void clear_parallel_conf_signature();
  const ::oneflow::ParallelConfSignature& parallel_conf_signature() const;
  ::oneflow::ParallelConfSignature* release_parallel_conf_signature();
  ::oneflow::ParallelConfSignature* mutable_parallel_conf_signature();
  void set_allocated_parallel_conf_signature(::oneflow::ParallelConfSignature* parallel_conf_signature);

  // optional .oneflow.NdSbpSignature nd_sbp_signature = 110;
  bool has_nd_sbp_signature() const;
  void clear_nd_sbp_signature();
  const ::oneflow::NdSbpSignature& nd_sbp_signature() const;
  ::oneflow::NdSbpSignature* release_nd_sbp_signature();
  ::oneflow::NdSbpSignature* mutable_nd_sbp_signature();
  void set_allocated_nd_sbp_signature(::oneflow::NdSbpSignature* nd_sbp_signature);

  // @@protoc_insertion_point(class_scope:oneflow.OpAttribute)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> input_bns_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> output_bns_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> tmp_bns_;
  ::oneflow::OperatorConf* op_conf_;
  ::oneflow::ArgSignature* arg_signature_;
  ::oneflow::ArgModifierSignature* arg_modifier_signature_;
  ::oneflow::BlobLastUsedSignature* blob_last_used_signature_;
  ::oneflow::BlobBackwardUsedSignature* blob_backward_used_signature_;
  ::oneflow::SbpSignature* sbp_signature_;
  ::oneflow::LocalSignature* local_signature_;
  ::oneflow::BlobDescSignature* logical_blob_desc_signature_;
  ::oneflow::ParallelSignature* parallel_signature_;
  ::oneflow::ParallelConfSignature* parallel_conf_signature_;
  ::oneflow::NdSbpSignature* nd_sbp_signature_;
  friend struct ::TableStruct_oneflow_2fcore_2foperator_2fop_5fattribute_2eproto;
};
// -------------------------------------------------------------------

class OpAttributeList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:oneflow.OpAttributeList) */ {
 public:
  OpAttributeList();
  virtual ~OpAttributeList();

  OpAttributeList(const OpAttributeList& from);
  OpAttributeList(OpAttributeList&& from) noexcept
    : OpAttributeList() {
    *this = ::std::move(from);
  }

  inline OpAttributeList& operator=(const OpAttributeList& from) {
    CopyFrom(from);
    return *this;
  }
  inline OpAttributeList& operator=(OpAttributeList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OpAttributeList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OpAttributeList* internal_default_instance() {
    return reinterpret_cast<const OpAttributeList*>(
               &_OpAttributeList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(OpAttributeList& a, OpAttributeList& b) {
    a.Swap(&b);
  }
  inline void Swap(OpAttributeList* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OpAttributeList* New() const final {
    return CreateMaybeMessage<OpAttributeList>(nullptr);
  }

  OpAttributeList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OpAttributeList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OpAttributeList& from);
  void MergeFrom(const OpAttributeList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OpAttributeList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "oneflow.OpAttributeList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_oneflow_2fcore_2foperator_2fop_5fattribute_2eproto);
    return ::descriptor_table_oneflow_2fcore_2foperator_2fop_5fattribute_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOpAttributeFieldNumber = 1,
  };
  // repeated .oneflow.OpAttribute op_attribute = 1;
  int op_attribute_size() const;
  void clear_op_attribute();
  ::oneflow::OpAttribute* mutable_op_attribute(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oneflow::OpAttribute >*
      mutable_op_attribute();
  const ::oneflow::OpAttribute& op_attribute(int index) const;
  ::oneflow::OpAttribute* add_op_attribute();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oneflow::OpAttribute >&
      op_attribute() const;

  // @@protoc_insertion_point(class_scope:oneflow.OpAttributeList)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oneflow::OpAttribute > op_attribute_;
  friend struct ::TableStruct_oneflow_2fcore_2foperator_2fop_5fattribute_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// OpAttribute

// repeated string input_bns = 1;
inline int OpAttribute::input_bns_size() const {
  return input_bns_.size();
}
inline void OpAttribute::clear_input_bns() {
  input_bns_.Clear();
}
inline const std::string& OpAttribute::input_bns(int index) const {
  // @@protoc_insertion_point(field_get:oneflow.OpAttribute.input_bns)
  return input_bns_.Get(index);
}
inline std::string* OpAttribute::mutable_input_bns(int index) {
  // @@protoc_insertion_point(field_mutable:oneflow.OpAttribute.input_bns)
  return input_bns_.Mutable(index);
}
inline void OpAttribute::set_input_bns(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:oneflow.OpAttribute.input_bns)
  input_bns_.Mutable(index)->assign(value);
}
inline void OpAttribute::set_input_bns(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:oneflow.OpAttribute.input_bns)
  input_bns_.Mutable(index)->assign(std::move(value));
}
inline void OpAttribute::set_input_bns(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  input_bns_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:oneflow.OpAttribute.input_bns)
}
inline void OpAttribute::set_input_bns(int index, const char* value, size_t size) {
  input_bns_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:oneflow.OpAttribute.input_bns)
}
inline std::string* OpAttribute::add_input_bns() {
  // @@protoc_insertion_point(field_add_mutable:oneflow.OpAttribute.input_bns)
  return input_bns_.Add();
}
inline void OpAttribute::add_input_bns(const std::string& value) {
  input_bns_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:oneflow.OpAttribute.input_bns)
}
inline void OpAttribute::add_input_bns(std::string&& value) {
  input_bns_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:oneflow.OpAttribute.input_bns)
}
inline void OpAttribute::add_input_bns(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  input_bns_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:oneflow.OpAttribute.input_bns)
}
inline void OpAttribute::add_input_bns(const char* value, size_t size) {
  input_bns_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:oneflow.OpAttribute.input_bns)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
OpAttribute::input_bns() const {
  // @@protoc_insertion_point(field_list:oneflow.OpAttribute.input_bns)
  return input_bns_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
OpAttribute::mutable_input_bns() {
  // @@protoc_insertion_point(field_mutable_list:oneflow.OpAttribute.input_bns)
  return &input_bns_;
}

// repeated string output_bns = 2;
inline int OpAttribute::output_bns_size() const {
  return output_bns_.size();
}
inline void OpAttribute::clear_output_bns() {
  output_bns_.Clear();
}
inline const std::string& OpAttribute::output_bns(int index) const {
  // @@protoc_insertion_point(field_get:oneflow.OpAttribute.output_bns)
  return output_bns_.Get(index);
}
inline std::string* OpAttribute::mutable_output_bns(int index) {
  // @@protoc_insertion_point(field_mutable:oneflow.OpAttribute.output_bns)
  return output_bns_.Mutable(index);
}
inline void OpAttribute::set_output_bns(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:oneflow.OpAttribute.output_bns)
  output_bns_.Mutable(index)->assign(value);
}
inline void OpAttribute::set_output_bns(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:oneflow.OpAttribute.output_bns)
  output_bns_.Mutable(index)->assign(std::move(value));
}
inline void OpAttribute::set_output_bns(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  output_bns_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:oneflow.OpAttribute.output_bns)
}
inline void OpAttribute::set_output_bns(int index, const char* value, size_t size) {
  output_bns_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:oneflow.OpAttribute.output_bns)
}
inline std::string* OpAttribute::add_output_bns() {
  // @@protoc_insertion_point(field_add_mutable:oneflow.OpAttribute.output_bns)
  return output_bns_.Add();
}
inline void OpAttribute::add_output_bns(const std::string& value) {
  output_bns_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:oneflow.OpAttribute.output_bns)
}
inline void OpAttribute::add_output_bns(std::string&& value) {
  output_bns_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:oneflow.OpAttribute.output_bns)
}
inline void OpAttribute::add_output_bns(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  output_bns_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:oneflow.OpAttribute.output_bns)
}
inline void OpAttribute::add_output_bns(const char* value, size_t size) {
  output_bns_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:oneflow.OpAttribute.output_bns)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
OpAttribute::output_bns() const {
  // @@protoc_insertion_point(field_list:oneflow.OpAttribute.output_bns)
  return output_bns_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
OpAttribute::mutable_output_bns() {
  // @@protoc_insertion_point(field_mutable_list:oneflow.OpAttribute.output_bns)
  return &output_bns_;
}

// repeated string tmp_bns = 3;
inline int OpAttribute::tmp_bns_size() const {
  return tmp_bns_.size();
}
inline void OpAttribute::clear_tmp_bns() {
  tmp_bns_.Clear();
}
inline const std::string& OpAttribute::tmp_bns(int index) const {
  // @@protoc_insertion_point(field_get:oneflow.OpAttribute.tmp_bns)
  return tmp_bns_.Get(index);
}
inline std::string* OpAttribute::mutable_tmp_bns(int index) {
  // @@protoc_insertion_point(field_mutable:oneflow.OpAttribute.tmp_bns)
  return tmp_bns_.Mutable(index);
}
inline void OpAttribute::set_tmp_bns(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:oneflow.OpAttribute.tmp_bns)
  tmp_bns_.Mutable(index)->assign(value);
}
inline void OpAttribute::set_tmp_bns(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:oneflow.OpAttribute.tmp_bns)
  tmp_bns_.Mutable(index)->assign(std::move(value));
}
inline void OpAttribute::set_tmp_bns(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tmp_bns_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:oneflow.OpAttribute.tmp_bns)
}
inline void OpAttribute::set_tmp_bns(int index, const char* value, size_t size) {
  tmp_bns_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:oneflow.OpAttribute.tmp_bns)
}
inline std::string* OpAttribute::add_tmp_bns() {
  // @@protoc_insertion_point(field_add_mutable:oneflow.OpAttribute.tmp_bns)
  return tmp_bns_.Add();
}
inline void OpAttribute::add_tmp_bns(const std::string& value) {
  tmp_bns_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:oneflow.OpAttribute.tmp_bns)
}
inline void OpAttribute::add_tmp_bns(std::string&& value) {
  tmp_bns_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:oneflow.OpAttribute.tmp_bns)
}
inline void OpAttribute::add_tmp_bns(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tmp_bns_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:oneflow.OpAttribute.tmp_bns)
}
inline void OpAttribute::add_tmp_bns(const char* value, size_t size) {
  tmp_bns_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:oneflow.OpAttribute.tmp_bns)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
OpAttribute::tmp_bns() const {
  // @@protoc_insertion_point(field_list:oneflow.OpAttribute.tmp_bns)
  return tmp_bns_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
OpAttribute::mutable_tmp_bns() {
  // @@protoc_insertion_point(field_mutable_list:oneflow.OpAttribute.tmp_bns)
  return &tmp_bns_;
}

// required .oneflow.OperatorConf op_conf = 50;
inline bool OpAttribute::has_op_conf() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::oneflow::OperatorConf& OpAttribute::op_conf() const {
  const ::oneflow::OperatorConf* p = op_conf_;
  // @@protoc_insertion_point(field_get:oneflow.OpAttribute.op_conf)
  return p != nullptr ? *p : *reinterpret_cast<const ::oneflow::OperatorConf*>(
      &::oneflow::_OperatorConf_default_instance_);
}
inline ::oneflow::OperatorConf* OpAttribute::release_op_conf() {
  // @@protoc_insertion_point(field_release:oneflow.OpAttribute.op_conf)
  _has_bits_[0] &= ~0x00000001u;
  ::oneflow::OperatorConf* temp = op_conf_;
  op_conf_ = nullptr;
  return temp;
}
inline ::oneflow::OperatorConf* OpAttribute::mutable_op_conf() {
  _has_bits_[0] |= 0x00000001u;
  if (op_conf_ == nullptr) {
    auto* p = CreateMaybeMessage<::oneflow::OperatorConf>(GetArenaNoVirtual());
    op_conf_ = p;
  }
  // @@protoc_insertion_point(field_mutable:oneflow.OpAttribute.op_conf)
  return op_conf_;
}
inline void OpAttribute::set_allocated_op_conf(::oneflow::OperatorConf* op_conf) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(op_conf_);
  }
  if (op_conf) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      op_conf = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, op_conf, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  op_conf_ = op_conf;
  // @@protoc_insertion_point(field_set_allocated:oneflow.OpAttribute.op_conf)
}

// required .oneflow.ArgSignature arg_signature = 100;
inline bool OpAttribute::has_arg_signature() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::oneflow::ArgSignature& OpAttribute::arg_signature() const {
  const ::oneflow::ArgSignature* p = arg_signature_;
  // @@protoc_insertion_point(field_get:oneflow.OpAttribute.arg_signature)
  return p != nullptr ? *p : *reinterpret_cast<const ::oneflow::ArgSignature*>(
      &::oneflow::_ArgSignature_default_instance_);
}
inline ::oneflow::ArgSignature* OpAttribute::release_arg_signature() {
  // @@protoc_insertion_point(field_release:oneflow.OpAttribute.arg_signature)
  _has_bits_[0] &= ~0x00000002u;
  ::oneflow::ArgSignature* temp = arg_signature_;
  arg_signature_ = nullptr;
  return temp;
}
inline ::oneflow::ArgSignature* OpAttribute::mutable_arg_signature() {
  _has_bits_[0] |= 0x00000002u;
  if (arg_signature_ == nullptr) {
    auto* p = CreateMaybeMessage<::oneflow::ArgSignature>(GetArenaNoVirtual());
    arg_signature_ = p;
  }
  // @@protoc_insertion_point(field_mutable:oneflow.OpAttribute.arg_signature)
  return arg_signature_;
}
inline void OpAttribute::set_allocated_arg_signature(::oneflow::ArgSignature* arg_signature) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(arg_signature_);
  }
  if (arg_signature) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      arg_signature = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, arg_signature, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  arg_signature_ = arg_signature;
  // @@protoc_insertion_point(field_set_allocated:oneflow.OpAttribute.arg_signature)
}

// required .oneflow.ArgModifierSignature arg_modifier_signature = 101;
inline bool OpAttribute::has_arg_modifier_signature() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline const ::oneflow::ArgModifierSignature& OpAttribute::arg_modifier_signature() const {
  const ::oneflow::ArgModifierSignature* p = arg_modifier_signature_;
  // @@protoc_insertion_point(field_get:oneflow.OpAttribute.arg_modifier_signature)
  return p != nullptr ? *p : *reinterpret_cast<const ::oneflow::ArgModifierSignature*>(
      &::oneflow::_ArgModifierSignature_default_instance_);
}
inline ::oneflow::ArgModifierSignature* OpAttribute::release_arg_modifier_signature() {
  // @@protoc_insertion_point(field_release:oneflow.OpAttribute.arg_modifier_signature)
  _has_bits_[0] &= ~0x00000004u;
  ::oneflow::ArgModifierSignature* temp = arg_modifier_signature_;
  arg_modifier_signature_ = nullptr;
  return temp;
}
inline ::oneflow::ArgModifierSignature* OpAttribute::mutable_arg_modifier_signature() {
  _has_bits_[0] |= 0x00000004u;
  if (arg_modifier_signature_ == nullptr) {
    auto* p = CreateMaybeMessage<::oneflow::ArgModifierSignature>(GetArenaNoVirtual());
    arg_modifier_signature_ = p;
  }
  // @@protoc_insertion_point(field_mutable:oneflow.OpAttribute.arg_modifier_signature)
  return arg_modifier_signature_;
}
inline void OpAttribute::set_allocated_arg_modifier_signature(::oneflow::ArgModifierSignature* arg_modifier_signature) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(arg_modifier_signature_);
  }
  if (arg_modifier_signature) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      arg_modifier_signature = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, arg_modifier_signature, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  arg_modifier_signature_ = arg_modifier_signature;
  // @@protoc_insertion_point(field_set_allocated:oneflow.OpAttribute.arg_modifier_signature)
}

// optional .oneflow.BlobLastUsedSignature blob_last_used_signature = 102;
inline bool OpAttribute::has_blob_last_used_signature() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline const ::oneflow::BlobLastUsedSignature& OpAttribute::blob_last_used_signature() const {
  const ::oneflow::BlobLastUsedSignature* p = blob_last_used_signature_;
  // @@protoc_insertion_point(field_get:oneflow.OpAttribute.blob_last_used_signature)
  return p != nullptr ? *p : *reinterpret_cast<const ::oneflow::BlobLastUsedSignature*>(
      &::oneflow::_BlobLastUsedSignature_default_instance_);
}
inline ::oneflow::BlobLastUsedSignature* OpAttribute::release_blob_last_used_signature() {
  // @@protoc_insertion_point(field_release:oneflow.OpAttribute.blob_last_used_signature)
  _has_bits_[0] &= ~0x00000008u;
  ::oneflow::BlobLastUsedSignature* temp = blob_last_used_signature_;
  blob_last_used_signature_ = nullptr;
  return temp;
}
inline ::oneflow::BlobLastUsedSignature* OpAttribute::mutable_blob_last_used_signature() {
  _has_bits_[0] |= 0x00000008u;
  if (blob_last_used_signature_ == nullptr) {
    auto* p = CreateMaybeMessage<::oneflow::BlobLastUsedSignature>(GetArenaNoVirtual());
    blob_last_used_signature_ = p;
  }
  // @@protoc_insertion_point(field_mutable:oneflow.OpAttribute.blob_last_used_signature)
  return blob_last_used_signature_;
}
inline void OpAttribute::set_allocated_blob_last_used_signature(::oneflow::BlobLastUsedSignature* blob_last_used_signature) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(blob_last_used_signature_);
  }
  if (blob_last_used_signature) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      blob_last_used_signature = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, blob_last_used_signature, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  blob_last_used_signature_ = blob_last_used_signature;
  // @@protoc_insertion_point(field_set_allocated:oneflow.OpAttribute.blob_last_used_signature)
}

// optional .oneflow.BlobBackwardUsedSignature blob_backward_used_signature = 103;
inline bool OpAttribute::has_blob_backward_used_signature() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline const ::oneflow::BlobBackwardUsedSignature& OpAttribute::blob_backward_used_signature() const {
  const ::oneflow::BlobBackwardUsedSignature* p = blob_backward_used_signature_;
  // @@protoc_insertion_point(field_get:oneflow.OpAttribute.blob_backward_used_signature)
  return p != nullptr ? *p : *reinterpret_cast<const ::oneflow::BlobBackwardUsedSignature*>(
      &::oneflow::_BlobBackwardUsedSignature_default_instance_);
}
inline ::oneflow::BlobBackwardUsedSignature* OpAttribute::release_blob_backward_used_signature() {
  // @@protoc_insertion_point(field_release:oneflow.OpAttribute.blob_backward_used_signature)
  _has_bits_[0] &= ~0x00000010u;
  ::oneflow::BlobBackwardUsedSignature* temp = blob_backward_used_signature_;
  blob_backward_used_signature_ = nullptr;
  return temp;
}
inline ::oneflow::BlobBackwardUsedSignature* OpAttribute::mutable_blob_backward_used_signature() {
  _has_bits_[0] |= 0x00000010u;
  if (blob_backward_used_signature_ == nullptr) {
    auto* p = CreateMaybeMessage<::oneflow::BlobBackwardUsedSignature>(GetArenaNoVirtual());
    blob_backward_used_signature_ = p;
  }
  // @@protoc_insertion_point(field_mutable:oneflow.OpAttribute.blob_backward_used_signature)
  return blob_backward_used_signature_;
}
inline void OpAttribute::set_allocated_blob_backward_used_signature(::oneflow::BlobBackwardUsedSignature* blob_backward_used_signature) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(blob_backward_used_signature_);
  }
  if (blob_backward_used_signature) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      blob_backward_used_signature = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, blob_backward_used_signature, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  blob_backward_used_signature_ = blob_backward_used_signature;
  // @@protoc_insertion_point(field_set_allocated:oneflow.OpAttribute.blob_backward_used_signature)
}

// optional .oneflow.SbpSignature sbp_signature = 104;
inline bool OpAttribute::has_sbp_signature() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline const ::oneflow::SbpSignature& OpAttribute::sbp_signature() const {
  const ::oneflow::SbpSignature* p = sbp_signature_;
  // @@protoc_insertion_point(field_get:oneflow.OpAttribute.sbp_signature)
  return p != nullptr ? *p : *reinterpret_cast<const ::oneflow::SbpSignature*>(
      &::oneflow::_SbpSignature_default_instance_);
}
inline ::oneflow::SbpSignature* OpAttribute::release_sbp_signature() {
  // @@protoc_insertion_point(field_release:oneflow.OpAttribute.sbp_signature)
  _has_bits_[0] &= ~0x00000020u;
  ::oneflow::SbpSignature* temp = sbp_signature_;
  sbp_signature_ = nullptr;
  return temp;
}
inline ::oneflow::SbpSignature* OpAttribute::mutable_sbp_signature() {
  _has_bits_[0] |= 0x00000020u;
  if (sbp_signature_ == nullptr) {
    auto* p = CreateMaybeMessage<::oneflow::SbpSignature>(GetArenaNoVirtual());
    sbp_signature_ = p;
  }
  // @@protoc_insertion_point(field_mutable:oneflow.OpAttribute.sbp_signature)
  return sbp_signature_;
}
inline void OpAttribute::set_allocated_sbp_signature(::oneflow::SbpSignature* sbp_signature) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(sbp_signature_);
  }
  if (sbp_signature) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      sbp_signature = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sbp_signature, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  sbp_signature_ = sbp_signature;
  // @@protoc_insertion_point(field_set_allocated:oneflow.OpAttribute.sbp_signature)
}

// optional .oneflow.LocalSignature local_signature = 105;
inline bool OpAttribute::has_local_signature() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline const ::oneflow::LocalSignature& OpAttribute::local_signature() const {
  const ::oneflow::LocalSignature* p = local_signature_;
  // @@protoc_insertion_point(field_get:oneflow.OpAttribute.local_signature)
  return p != nullptr ? *p : *reinterpret_cast<const ::oneflow::LocalSignature*>(
      &::oneflow::_LocalSignature_default_instance_);
}
inline ::oneflow::LocalSignature* OpAttribute::release_local_signature() {
  // @@protoc_insertion_point(field_release:oneflow.OpAttribute.local_signature)
  _has_bits_[0] &= ~0x00000040u;
  ::oneflow::LocalSignature* temp = local_signature_;
  local_signature_ = nullptr;
  return temp;
}
inline ::oneflow::LocalSignature* OpAttribute::mutable_local_signature() {
  _has_bits_[0] |= 0x00000040u;
  if (local_signature_ == nullptr) {
    auto* p = CreateMaybeMessage<::oneflow::LocalSignature>(GetArenaNoVirtual());
    local_signature_ = p;
  }
  // @@protoc_insertion_point(field_mutable:oneflow.OpAttribute.local_signature)
  return local_signature_;
}
inline void OpAttribute::set_allocated_local_signature(::oneflow::LocalSignature* local_signature) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(local_signature_);
  }
  if (local_signature) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      local_signature = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, local_signature, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  local_signature_ = local_signature;
  // @@protoc_insertion_point(field_set_allocated:oneflow.OpAttribute.local_signature)
}

// optional .oneflow.BlobDescSignature logical_blob_desc_signature = 106;
inline bool OpAttribute::has_logical_blob_desc_signature() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline const ::oneflow::BlobDescSignature& OpAttribute::logical_blob_desc_signature() const {
  const ::oneflow::BlobDescSignature* p = logical_blob_desc_signature_;
  // @@protoc_insertion_point(field_get:oneflow.OpAttribute.logical_blob_desc_signature)
  return p != nullptr ? *p : *reinterpret_cast<const ::oneflow::BlobDescSignature*>(
      &::oneflow::_BlobDescSignature_default_instance_);
}
inline ::oneflow::BlobDescSignature* OpAttribute::release_logical_blob_desc_signature() {
  // @@protoc_insertion_point(field_release:oneflow.OpAttribute.logical_blob_desc_signature)
  _has_bits_[0] &= ~0x00000080u;
  ::oneflow::BlobDescSignature* temp = logical_blob_desc_signature_;
  logical_blob_desc_signature_ = nullptr;
  return temp;
}
inline ::oneflow::BlobDescSignature* OpAttribute::mutable_logical_blob_desc_signature() {
  _has_bits_[0] |= 0x00000080u;
  if (logical_blob_desc_signature_ == nullptr) {
    auto* p = CreateMaybeMessage<::oneflow::BlobDescSignature>(GetArenaNoVirtual());
    logical_blob_desc_signature_ = p;
  }
  // @@protoc_insertion_point(field_mutable:oneflow.OpAttribute.logical_blob_desc_signature)
  return logical_blob_desc_signature_;
}
inline void OpAttribute::set_allocated_logical_blob_desc_signature(::oneflow::BlobDescSignature* logical_blob_desc_signature) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(logical_blob_desc_signature_);
  }
  if (logical_blob_desc_signature) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      logical_blob_desc_signature = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, logical_blob_desc_signature, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  logical_blob_desc_signature_ = logical_blob_desc_signature;
  // @@protoc_insertion_point(field_set_allocated:oneflow.OpAttribute.logical_blob_desc_signature)
}

// optional .oneflow.ParallelSignature parallel_signature = 108;
inline bool OpAttribute::has_parallel_signature() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline const ::oneflow::ParallelSignature& OpAttribute::parallel_signature() const {
  const ::oneflow::ParallelSignature* p = parallel_signature_;
  // @@protoc_insertion_point(field_get:oneflow.OpAttribute.parallel_signature)
  return p != nullptr ? *p : *reinterpret_cast<const ::oneflow::ParallelSignature*>(
      &::oneflow::_ParallelSignature_default_instance_);
}
inline ::oneflow::ParallelSignature* OpAttribute::release_parallel_signature() {
  // @@protoc_insertion_point(field_release:oneflow.OpAttribute.parallel_signature)
  _has_bits_[0] &= ~0x00000100u;
  ::oneflow::ParallelSignature* temp = parallel_signature_;
  parallel_signature_ = nullptr;
  return temp;
}
inline ::oneflow::ParallelSignature* OpAttribute::mutable_parallel_signature() {
  _has_bits_[0] |= 0x00000100u;
  if (parallel_signature_ == nullptr) {
    auto* p = CreateMaybeMessage<::oneflow::ParallelSignature>(GetArenaNoVirtual());
    parallel_signature_ = p;
  }
  // @@protoc_insertion_point(field_mutable:oneflow.OpAttribute.parallel_signature)
  return parallel_signature_;
}
inline void OpAttribute::set_allocated_parallel_signature(::oneflow::ParallelSignature* parallel_signature) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(parallel_signature_);
  }
  if (parallel_signature) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      parallel_signature = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, parallel_signature, submessage_arena);
    }
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  parallel_signature_ = parallel_signature;
  // @@protoc_insertion_point(field_set_allocated:oneflow.OpAttribute.parallel_signature)
}

// optional .oneflow.ParallelConfSignature parallel_conf_signature = 109;
inline bool OpAttribute::has_parallel_conf_signature() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline const ::oneflow::ParallelConfSignature& OpAttribute::parallel_conf_signature() const {
  const ::oneflow::ParallelConfSignature* p = parallel_conf_signature_;
  // @@protoc_insertion_point(field_get:oneflow.OpAttribute.parallel_conf_signature)
  return p != nullptr ? *p : *reinterpret_cast<const ::oneflow::ParallelConfSignature*>(
      &::oneflow::_ParallelConfSignature_default_instance_);
}
inline ::oneflow::ParallelConfSignature* OpAttribute::release_parallel_conf_signature() {
  // @@protoc_insertion_point(field_release:oneflow.OpAttribute.parallel_conf_signature)
  _has_bits_[0] &= ~0x00000200u;
  ::oneflow::ParallelConfSignature* temp = parallel_conf_signature_;
  parallel_conf_signature_ = nullptr;
  return temp;
}
inline ::oneflow::ParallelConfSignature* OpAttribute::mutable_parallel_conf_signature() {
  _has_bits_[0] |= 0x00000200u;
  if (parallel_conf_signature_ == nullptr) {
    auto* p = CreateMaybeMessage<::oneflow::ParallelConfSignature>(GetArenaNoVirtual());
    parallel_conf_signature_ = p;
  }
  // @@protoc_insertion_point(field_mutable:oneflow.OpAttribute.parallel_conf_signature)
  return parallel_conf_signature_;
}
inline void OpAttribute::set_allocated_parallel_conf_signature(::oneflow::ParallelConfSignature* parallel_conf_signature) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(parallel_conf_signature_);
  }
  if (parallel_conf_signature) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      parallel_conf_signature = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, parallel_conf_signature, submessage_arena);
    }
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  parallel_conf_signature_ = parallel_conf_signature;
  // @@protoc_insertion_point(field_set_allocated:oneflow.OpAttribute.parallel_conf_signature)
}

// optional .oneflow.NdSbpSignature nd_sbp_signature = 110;
inline bool OpAttribute::has_nd_sbp_signature() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline const ::oneflow::NdSbpSignature& OpAttribute::nd_sbp_signature() const {
  const ::oneflow::NdSbpSignature* p = nd_sbp_signature_;
  // @@protoc_insertion_point(field_get:oneflow.OpAttribute.nd_sbp_signature)
  return p != nullptr ? *p : *reinterpret_cast<const ::oneflow::NdSbpSignature*>(
      &::oneflow::_NdSbpSignature_default_instance_);
}
inline ::oneflow::NdSbpSignature* OpAttribute::release_nd_sbp_signature() {
  // @@protoc_insertion_point(field_release:oneflow.OpAttribute.nd_sbp_signature)
  _has_bits_[0] &= ~0x00000400u;
  ::oneflow::NdSbpSignature* temp = nd_sbp_signature_;
  nd_sbp_signature_ = nullptr;
  return temp;
}
inline ::oneflow::NdSbpSignature* OpAttribute::mutable_nd_sbp_signature() {
  _has_bits_[0] |= 0x00000400u;
  if (nd_sbp_signature_ == nullptr) {
    auto* p = CreateMaybeMessage<::oneflow::NdSbpSignature>(GetArenaNoVirtual());
    nd_sbp_signature_ = p;
  }
  // @@protoc_insertion_point(field_mutable:oneflow.OpAttribute.nd_sbp_signature)
  return nd_sbp_signature_;
}
inline void OpAttribute::set_allocated_nd_sbp_signature(::oneflow::NdSbpSignature* nd_sbp_signature) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(nd_sbp_signature_);
  }
  if (nd_sbp_signature) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      nd_sbp_signature = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, nd_sbp_signature, submessage_arena);
    }
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  nd_sbp_signature_ = nd_sbp_signature;
  // @@protoc_insertion_point(field_set_allocated:oneflow.OpAttribute.nd_sbp_signature)
}

// -------------------------------------------------------------------

// OpAttributeList

// repeated .oneflow.OpAttribute op_attribute = 1;
inline int OpAttributeList::op_attribute_size() const {
  return op_attribute_.size();
}
inline void OpAttributeList::clear_op_attribute() {
  op_attribute_.Clear();
}
inline ::oneflow::OpAttribute* OpAttributeList::mutable_op_attribute(int index) {
  // @@protoc_insertion_point(field_mutable:oneflow.OpAttributeList.op_attribute)
  return op_attribute_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oneflow::OpAttribute >*
OpAttributeList::mutable_op_attribute() {
  // @@protoc_insertion_point(field_mutable_list:oneflow.OpAttributeList.op_attribute)
  return &op_attribute_;
}
inline const ::oneflow::OpAttribute& OpAttributeList::op_attribute(int index) const {
  // @@protoc_insertion_point(field_get:oneflow.OpAttributeList.op_attribute)
  return op_attribute_.Get(index);
}
inline ::oneflow::OpAttribute* OpAttributeList::add_op_attribute() {
  // @@protoc_insertion_point(field_add:oneflow.OpAttributeList.op_attribute)
  return op_attribute_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oneflow::OpAttribute >&
OpAttributeList::op_attribute() const {
  // @@protoc_insertion_point(field_list:oneflow.OpAttributeList.op_attribute)
  return op_attribute_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace oneflow

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_oneflow_2fcore_2foperator_2fop_5fattribute_2eproto
