// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: oneflow/core/control/ctrl_bootstrap.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_oneflow_2fcore_2fcontrol_2fctrl_5fbootstrap_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_oneflow_2fcore_2fcontrol_2fctrl_5fbootstrap_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_oneflow_2fcore_2fcontrol_2fctrl_5fbootstrap_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_oneflow_2fcore_2fcontrol_2fctrl_5fbootstrap_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_oneflow_2fcore_2fcontrol_2fctrl_5fbootstrap_2eproto;
namespace oneflow {
class Address;
class AddressDefaultTypeInternal;
extern AddressDefaultTypeInternal _Address_default_instance_;
class BootstrapConf;
class BootstrapConfDefaultTypeInternal;
extern BootstrapConfDefaultTypeInternal _BootstrapConf_default_instance_;
class ProcessCtx;
class ProcessCtxDefaultTypeInternal;
extern ProcessCtxDefaultTypeInternal _ProcessCtx_default_instance_;
}  // namespace oneflow
PROTOBUF_NAMESPACE_OPEN
template<> ::oneflow::Address* Arena::CreateMaybeMessage<::oneflow::Address>(Arena*);
template<> ::oneflow::BootstrapConf* Arena::CreateMaybeMessage<::oneflow::BootstrapConf>(Arena*);
template<> ::oneflow::ProcessCtx* Arena::CreateMaybeMessage<::oneflow::ProcessCtx>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace oneflow {

// ===================================================================

class Address :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:oneflow.Address) */ {
 public:
  Address();
  virtual ~Address();

  Address(const Address& from);
  Address(Address&& from) noexcept
    : Address() {
    *this = ::std::move(from);
  }

  inline Address& operator=(const Address& from) {
    CopyFrom(from);
    return *this;
  }
  inline Address& operator=(Address&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Address& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Address* internal_default_instance() {
    return reinterpret_cast<const Address*>(
               &_Address_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Address& a, Address& b) {
    a.Swap(&b);
  }
  inline void Swap(Address* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Address* New() const final {
    return CreateMaybeMessage<Address>(nullptr);
  }

  Address* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Address>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Address& from);
  void MergeFrom(const Address& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Address* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "oneflow.Address";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_oneflow_2fcore_2fcontrol_2fctrl_5fbootstrap_2eproto);
    return ::descriptor_table_oneflow_2fcore_2fcontrol_2fctrl_5fbootstrap_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHostFieldNumber = 1,
    kPortFieldNumber = 2,
  };
  // required string host = 1;
  bool has_host() const;
  void clear_host();
  const std::string& host() const;
  void set_host(const std::string& value);
  void set_host(std::string&& value);
  void set_host(const char* value);
  void set_host(const char* value, size_t size);
  std::string* mutable_host();
  std::string* release_host();
  void set_allocated_host(std::string* host);

  // required int32 port = 2;
  bool has_port() const;
  void clear_port();
  ::PROTOBUF_NAMESPACE_ID::int32 port() const;
  void set_port(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:oneflow.Address)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr host_;
  ::PROTOBUF_NAMESPACE_ID::int32 port_;
  friend struct ::TableStruct_oneflow_2fcore_2fcontrol_2fctrl_5fbootstrap_2eproto;
};
// -------------------------------------------------------------------

class ProcessCtx :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:oneflow.ProcessCtx) */ {
 public:
  ProcessCtx();
  virtual ~ProcessCtx();

  ProcessCtx(const ProcessCtx& from);
  ProcessCtx(ProcessCtx&& from) noexcept
    : ProcessCtx() {
    *this = ::std::move(from);
  }

  inline ProcessCtx& operator=(const ProcessCtx& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProcessCtx& operator=(ProcessCtx&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProcessCtx& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProcessCtx* internal_default_instance() {
    return reinterpret_cast<const ProcessCtx*>(
               &_ProcessCtx_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ProcessCtx& a, ProcessCtx& b) {
    a.Swap(&b);
  }
  inline void Swap(ProcessCtx* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProcessCtx* New() const final {
    return CreateMaybeMessage<ProcessCtx>(nullptr);
  }

  ProcessCtx* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProcessCtx>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProcessCtx& from);
  void MergeFrom(const ProcessCtx& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProcessCtx* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "oneflow.ProcessCtx";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_oneflow_2fcore_2fcontrol_2fctrl_5fbootstrap_2eproto);
    return ::descriptor_table_oneflow_2fcore_2fcontrol_2fctrl_5fbootstrap_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCtrlAddrFieldNumber = 1,
    kRankFieldNumber = 2,
    kNodeSizeFieldNumber = 3,
  };
  // repeated .oneflow.Address ctrl_addr = 1;
  int ctrl_addr_size() const;
  void clear_ctrl_addr();
  ::oneflow::Address* mutable_ctrl_addr(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oneflow::Address >*
      mutable_ctrl_addr();
  const ::oneflow::Address& ctrl_addr(int index) const;
  ::oneflow::Address* add_ctrl_addr();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oneflow::Address >&
      ctrl_addr() const;

  // required int64 rank = 2;
  bool has_rank() const;
  void clear_rank();
  ::PROTOBUF_NAMESPACE_ID::int64 rank() const;
  void set_rank(::PROTOBUF_NAMESPACE_ID::int64 value);

  // required int64 node_size = 3;
  bool has_node_size() const;
  void clear_node_size();
  ::PROTOBUF_NAMESPACE_ID::int64 node_size() const;
  void set_node_size(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:oneflow.ProcessCtx)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oneflow::Address > ctrl_addr_;
  ::PROTOBUF_NAMESPACE_ID::int64 rank_;
  ::PROTOBUF_NAMESPACE_ID::int64 node_size_;
  friend struct ::TableStruct_oneflow_2fcore_2fcontrol_2fctrl_5fbootstrap_2eproto;
};
// -------------------------------------------------------------------

class BootstrapConf :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:oneflow.BootstrapConf) */ {
 public:
  BootstrapConf();
  virtual ~BootstrapConf();

  BootstrapConf(const BootstrapConf& from);
  BootstrapConf(BootstrapConf&& from) noexcept
    : BootstrapConf() {
    *this = ::std::move(from);
  }

  inline BootstrapConf& operator=(const BootstrapConf& from) {
    CopyFrom(from);
    return *this;
  }
  inline BootstrapConf& operator=(BootstrapConf&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BootstrapConf& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BootstrapConf* internal_default_instance() {
    return reinterpret_cast<const BootstrapConf*>(
               &_BootstrapConf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(BootstrapConf& a, BootstrapConf& b) {
    a.Swap(&b);
  }
  inline void Swap(BootstrapConf* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BootstrapConf* New() const final {
    return CreateMaybeMessage<BootstrapConf>(nullptr);
  }

  BootstrapConf* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BootstrapConf>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BootstrapConf& from);
  void MergeFrom(const BootstrapConf& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BootstrapConf* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "oneflow.BootstrapConf";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_oneflow_2fcore_2fcontrol_2fctrl_5fbootstrap_2eproto);
    return ::descriptor_table_oneflow_2fcore_2fcontrol_2fctrl_5fbootstrap_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHostFieldNumber = 4,
    kMasterAddrFieldNumber = 1,
    kRankFieldNumber = 2,
    kWorldSizeFieldNumber = 3,
    kCtrlPortFieldNumber = 5,
    kNodeSizeFieldNumber = 6,
  };
  // optional string host = 4;
  bool has_host() const;
  void clear_host();
  const std::string& host() const;
  void set_host(const std::string& value);
  void set_host(std::string&& value);
  void set_host(const char* value);
  void set_host(const char* value, size_t size);
  std::string* mutable_host();
  std::string* release_host();
  void set_allocated_host(std::string* host);

  // required .oneflow.Address master_addr = 1;
  bool has_master_addr() const;
  void clear_master_addr();
  const ::oneflow::Address& master_addr() const;
  ::oneflow::Address* release_master_addr();
  ::oneflow::Address* mutable_master_addr();
  void set_allocated_master_addr(::oneflow::Address* master_addr);

  // required int64 rank = 2;
  bool has_rank() const;
  void clear_rank();
  ::PROTOBUF_NAMESPACE_ID::int64 rank() const;
  void set_rank(::PROTOBUF_NAMESPACE_ID::int64 value);

  // required int64 world_size = 3;
  bool has_world_size() const;
  void clear_world_size();
  ::PROTOBUF_NAMESPACE_ID::int64 world_size() const;
  void set_world_size(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int32 ctrl_port = 5 [default = -1];
  bool has_ctrl_port() const;
  void clear_ctrl_port();
  ::PROTOBUF_NAMESPACE_ID::int32 ctrl_port() const;
  void set_ctrl_port(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int64 node_size = 6 [default = -1];
  bool has_node_size() const;
  void clear_node_size();
  ::PROTOBUF_NAMESPACE_ID::int64 node_size() const;
  void set_node_size(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:oneflow.BootstrapConf)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr host_;
  ::oneflow::Address* master_addr_;
  ::PROTOBUF_NAMESPACE_ID::int64 rank_;
  ::PROTOBUF_NAMESPACE_ID::int64 world_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 ctrl_port_;
  ::PROTOBUF_NAMESPACE_ID::int64 node_size_;
  friend struct ::TableStruct_oneflow_2fcore_2fcontrol_2fctrl_5fbootstrap_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Address

// required string host = 1;
inline bool Address::has_host() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Address::clear_host() {
  host_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Address::host() const {
  // @@protoc_insertion_point(field_get:oneflow.Address.host)
  return host_.GetNoArena();
}
inline void Address::set_host(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  host_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:oneflow.Address.host)
}
inline void Address::set_host(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  host_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:oneflow.Address.host)
}
inline void Address::set_host(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  host_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:oneflow.Address.host)
}
inline void Address::set_host(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  host_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:oneflow.Address.host)
}
inline std::string* Address::mutable_host() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:oneflow.Address.host)
  return host_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Address::release_host() {
  // @@protoc_insertion_point(field_release:oneflow.Address.host)
  if (!has_host()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return host_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Address::set_allocated_host(std::string* host) {
  if (host != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  host_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), host);
  // @@protoc_insertion_point(field_set_allocated:oneflow.Address.host)
}

// required int32 port = 2;
inline bool Address::has_port() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Address::clear_port() {
  port_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Address::port() const {
  // @@protoc_insertion_point(field_get:oneflow.Address.port)
  return port_;
}
inline void Address::set_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  port_ = value;
  // @@protoc_insertion_point(field_set:oneflow.Address.port)
}

// -------------------------------------------------------------------

// ProcessCtx

// repeated .oneflow.Address ctrl_addr = 1;
inline int ProcessCtx::ctrl_addr_size() const {
  return ctrl_addr_.size();
}
inline void ProcessCtx::clear_ctrl_addr() {
  ctrl_addr_.Clear();
}
inline ::oneflow::Address* ProcessCtx::mutable_ctrl_addr(int index) {
  // @@protoc_insertion_point(field_mutable:oneflow.ProcessCtx.ctrl_addr)
  return ctrl_addr_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oneflow::Address >*
ProcessCtx::mutable_ctrl_addr() {
  // @@protoc_insertion_point(field_mutable_list:oneflow.ProcessCtx.ctrl_addr)
  return &ctrl_addr_;
}
inline const ::oneflow::Address& ProcessCtx::ctrl_addr(int index) const {
  // @@protoc_insertion_point(field_get:oneflow.ProcessCtx.ctrl_addr)
  return ctrl_addr_.Get(index);
}
inline ::oneflow::Address* ProcessCtx::add_ctrl_addr() {
  // @@protoc_insertion_point(field_add:oneflow.ProcessCtx.ctrl_addr)
  return ctrl_addr_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oneflow::Address >&
ProcessCtx::ctrl_addr() const {
  // @@protoc_insertion_point(field_list:oneflow.ProcessCtx.ctrl_addr)
  return ctrl_addr_;
}

// required int64 rank = 2;
inline bool ProcessCtx::has_rank() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProcessCtx::clear_rank() {
  rank_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ProcessCtx::rank() const {
  // @@protoc_insertion_point(field_get:oneflow.ProcessCtx.rank)
  return rank_;
}
inline void ProcessCtx::set_rank(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  rank_ = value;
  // @@protoc_insertion_point(field_set:oneflow.ProcessCtx.rank)
}

// required int64 node_size = 3;
inline bool ProcessCtx::has_node_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProcessCtx::clear_node_size() {
  node_size_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ProcessCtx::node_size() const {
  // @@protoc_insertion_point(field_get:oneflow.ProcessCtx.node_size)
  return node_size_;
}
inline void ProcessCtx::set_node_size(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  node_size_ = value;
  // @@protoc_insertion_point(field_set:oneflow.ProcessCtx.node_size)
}

// -------------------------------------------------------------------

// BootstrapConf

// required .oneflow.Address master_addr = 1;
inline bool BootstrapConf::has_master_addr() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BootstrapConf::clear_master_addr() {
  if (master_addr_ != nullptr) master_addr_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::oneflow::Address& BootstrapConf::master_addr() const {
  const ::oneflow::Address* p = master_addr_;
  // @@protoc_insertion_point(field_get:oneflow.BootstrapConf.master_addr)
  return p != nullptr ? *p : *reinterpret_cast<const ::oneflow::Address*>(
      &::oneflow::_Address_default_instance_);
}
inline ::oneflow::Address* BootstrapConf::release_master_addr() {
  // @@protoc_insertion_point(field_release:oneflow.BootstrapConf.master_addr)
  _has_bits_[0] &= ~0x00000002u;
  ::oneflow::Address* temp = master_addr_;
  master_addr_ = nullptr;
  return temp;
}
inline ::oneflow::Address* BootstrapConf::mutable_master_addr() {
  _has_bits_[0] |= 0x00000002u;
  if (master_addr_ == nullptr) {
    auto* p = CreateMaybeMessage<::oneflow::Address>(GetArenaNoVirtual());
    master_addr_ = p;
  }
  // @@protoc_insertion_point(field_mutable:oneflow.BootstrapConf.master_addr)
  return master_addr_;
}
inline void BootstrapConf::set_allocated_master_addr(::oneflow::Address* master_addr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete master_addr_;
  }
  if (master_addr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      master_addr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, master_addr, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  master_addr_ = master_addr;
  // @@protoc_insertion_point(field_set_allocated:oneflow.BootstrapConf.master_addr)
}

// required int64 rank = 2;
inline bool BootstrapConf::has_rank() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BootstrapConf::clear_rank() {
  rank_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 BootstrapConf::rank() const {
  // @@protoc_insertion_point(field_get:oneflow.BootstrapConf.rank)
  return rank_;
}
inline void BootstrapConf::set_rank(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  rank_ = value;
  // @@protoc_insertion_point(field_set:oneflow.BootstrapConf.rank)
}

// required int64 world_size = 3;
inline bool BootstrapConf::has_world_size() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BootstrapConf::clear_world_size() {
  world_size_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 BootstrapConf::world_size() const {
  // @@protoc_insertion_point(field_get:oneflow.BootstrapConf.world_size)
  return world_size_;
}
inline void BootstrapConf::set_world_size(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000008u;
  world_size_ = value;
  // @@protoc_insertion_point(field_set:oneflow.BootstrapConf.world_size)
}

// optional string host = 4;
inline bool BootstrapConf::has_host() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BootstrapConf::clear_host() {
  host_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& BootstrapConf::host() const {
  // @@protoc_insertion_point(field_get:oneflow.BootstrapConf.host)
  return host_.GetNoArena();
}
inline void BootstrapConf::set_host(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  host_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:oneflow.BootstrapConf.host)
}
inline void BootstrapConf::set_host(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  host_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:oneflow.BootstrapConf.host)
}
inline void BootstrapConf::set_host(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  host_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:oneflow.BootstrapConf.host)
}
inline void BootstrapConf::set_host(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  host_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:oneflow.BootstrapConf.host)
}
inline std::string* BootstrapConf::mutable_host() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:oneflow.BootstrapConf.host)
  return host_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BootstrapConf::release_host() {
  // @@protoc_insertion_point(field_release:oneflow.BootstrapConf.host)
  if (!has_host()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return host_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BootstrapConf::set_allocated_host(std::string* host) {
  if (host != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  host_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), host);
  // @@protoc_insertion_point(field_set_allocated:oneflow.BootstrapConf.host)
}

// optional int32 ctrl_port = 5 [default = -1];
inline bool BootstrapConf::has_ctrl_port() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BootstrapConf::clear_ctrl_port() {
  ctrl_port_ = -1;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BootstrapConf::ctrl_port() const {
  // @@protoc_insertion_point(field_get:oneflow.BootstrapConf.ctrl_port)
  return ctrl_port_;
}
inline void BootstrapConf::set_ctrl_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  ctrl_port_ = value;
  // @@protoc_insertion_point(field_set:oneflow.BootstrapConf.ctrl_port)
}

// optional int64 node_size = 6 [default = -1];
inline bool BootstrapConf::has_node_size() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BootstrapConf::clear_node_size() {
  node_size_ = PROTOBUF_LONGLONG(-1);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 BootstrapConf::node_size() const {
  // @@protoc_insertion_point(field_get:oneflow.BootstrapConf.node_size)
  return node_size_;
}
inline void BootstrapConf::set_node_size(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000020u;
  node_size_ = value;
  // @@protoc_insertion_point(field_set:oneflow.BootstrapConf.node_size)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace oneflow

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_oneflow_2fcore_2fcontrol_2fctrl_5fbootstrap_2eproto
