// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: oneflow/core/job/scope.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_oneflow_2fcore_2fjob_2fscope_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_oneflow_2fcore_2fjob_2fscope_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include "oneflow/core/job/local_parallel.pb.h"
#include "oneflow/core/framework/user_op_attr.pb.h"
#include "oneflow/core/job/module_conf.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_oneflow_2fcore_2fjob_2fscope_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_oneflow_2fcore_2fjob_2fscope_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_oneflow_2fcore_2fjob_2fscope_2eproto;
namespace oneflow {
class ScopeProto;
class ScopeProtoDefaultTypeInternal;
extern ScopeProtoDefaultTypeInternal _ScopeProto_default_instance_;
class ScopeProto_AttrName2attrValueEntry_DoNotUse;
class ScopeProto_AttrName2attrValueEntry_DoNotUseDefaultTypeInternal;
extern ScopeProto_AttrName2attrValueEntry_DoNotUseDefaultTypeInternal _ScopeProto_AttrName2attrValueEntry_DoNotUse_default_instance_;
}  // namespace oneflow
PROTOBUF_NAMESPACE_OPEN
template<> ::oneflow::ScopeProto* Arena::CreateMaybeMessage<::oneflow::ScopeProto>(Arena*);
template<> ::oneflow::ScopeProto_AttrName2attrValueEntry_DoNotUse* Arena::CreateMaybeMessage<::oneflow::ScopeProto_AttrName2attrValueEntry_DoNotUse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace oneflow {

// ===================================================================

class ScopeProto_AttrName2attrValueEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ScopeProto_AttrName2attrValueEntry_DoNotUse, 
    std::string, ::oneflow::AttrValue,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ScopeProto_AttrName2attrValueEntry_DoNotUse, 
    std::string, ::oneflow::AttrValue,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  ScopeProto_AttrName2attrValueEntry_DoNotUse();
  ScopeProto_AttrName2attrValueEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const ScopeProto_AttrName2attrValueEntry_DoNotUse& other);
  static const ScopeProto_AttrName2attrValueEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ScopeProto_AttrName2attrValueEntry_DoNotUse*>(&_ScopeProto_AttrName2attrValueEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
#ifndef NDEBUG
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
       s->data(), s->size(), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "oneflow.ScopeProto.AttrName2attrValueEntry.key");
#endif
    return true;
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_oneflow_2fcore_2fjob_2fscope_2eproto);
    return ::descriptor_table_oneflow_2fcore_2fjob_2fscope_2eproto.file_level_metadata[0];
  }

  public:
};

// -------------------------------------------------------------------

class ScopeProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:oneflow.ScopeProto) */ {
 public:
  ScopeProto();
  virtual ~ScopeProto();

  ScopeProto(const ScopeProto& from);
  ScopeProto(ScopeProto&& from) noexcept
    : ScopeProto() {
    *this = ::std::move(from);
  }

  inline ScopeProto& operator=(const ScopeProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScopeProto& operator=(ScopeProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ScopeProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ScopeProto* internal_default_instance() {
    return reinterpret_cast<const ScopeProto*>(
               &_ScopeProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ScopeProto& a, ScopeProto& b) {
    a.Swap(&b);
  }
  inline void Swap(ScopeProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ScopeProto* New() const final {
    return CreateMaybeMessage<ScopeProto>(nullptr);
  }

  ScopeProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ScopeProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ScopeProto& from);
  void MergeFrom(const ScopeProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScopeProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "oneflow.ScopeProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_oneflow_2fcore_2fjob_2fscope_2eproto);
    return ::descriptor_table_oneflow_2fcore_2fjob_2fscope_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kScopeOpNamePrefixesFieldNumber = 60,
    kAttrName2AttrValueFieldNumber = 90,
    kCalculationPassNameFieldNumber = 100,
    kModuleNameFieldNumber = 110,
    kOptLocalParallelConfFieldNumber = 50,
    kJobDescSymbolIdFieldNumber = 20,
    kDeviceParallelDescSymbolIdFieldNumber = 30,
    kHostParallelDescSymbolIdFieldNumber = 40,
    kParentScopeSymbolIdFieldNumber = 70,
    kSessionIdFieldNumber = 80,
    kEnableCpuAlternativeOpFieldNumber = 41,
  };
  // repeated string scope_op_name_prefixes = 60;
  int scope_op_name_prefixes_size() const;
  void clear_scope_op_name_prefixes();
  const std::string& scope_op_name_prefixes(int index) const;
  std::string* mutable_scope_op_name_prefixes(int index);
  void set_scope_op_name_prefixes(int index, const std::string& value);
  void set_scope_op_name_prefixes(int index, std::string&& value);
  void set_scope_op_name_prefixes(int index, const char* value);
  void set_scope_op_name_prefixes(int index, const char* value, size_t size);
  std::string* add_scope_op_name_prefixes();
  void add_scope_op_name_prefixes(const std::string& value);
  void add_scope_op_name_prefixes(std::string&& value);
  void add_scope_op_name_prefixes(const char* value);
  void add_scope_op_name_prefixes(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& scope_op_name_prefixes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_scope_op_name_prefixes();

  // map<string, .oneflow.AttrValue> attr_name2attr_value = 90;
  int attr_name2attr_value_size() const;
  void clear_attr_name2attr_value();
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::oneflow::AttrValue >&
      attr_name2attr_value() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::oneflow::AttrValue >*
      mutable_attr_name2attr_value();

  // optional string calculation_pass_name = 100 [default = "forward_pass"];
  bool has_calculation_pass_name() const;
  void clear_calculation_pass_name();
  const std::string& calculation_pass_name() const;
  void set_calculation_pass_name(const std::string& value);
  void set_calculation_pass_name(std::string&& value);
  void set_calculation_pass_name(const char* value);
  void set_calculation_pass_name(const char* value, size_t size);
  std::string* mutable_calculation_pass_name();
  std::string* release_calculation_pass_name();
  void set_allocated_calculation_pass_name(std::string* calculation_pass_name);

  // optional string module_name = 110;
  bool has_module_name() const;
  void clear_module_name();
  const std::string& module_name() const;
  void set_module_name(const std::string& value);
  void set_module_name(std::string&& value);
  void set_module_name(const char* value);
  void set_module_name(const char* value, size_t size);
  std::string* mutable_module_name();
  std::string* release_module_name();
  void set_allocated_module_name(std::string* module_name);

  // required .oneflow.OptLocalParallel opt_local_parallel_conf = 50;
  bool has_opt_local_parallel_conf() const;
  void clear_opt_local_parallel_conf();
  const ::oneflow::OptLocalParallel& opt_local_parallel_conf() const;
  ::oneflow::OptLocalParallel* release_opt_local_parallel_conf();
  ::oneflow::OptLocalParallel* mutable_opt_local_parallel_conf();
  void set_allocated_opt_local_parallel_conf(::oneflow::OptLocalParallel* opt_local_parallel_conf);

  // required int64 job_desc_symbol_id = 20;
  bool has_job_desc_symbol_id() const;
  void clear_job_desc_symbol_id();
  ::PROTOBUF_NAMESPACE_ID::int64 job_desc_symbol_id() const;
  void set_job_desc_symbol_id(::PROTOBUF_NAMESPACE_ID::int64 value);

  // required int64 device_parallel_desc_symbol_id = 30;
  bool has_device_parallel_desc_symbol_id() const;
  void clear_device_parallel_desc_symbol_id();
  ::PROTOBUF_NAMESPACE_ID::int64 device_parallel_desc_symbol_id() const;
  void set_device_parallel_desc_symbol_id(::PROTOBUF_NAMESPACE_ID::int64 value);

  // required int64 host_parallel_desc_symbol_id = 40;
  bool has_host_parallel_desc_symbol_id() const;
  void clear_host_parallel_desc_symbol_id();
  ::PROTOBUF_NAMESPACE_ID::int64 host_parallel_desc_symbol_id() const;
  void set_host_parallel_desc_symbol_id(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 parent_scope_symbol_id = 70;
  bool has_parent_scope_symbol_id() const;
  void clear_parent_scope_symbol_id();
  ::PROTOBUF_NAMESPACE_ID::int64 parent_scope_symbol_id() const;
  void set_parent_scope_symbol_id(::PROTOBUF_NAMESPACE_ID::int64 value);

  // required int64 session_id = 80;
  bool has_session_id() const;
  void clear_session_id();
  ::PROTOBUF_NAMESPACE_ID::int64 session_id() const;
  void set_session_id(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional bool enable_cpu_alternative_op = 41 [default = true];
  bool has_enable_cpu_alternative_op() const;
  void clear_enable_cpu_alternative_op();
  bool enable_cpu_alternative_op() const;
  void set_enable_cpu_alternative_op(bool value);

  // @@protoc_insertion_point(class_scope:oneflow.ScopeProto)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> scope_op_name_prefixes_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      ScopeProto_AttrName2attrValueEntry_DoNotUse,
      std::string, ::oneflow::AttrValue,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > attr_name2attr_value_;
  public:
  static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> _i_give_permission_to_break_this_code_default_calculation_pass_name_;
  private:
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr calculation_pass_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr module_name_;
  ::oneflow::OptLocalParallel* opt_local_parallel_conf_;
  ::PROTOBUF_NAMESPACE_ID::int64 job_desc_symbol_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 device_parallel_desc_symbol_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 host_parallel_desc_symbol_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 parent_scope_symbol_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 session_id_;
  bool enable_cpu_alternative_op_;
  friend struct ::TableStruct_oneflow_2fcore_2fjob_2fscope_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// ScopeProto

// required int64 job_desc_symbol_id = 20;
inline bool ScopeProto::has_job_desc_symbol_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ScopeProto::clear_job_desc_symbol_id() {
  job_desc_symbol_id_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ScopeProto::job_desc_symbol_id() const {
  // @@protoc_insertion_point(field_get:oneflow.ScopeProto.job_desc_symbol_id)
  return job_desc_symbol_id_;
}
inline void ScopeProto::set_job_desc_symbol_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000008u;
  job_desc_symbol_id_ = value;
  // @@protoc_insertion_point(field_set:oneflow.ScopeProto.job_desc_symbol_id)
}

// required int64 device_parallel_desc_symbol_id = 30;
inline bool ScopeProto::has_device_parallel_desc_symbol_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ScopeProto::clear_device_parallel_desc_symbol_id() {
  device_parallel_desc_symbol_id_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ScopeProto::device_parallel_desc_symbol_id() const {
  // @@protoc_insertion_point(field_get:oneflow.ScopeProto.device_parallel_desc_symbol_id)
  return device_parallel_desc_symbol_id_;
}
inline void ScopeProto::set_device_parallel_desc_symbol_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000010u;
  device_parallel_desc_symbol_id_ = value;
  // @@protoc_insertion_point(field_set:oneflow.ScopeProto.device_parallel_desc_symbol_id)
}

// required int64 host_parallel_desc_symbol_id = 40;
inline bool ScopeProto::has_host_parallel_desc_symbol_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ScopeProto::clear_host_parallel_desc_symbol_id() {
  host_parallel_desc_symbol_id_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ScopeProto::host_parallel_desc_symbol_id() const {
  // @@protoc_insertion_point(field_get:oneflow.ScopeProto.host_parallel_desc_symbol_id)
  return host_parallel_desc_symbol_id_;
}
inline void ScopeProto::set_host_parallel_desc_symbol_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000020u;
  host_parallel_desc_symbol_id_ = value;
  // @@protoc_insertion_point(field_set:oneflow.ScopeProto.host_parallel_desc_symbol_id)
}

// optional bool enable_cpu_alternative_op = 41 [default = true];
inline bool ScopeProto::has_enable_cpu_alternative_op() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ScopeProto::clear_enable_cpu_alternative_op() {
  enable_cpu_alternative_op_ = true;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool ScopeProto::enable_cpu_alternative_op() const {
  // @@protoc_insertion_point(field_get:oneflow.ScopeProto.enable_cpu_alternative_op)
  return enable_cpu_alternative_op_;
}
inline void ScopeProto::set_enable_cpu_alternative_op(bool value) {
  _has_bits_[0] |= 0x00000100u;
  enable_cpu_alternative_op_ = value;
  // @@protoc_insertion_point(field_set:oneflow.ScopeProto.enable_cpu_alternative_op)
}

// required .oneflow.OptLocalParallel opt_local_parallel_conf = 50;
inline bool ScopeProto::has_opt_local_parallel_conf() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline const ::oneflow::OptLocalParallel& ScopeProto::opt_local_parallel_conf() const {
  const ::oneflow::OptLocalParallel* p = opt_local_parallel_conf_;
  // @@protoc_insertion_point(field_get:oneflow.ScopeProto.opt_local_parallel_conf)
  return p != nullptr ? *p : *reinterpret_cast<const ::oneflow::OptLocalParallel*>(
      &::oneflow::_OptLocalParallel_default_instance_);
}
inline ::oneflow::OptLocalParallel* ScopeProto::release_opt_local_parallel_conf() {
  // @@protoc_insertion_point(field_release:oneflow.ScopeProto.opt_local_parallel_conf)
  _has_bits_[0] &= ~0x00000004u;
  ::oneflow::OptLocalParallel* temp = opt_local_parallel_conf_;
  opt_local_parallel_conf_ = nullptr;
  return temp;
}
inline ::oneflow::OptLocalParallel* ScopeProto::mutable_opt_local_parallel_conf() {
  _has_bits_[0] |= 0x00000004u;
  if (opt_local_parallel_conf_ == nullptr) {
    auto* p = CreateMaybeMessage<::oneflow::OptLocalParallel>(GetArenaNoVirtual());
    opt_local_parallel_conf_ = p;
  }
  // @@protoc_insertion_point(field_mutable:oneflow.ScopeProto.opt_local_parallel_conf)
  return opt_local_parallel_conf_;
}
inline void ScopeProto::set_allocated_opt_local_parallel_conf(::oneflow::OptLocalParallel* opt_local_parallel_conf) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(opt_local_parallel_conf_);
  }
  if (opt_local_parallel_conf) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      opt_local_parallel_conf = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, opt_local_parallel_conf, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  opt_local_parallel_conf_ = opt_local_parallel_conf;
  // @@protoc_insertion_point(field_set_allocated:oneflow.ScopeProto.opt_local_parallel_conf)
}

// repeated string scope_op_name_prefixes = 60;
inline int ScopeProto::scope_op_name_prefixes_size() const {
  return scope_op_name_prefixes_.size();
}
inline void ScopeProto::clear_scope_op_name_prefixes() {
  scope_op_name_prefixes_.Clear();
}
inline const std::string& ScopeProto::scope_op_name_prefixes(int index) const {
  // @@protoc_insertion_point(field_get:oneflow.ScopeProto.scope_op_name_prefixes)
  return scope_op_name_prefixes_.Get(index);
}
inline std::string* ScopeProto::mutable_scope_op_name_prefixes(int index) {
  // @@protoc_insertion_point(field_mutable:oneflow.ScopeProto.scope_op_name_prefixes)
  return scope_op_name_prefixes_.Mutable(index);
}
inline void ScopeProto::set_scope_op_name_prefixes(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:oneflow.ScopeProto.scope_op_name_prefixes)
  scope_op_name_prefixes_.Mutable(index)->assign(value);
}
inline void ScopeProto::set_scope_op_name_prefixes(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:oneflow.ScopeProto.scope_op_name_prefixes)
  scope_op_name_prefixes_.Mutable(index)->assign(std::move(value));
}
inline void ScopeProto::set_scope_op_name_prefixes(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  scope_op_name_prefixes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:oneflow.ScopeProto.scope_op_name_prefixes)
}
inline void ScopeProto::set_scope_op_name_prefixes(int index, const char* value, size_t size) {
  scope_op_name_prefixes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:oneflow.ScopeProto.scope_op_name_prefixes)
}
inline std::string* ScopeProto::add_scope_op_name_prefixes() {
  // @@protoc_insertion_point(field_add_mutable:oneflow.ScopeProto.scope_op_name_prefixes)
  return scope_op_name_prefixes_.Add();
}
inline void ScopeProto::add_scope_op_name_prefixes(const std::string& value) {
  scope_op_name_prefixes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:oneflow.ScopeProto.scope_op_name_prefixes)
}
inline void ScopeProto::add_scope_op_name_prefixes(std::string&& value) {
  scope_op_name_prefixes_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:oneflow.ScopeProto.scope_op_name_prefixes)
}
inline void ScopeProto::add_scope_op_name_prefixes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  scope_op_name_prefixes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:oneflow.ScopeProto.scope_op_name_prefixes)
}
inline void ScopeProto::add_scope_op_name_prefixes(const char* value, size_t size) {
  scope_op_name_prefixes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:oneflow.ScopeProto.scope_op_name_prefixes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ScopeProto::scope_op_name_prefixes() const {
  // @@protoc_insertion_point(field_list:oneflow.ScopeProto.scope_op_name_prefixes)
  return scope_op_name_prefixes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ScopeProto::mutable_scope_op_name_prefixes() {
  // @@protoc_insertion_point(field_mutable_list:oneflow.ScopeProto.scope_op_name_prefixes)
  return &scope_op_name_prefixes_;
}

// optional int64 parent_scope_symbol_id = 70;
inline bool ScopeProto::has_parent_scope_symbol_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ScopeProto::clear_parent_scope_symbol_id() {
  parent_scope_symbol_id_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ScopeProto::parent_scope_symbol_id() const {
  // @@protoc_insertion_point(field_get:oneflow.ScopeProto.parent_scope_symbol_id)
  return parent_scope_symbol_id_;
}
inline void ScopeProto::set_parent_scope_symbol_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000040u;
  parent_scope_symbol_id_ = value;
  // @@protoc_insertion_point(field_set:oneflow.ScopeProto.parent_scope_symbol_id)
}

// required int64 session_id = 80;
inline bool ScopeProto::has_session_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ScopeProto::clear_session_id() {
  session_id_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ScopeProto::session_id() const {
  // @@protoc_insertion_point(field_get:oneflow.ScopeProto.session_id)
  return session_id_;
}
inline void ScopeProto::set_session_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000080u;
  session_id_ = value;
  // @@protoc_insertion_point(field_set:oneflow.ScopeProto.session_id)
}

// map<string, .oneflow.AttrValue> attr_name2attr_value = 90;
inline int ScopeProto::attr_name2attr_value_size() const {
  return attr_name2attr_value_.size();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::oneflow::AttrValue >&
ScopeProto::attr_name2attr_value() const {
  // @@protoc_insertion_point(field_map:oneflow.ScopeProto.attr_name2attr_value)
  return attr_name2attr_value_.GetMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::oneflow::AttrValue >*
ScopeProto::mutable_attr_name2attr_value() {
  // @@protoc_insertion_point(field_mutable_map:oneflow.ScopeProto.attr_name2attr_value)
  return attr_name2attr_value_.MutableMap();
}

// optional string calculation_pass_name = 100 [default = "forward_pass"];
inline bool ScopeProto::has_calculation_pass_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ScopeProto::clear_calculation_pass_name() {
  calculation_pass_name_.ClearToDefaultNoArena(&::oneflow::ScopeProto::_i_give_permission_to_break_this_code_default_calculation_pass_name_.get());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ScopeProto::calculation_pass_name() const {
  // @@protoc_insertion_point(field_get:oneflow.ScopeProto.calculation_pass_name)
  return calculation_pass_name_.GetNoArena();
}
inline void ScopeProto::set_calculation_pass_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  calculation_pass_name_.SetNoArena(&::oneflow::ScopeProto::_i_give_permission_to_break_this_code_default_calculation_pass_name_.get(), value);
  // @@protoc_insertion_point(field_set:oneflow.ScopeProto.calculation_pass_name)
}
inline void ScopeProto::set_calculation_pass_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  calculation_pass_name_.SetNoArena(
    &::oneflow::ScopeProto::_i_give_permission_to_break_this_code_default_calculation_pass_name_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:oneflow.ScopeProto.calculation_pass_name)
}
inline void ScopeProto::set_calculation_pass_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  calculation_pass_name_.SetNoArena(&::oneflow::ScopeProto::_i_give_permission_to_break_this_code_default_calculation_pass_name_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:oneflow.ScopeProto.calculation_pass_name)
}
inline void ScopeProto::set_calculation_pass_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  calculation_pass_name_.SetNoArena(&::oneflow::ScopeProto::_i_give_permission_to_break_this_code_default_calculation_pass_name_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:oneflow.ScopeProto.calculation_pass_name)
}
inline std::string* ScopeProto::mutable_calculation_pass_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:oneflow.ScopeProto.calculation_pass_name)
  return calculation_pass_name_.MutableNoArena(&::oneflow::ScopeProto::_i_give_permission_to_break_this_code_default_calculation_pass_name_.get());
}
inline std::string* ScopeProto::release_calculation_pass_name() {
  // @@protoc_insertion_point(field_release:oneflow.ScopeProto.calculation_pass_name)
  if (!has_calculation_pass_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return calculation_pass_name_.ReleaseNonDefaultNoArena(&::oneflow::ScopeProto::_i_give_permission_to_break_this_code_default_calculation_pass_name_.get());
}
inline void ScopeProto::set_allocated_calculation_pass_name(std::string* calculation_pass_name) {
  if (calculation_pass_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  calculation_pass_name_.SetAllocatedNoArena(&::oneflow::ScopeProto::_i_give_permission_to_break_this_code_default_calculation_pass_name_.get(), calculation_pass_name);
  // @@protoc_insertion_point(field_set_allocated:oneflow.ScopeProto.calculation_pass_name)
}

// optional string module_name = 110;
inline bool ScopeProto::has_module_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ScopeProto::clear_module_name() {
  module_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ScopeProto::module_name() const {
  // @@protoc_insertion_point(field_get:oneflow.ScopeProto.module_name)
  return module_name_.GetNoArena();
}
inline void ScopeProto::set_module_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  module_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:oneflow.ScopeProto.module_name)
}
inline void ScopeProto::set_module_name(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  module_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:oneflow.ScopeProto.module_name)
}
inline void ScopeProto::set_module_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  module_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:oneflow.ScopeProto.module_name)
}
inline void ScopeProto::set_module_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  module_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:oneflow.ScopeProto.module_name)
}
inline std::string* ScopeProto::mutable_module_name() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:oneflow.ScopeProto.module_name)
  return module_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ScopeProto::release_module_name() {
  // @@protoc_insertion_point(field_release:oneflow.ScopeProto.module_name)
  if (!has_module_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return module_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ScopeProto::set_allocated_module_name(std::string* module_name) {
  if (module_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  module_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), module_name);
  // @@protoc_insertion_point(field_set_allocated:oneflow.ScopeProto.module_name)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace oneflow

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_oneflow_2fcore_2fjob_2fscope_2eproto
