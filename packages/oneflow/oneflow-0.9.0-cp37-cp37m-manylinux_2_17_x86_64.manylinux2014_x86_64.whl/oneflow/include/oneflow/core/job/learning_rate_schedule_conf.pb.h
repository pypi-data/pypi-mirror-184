// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: oneflow/core/job/learning_rate_schedule_conf.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_oneflow_2fcore_2fjob_2flearning_5frate_5fschedule_5fconf_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_oneflow_2fcore_2fjob_2flearning_5frate_5fschedule_5fconf_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_oneflow_2fcore_2fjob_2flearning_5frate_5fschedule_5fconf_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_oneflow_2fcore_2fjob_2flearning_5frate_5fschedule_5fconf_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[16]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_oneflow_2fcore_2fjob_2flearning_5frate_5fschedule_5fconf_2eproto;
namespace oneflow {
class ConstantLRConf;
class ConstantLRConfDefaultTypeInternal;
extern ConstantLRConfDefaultTypeInternal _ConstantLRConf_default_instance_;
class CosineAnnealingDecayConf;
class CosineAnnealingDecayConfDefaultTypeInternal;
extern CosineAnnealingDecayConfDefaultTypeInternal _CosineAnnealingDecayConf_default_instance_;
class CosineAnnealingWarmRestartsConf;
class CosineAnnealingWarmRestartsConfDefaultTypeInternal;
extern CosineAnnealingWarmRestartsConfDefaultTypeInternal _CosineAnnealingWarmRestartsConf_default_instance_;
class CosineDecayConf;
class CosineDecayConfDefaultTypeInternal;
extern CosineDecayConfDefaultTypeInternal _CosineDecayConf_default_instance_;
class ExponentialDecayConf;
class ExponentialDecayConfDefaultTypeInternal;
extern ExponentialDecayConfDefaultTypeInternal _ExponentialDecayConf_default_instance_;
class InverseTimeDecayConf;
class InverseTimeDecayConfDefaultTypeInternal;
extern InverseTimeDecayConfDefaultTypeInternal _InverseTimeDecayConf_default_instance_;
class LearningRateDecayConf;
class LearningRateDecayConfDefaultTypeInternal;
extern LearningRateDecayConfDefaultTypeInternal _LearningRateDecayConf_default_instance_;
class LinearCosineDecayConf;
class LinearCosineDecayConfDefaultTypeInternal;
extern LinearCosineDecayConfDefaultTypeInternal _LinearCosineDecayConf_default_instance_;
class LinearLRConf;
class LinearLRConfDefaultTypeInternal;
extern LinearLRConfDefaultTypeInternal _LinearLRConf_default_instance_;
class MultiStepConf;
class MultiStepConfDefaultTypeInternal;
extern MultiStepConfDefaultTypeInternal _MultiStepConf_default_instance_;
class NaturalExpDecayConf;
class NaturalExpDecayConfDefaultTypeInternal;
extern NaturalExpDecayConfDefaultTypeInternal _NaturalExpDecayConf_default_instance_;
class PiecewiseConstantConf;
class PiecewiseConstantConfDefaultTypeInternal;
extern PiecewiseConstantConfDefaultTypeInternal _PiecewiseConstantConf_default_instance_;
class PiecewiseScalingConf;
class PiecewiseScalingConfDefaultTypeInternal;
extern PiecewiseScalingConfDefaultTypeInternal _PiecewiseScalingConf_default_instance_;
class PolynomialDecayConf;
class PolynomialDecayConfDefaultTypeInternal;
extern PolynomialDecayConfDefaultTypeInternal _PolynomialDecayConf_default_instance_;
class SequentialSchedulerConf;
class SequentialSchedulerConfDefaultTypeInternal;
extern SequentialSchedulerConfDefaultTypeInternal _SequentialSchedulerConf_default_instance_;
class StepConf;
class StepConfDefaultTypeInternal;
extern StepConfDefaultTypeInternal _StepConf_default_instance_;
}  // namespace oneflow
PROTOBUF_NAMESPACE_OPEN
template<> ::oneflow::ConstantLRConf* Arena::CreateMaybeMessage<::oneflow::ConstantLRConf>(Arena*);
template<> ::oneflow::CosineAnnealingDecayConf* Arena::CreateMaybeMessage<::oneflow::CosineAnnealingDecayConf>(Arena*);
template<> ::oneflow::CosineAnnealingWarmRestartsConf* Arena::CreateMaybeMessage<::oneflow::CosineAnnealingWarmRestartsConf>(Arena*);
template<> ::oneflow::CosineDecayConf* Arena::CreateMaybeMessage<::oneflow::CosineDecayConf>(Arena*);
template<> ::oneflow::ExponentialDecayConf* Arena::CreateMaybeMessage<::oneflow::ExponentialDecayConf>(Arena*);
template<> ::oneflow::InverseTimeDecayConf* Arena::CreateMaybeMessage<::oneflow::InverseTimeDecayConf>(Arena*);
template<> ::oneflow::LearningRateDecayConf* Arena::CreateMaybeMessage<::oneflow::LearningRateDecayConf>(Arena*);
template<> ::oneflow::LinearCosineDecayConf* Arena::CreateMaybeMessage<::oneflow::LinearCosineDecayConf>(Arena*);
template<> ::oneflow::LinearLRConf* Arena::CreateMaybeMessage<::oneflow::LinearLRConf>(Arena*);
template<> ::oneflow::MultiStepConf* Arena::CreateMaybeMessage<::oneflow::MultiStepConf>(Arena*);
template<> ::oneflow::NaturalExpDecayConf* Arena::CreateMaybeMessage<::oneflow::NaturalExpDecayConf>(Arena*);
template<> ::oneflow::PiecewiseConstantConf* Arena::CreateMaybeMessage<::oneflow::PiecewiseConstantConf>(Arena*);
template<> ::oneflow::PiecewiseScalingConf* Arena::CreateMaybeMessage<::oneflow::PiecewiseScalingConf>(Arena*);
template<> ::oneflow::PolynomialDecayConf* Arena::CreateMaybeMessage<::oneflow::PolynomialDecayConf>(Arena*);
template<> ::oneflow::SequentialSchedulerConf* Arena::CreateMaybeMessage<::oneflow::SequentialSchedulerConf>(Arena*);
template<> ::oneflow::StepConf* Arena::CreateMaybeMessage<::oneflow::StepConf>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace oneflow {

// ===================================================================

class ExponentialDecayConf :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:oneflow.ExponentialDecayConf) */ {
 public:
  ExponentialDecayConf();
  virtual ~ExponentialDecayConf();

  ExponentialDecayConf(const ExponentialDecayConf& from);
  ExponentialDecayConf(ExponentialDecayConf&& from) noexcept
    : ExponentialDecayConf() {
    *this = ::std::move(from);
  }

  inline ExponentialDecayConf& operator=(const ExponentialDecayConf& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExponentialDecayConf& operator=(ExponentialDecayConf&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ExponentialDecayConf& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ExponentialDecayConf* internal_default_instance() {
    return reinterpret_cast<const ExponentialDecayConf*>(
               &_ExponentialDecayConf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ExponentialDecayConf& a, ExponentialDecayConf& b) {
    a.Swap(&b);
  }
  inline void Swap(ExponentialDecayConf* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ExponentialDecayConf* New() const final {
    return CreateMaybeMessage<ExponentialDecayConf>(nullptr);
  }

  ExponentialDecayConf* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ExponentialDecayConf>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ExponentialDecayConf& from);
  void MergeFrom(const ExponentialDecayConf& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExponentialDecayConf* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "oneflow.ExponentialDecayConf";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_oneflow_2fcore_2fjob_2flearning_5frate_5fschedule_5fconf_2eproto);
    return ::descriptor_table_oneflow_2fcore_2fjob_2flearning_5frate_5fschedule_5fconf_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDecayBatchesFieldNumber = 1,
    kDecayRateFieldNumber = 2,
    kStaircaseFieldNumber = 3,
  };
  // required int64 decay_batches = 1;
  bool has_decay_batches() const;
  void clear_decay_batches();
  ::PROTOBUF_NAMESPACE_ID::int64 decay_batches() const;
  void set_decay_batches(::PROTOBUF_NAMESPACE_ID::int64 value);

  // required double decay_rate = 2;
  bool has_decay_rate() const;
  void clear_decay_rate();
  double decay_rate() const;
  void set_decay_rate(double value);

  // optional bool staircase = 3 [default = false];
  bool has_staircase() const;
  void clear_staircase();
  bool staircase() const;
  void set_staircase(bool value);

  // @@protoc_insertion_point(class_scope:oneflow.ExponentialDecayConf)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 decay_batches_;
  double decay_rate_;
  bool staircase_;
  friend struct ::TableStruct_oneflow_2fcore_2fjob_2flearning_5frate_5fschedule_5fconf_2eproto;
};
// -------------------------------------------------------------------

class InverseTimeDecayConf :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:oneflow.InverseTimeDecayConf) */ {
 public:
  InverseTimeDecayConf();
  virtual ~InverseTimeDecayConf();

  InverseTimeDecayConf(const InverseTimeDecayConf& from);
  InverseTimeDecayConf(InverseTimeDecayConf&& from) noexcept
    : InverseTimeDecayConf() {
    *this = ::std::move(from);
  }

  inline InverseTimeDecayConf& operator=(const InverseTimeDecayConf& from) {
    CopyFrom(from);
    return *this;
  }
  inline InverseTimeDecayConf& operator=(InverseTimeDecayConf&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InverseTimeDecayConf& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InverseTimeDecayConf* internal_default_instance() {
    return reinterpret_cast<const InverseTimeDecayConf*>(
               &_InverseTimeDecayConf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(InverseTimeDecayConf& a, InverseTimeDecayConf& b) {
    a.Swap(&b);
  }
  inline void Swap(InverseTimeDecayConf* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InverseTimeDecayConf* New() const final {
    return CreateMaybeMessage<InverseTimeDecayConf>(nullptr);
  }

  InverseTimeDecayConf* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InverseTimeDecayConf>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InverseTimeDecayConf& from);
  void MergeFrom(const InverseTimeDecayConf& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InverseTimeDecayConf* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "oneflow.InverseTimeDecayConf";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_oneflow_2fcore_2fjob_2flearning_5frate_5fschedule_5fconf_2eproto);
    return ::descriptor_table_oneflow_2fcore_2fjob_2flearning_5frate_5fschedule_5fconf_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDecayBatchesFieldNumber = 1,
    kDecayRateFieldNumber = 2,
    kStaircaseFieldNumber = 3,
  };
  // required int64 decay_batches = 1;
  bool has_decay_batches() const;
  void clear_decay_batches();
  ::PROTOBUF_NAMESPACE_ID::int64 decay_batches() const;
  void set_decay_batches(::PROTOBUF_NAMESPACE_ID::int64 value);

  // required double decay_rate = 2;
  bool has_decay_rate() const;
  void clear_decay_rate();
  double decay_rate() const;
  void set_decay_rate(double value);

  // optional bool staircase = 3 [default = false];
  bool has_staircase() const;
  void clear_staircase();
  bool staircase() const;
  void set_staircase(bool value);

  // @@protoc_insertion_point(class_scope:oneflow.InverseTimeDecayConf)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 decay_batches_;
  double decay_rate_;
  bool staircase_;
  friend struct ::TableStruct_oneflow_2fcore_2fjob_2flearning_5frate_5fschedule_5fconf_2eproto;
};
// -------------------------------------------------------------------

class NaturalExpDecayConf :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:oneflow.NaturalExpDecayConf) */ {
 public:
  NaturalExpDecayConf();
  virtual ~NaturalExpDecayConf();

  NaturalExpDecayConf(const NaturalExpDecayConf& from);
  NaturalExpDecayConf(NaturalExpDecayConf&& from) noexcept
    : NaturalExpDecayConf() {
    *this = ::std::move(from);
  }

  inline NaturalExpDecayConf& operator=(const NaturalExpDecayConf& from) {
    CopyFrom(from);
    return *this;
  }
  inline NaturalExpDecayConf& operator=(NaturalExpDecayConf&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NaturalExpDecayConf& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NaturalExpDecayConf* internal_default_instance() {
    return reinterpret_cast<const NaturalExpDecayConf*>(
               &_NaturalExpDecayConf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(NaturalExpDecayConf& a, NaturalExpDecayConf& b) {
    a.Swap(&b);
  }
  inline void Swap(NaturalExpDecayConf* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NaturalExpDecayConf* New() const final {
    return CreateMaybeMessage<NaturalExpDecayConf>(nullptr);
  }

  NaturalExpDecayConf* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NaturalExpDecayConf>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NaturalExpDecayConf& from);
  void MergeFrom(const NaturalExpDecayConf& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NaturalExpDecayConf* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "oneflow.NaturalExpDecayConf";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_oneflow_2fcore_2fjob_2flearning_5frate_5fschedule_5fconf_2eproto);
    return ::descriptor_table_oneflow_2fcore_2fjob_2flearning_5frate_5fschedule_5fconf_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDecayBatchesFieldNumber = 1,
    kDecayRateFieldNumber = 2,
    kStaircaseFieldNumber = 3,
  };
  // required int64 decay_batches = 1;
  bool has_decay_batches() const;
  void clear_decay_batches();
  ::PROTOBUF_NAMESPACE_ID::int64 decay_batches() const;
  void set_decay_batches(::PROTOBUF_NAMESPACE_ID::int64 value);

  // required double decay_rate = 2;
  bool has_decay_rate() const;
  void clear_decay_rate();
  double decay_rate() const;
  void set_decay_rate(double value);

  // optional bool staircase = 3 [default = false];
  bool has_staircase() const;
  void clear_staircase();
  bool staircase() const;
  void set_staircase(bool value);

  // @@protoc_insertion_point(class_scope:oneflow.NaturalExpDecayConf)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 decay_batches_;
  double decay_rate_;
  bool staircase_;
  friend struct ::TableStruct_oneflow_2fcore_2fjob_2flearning_5frate_5fschedule_5fconf_2eproto;
};
// -------------------------------------------------------------------

class PiecewiseConstantConf :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:oneflow.PiecewiseConstantConf) */ {
 public:
  PiecewiseConstantConf();
  virtual ~PiecewiseConstantConf();

  PiecewiseConstantConf(const PiecewiseConstantConf& from);
  PiecewiseConstantConf(PiecewiseConstantConf&& from) noexcept
    : PiecewiseConstantConf() {
    *this = ::std::move(from);
  }

  inline PiecewiseConstantConf& operator=(const PiecewiseConstantConf& from) {
    CopyFrom(from);
    return *this;
  }
  inline PiecewiseConstantConf& operator=(PiecewiseConstantConf&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PiecewiseConstantConf& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PiecewiseConstantConf* internal_default_instance() {
    return reinterpret_cast<const PiecewiseConstantConf*>(
               &_PiecewiseConstantConf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PiecewiseConstantConf& a, PiecewiseConstantConf& b) {
    a.Swap(&b);
  }
  inline void Swap(PiecewiseConstantConf* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PiecewiseConstantConf* New() const final {
    return CreateMaybeMessage<PiecewiseConstantConf>(nullptr);
  }

  PiecewiseConstantConf* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PiecewiseConstantConf>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PiecewiseConstantConf& from);
  void MergeFrom(const PiecewiseConstantConf& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PiecewiseConstantConf* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "oneflow.PiecewiseConstantConf";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_oneflow_2fcore_2fjob_2flearning_5frate_5fschedule_5fconf_2eproto);
    return ::descriptor_table_oneflow_2fcore_2fjob_2flearning_5frate_5fschedule_5fconf_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBoundariesFieldNumber = 1,
    kValuesFieldNumber = 2,
  };
  // repeated int64 boundaries = 1;
  int boundaries_size() const;
  void clear_boundaries();
  ::PROTOBUF_NAMESPACE_ID::int64 boundaries(int index) const;
  void set_boundaries(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_boundaries(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      boundaries() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_boundaries();

  // repeated double values = 2;
  int values_size() const;
  void clear_values();
  double values(int index) const;
  void set_values(int index, double value);
  void add_values(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_values();

  // @@protoc_insertion_point(class_scope:oneflow.PiecewiseConstantConf)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > boundaries_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > values_;
  friend struct ::TableStruct_oneflow_2fcore_2fjob_2flearning_5frate_5fschedule_5fconf_2eproto;
};
// -------------------------------------------------------------------

class PolynomialDecayConf :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:oneflow.PolynomialDecayConf) */ {
 public:
  PolynomialDecayConf();
  virtual ~PolynomialDecayConf();

  PolynomialDecayConf(const PolynomialDecayConf& from);
  PolynomialDecayConf(PolynomialDecayConf&& from) noexcept
    : PolynomialDecayConf() {
    *this = ::std::move(from);
  }

  inline PolynomialDecayConf& operator=(const PolynomialDecayConf& from) {
    CopyFrom(from);
    return *this;
  }
  inline PolynomialDecayConf& operator=(PolynomialDecayConf&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PolynomialDecayConf& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PolynomialDecayConf* internal_default_instance() {
    return reinterpret_cast<const PolynomialDecayConf*>(
               &_PolynomialDecayConf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(PolynomialDecayConf& a, PolynomialDecayConf& b) {
    a.Swap(&b);
  }
  inline void Swap(PolynomialDecayConf* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PolynomialDecayConf* New() const final {
    return CreateMaybeMessage<PolynomialDecayConf>(nullptr);
  }

  PolynomialDecayConf* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PolynomialDecayConf>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PolynomialDecayConf& from);
  void MergeFrom(const PolynomialDecayConf& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PolynomialDecayConf* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "oneflow.PolynomialDecayConf";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_oneflow_2fcore_2fjob_2flearning_5frate_5fschedule_5fconf_2eproto);
    return ::descriptor_table_oneflow_2fcore_2fjob_2flearning_5frate_5fschedule_5fconf_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDecayBatchesFieldNumber = 1,
    kCycleFieldNumber = 4,
    kEndLearningRateFieldNumber = 2,
    kPowerFieldNumber = 3,
  };
  // required int64 decay_batches = 1;
  bool has_decay_batches() const;
  void clear_decay_batches();
  ::PROTOBUF_NAMESPACE_ID::int64 decay_batches() const;
  void set_decay_batches(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional bool cycle = 4 [default = false];
  bool has_cycle() const;
  void clear_cycle();
  bool cycle() const;
  void set_cycle(bool value);

  // optional double end_learning_rate = 2 [default = 0.0001];
  bool has_end_learning_rate() const;
  void clear_end_learning_rate();
  double end_learning_rate() const;
  void set_end_learning_rate(double value);

  // optional double power = 3 [default = 1];
  bool has_power() const;
  void clear_power();
  double power() const;
  void set_power(double value);

  // @@protoc_insertion_point(class_scope:oneflow.PolynomialDecayConf)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 decay_batches_;
  bool cycle_;
  double end_learning_rate_;
  double power_;
  friend struct ::TableStruct_oneflow_2fcore_2fjob_2flearning_5frate_5fschedule_5fconf_2eproto;
};
// -------------------------------------------------------------------

class CosineDecayConf :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:oneflow.CosineDecayConf) */ {
 public:
  CosineDecayConf();
  virtual ~CosineDecayConf();

  CosineDecayConf(const CosineDecayConf& from);
  CosineDecayConf(CosineDecayConf&& from) noexcept
    : CosineDecayConf() {
    *this = ::std::move(from);
  }

  inline CosineDecayConf& operator=(const CosineDecayConf& from) {
    CopyFrom(from);
    return *this;
  }
  inline CosineDecayConf& operator=(CosineDecayConf&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CosineDecayConf& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CosineDecayConf* internal_default_instance() {
    return reinterpret_cast<const CosineDecayConf*>(
               &_CosineDecayConf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CosineDecayConf& a, CosineDecayConf& b) {
    a.Swap(&b);
  }
  inline void Swap(CosineDecayConf* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CosineDecayConf* New() const final {
    return CreateMaybeMessage<CosineDecayConf>(nullptr);
  }

  CosineDecayConf* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CosineDecayConf>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CosineDecayConf& from);
  void MergeFrom(const CosineDecayConf& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CosineDecayConf* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "oneflow.CosineDecayConf";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_oneflow_2fcore_2fjob_2flearning_5frate_5fschedule_5fconf_2eproto);
    return ::descriptor_table_oneflow_2fcore_2fjob_2flearning_5frate_5fschedule_5fconf_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDecayBatchesFieldNumber = 1,
    kAlphaFieldNumber = 2,
  };
  // required int64 decay_batches = 1;
  bool has_decay_batches() const;
  void clear_decay_batches();
  ::PROTOBUF_NAMESPACE_ID::int64 decay_batches() const;
  void set_decay_batches(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional double alpha = 2 [default = 0];
  bool has_alpha() const;
  void clear_alpha();
  double alpha() const;
  void set_alpha(double value);

  // @@protoc_insertion_point(class_scope:oneflow.CosineDecayConf)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 decay_batches_;
  double alpha_;
  friend struct ::TableStruct_oneflow_2fcore_2fjob_2flearning_5frate_5fschedule_5fconf_2eproto;
};
// -------------------------------------------------------------------

class CosineAnnealingDecayConf :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:oneflow.CosineAnnealingDecayConf) */ {
 public:
  CosineAnnealingDecayConf();
  virtual ~CosineAnnealingDecayConf();

  CosineAnnealingDecayConf(const CosineAnnealingDecayConf& from);
  CosineAnnealingDecayConf(CosineAnnealingDecayConf&& from) noexcept
    : CosineAnnealingDecayConf() {
    *this = ::std::move(from);
  }

  inline CosineAnnealingDecayConf& operator=(const CosineAnnealingDecayConf& from) {
    CopyFrom(from);
    return *this;
  }
  inline CosineAnnealingDecayConf& operator=(CosineAnnealingDecayConf&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CosineAnnealingDecayConf& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CosineAnnealingDecayConf* internal_default_instance() {
    return reinterpret_cast<const CosineAnnealingDecayConf*>(
               &_CosineAnnealingDecayConf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CosineAnnealingDecayConf& a, CosineAnnealingDecayConf& b) {
    a.Swap(&b);
  }
  inline void Swap(CosineAnnealingDecayConf* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CosineAnnealingDecayConf* New() const final {
    return CreateMaybeMessage<CosineAnnealingDecayConf>(nullptr);
  }

  CosineAnnealingDecayConf* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CosineAnnealingDecayConf>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CosineAnnealingDecayConf& from);
  void MergeFrom(const CosineAnnealingDecayConf& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CosineAnnealingDecayConf* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "oneflow.CosineAnnealingDecayConf";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_oneflow_2fcore_2fjob_2flearning_5frate_5fschedule_5fconf_2eproto);
    return ::descriptor_table_oneflow_2fcore_2fjob_2flearning_5frate_5fschedule_5fconf_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTMaxFieldNumber = 1,
    kEtaMinFieldNumber = 2,
  };
  // required int64 t_max = 1;
  bool has_t_max() const;
  void clear_t_max();
  ::PROTOBUF_NAMESPACE_ID::int64 t_max() const;
  void set_t_max(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional double eta_min = 2 [default = 0];
  bool has_eta_min() const;
  void clear_eta_min();
  double eta_min() const;
  void set_eta_min(double value);

  // @@protoc_insertion_point(class_scope:oneflow.CosineAnnealingDecayConf)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 t_max_;
  double eta_min_;
  friend struct ::TableStruct_oneflow_2fcore_2fjob_2flearning_5frate_5fschedule_5fconf_2eproto;
};
// -------------------------------------------------------------------

class LinearCosineDecayConf :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:oneflow.LinearCosineDecayConf) */ {
 public:
  LinearCosineDecayConf();
  virtual ~LinearCosineDecayConf();

  LinearCosineDecayConf(const LinearCosineDecayConf& from);
  LinearCosineDecayConf(LinearCosineDecayConf&& from) noexcept
    : LinearCosineDecayConf() {
    *this = ::std::move(from);
  }

  inline LinearCosineDecayConf& operator=(const LinearCosineDecayConf& from) {
    CopyFrom(from);
    return *this;
  }
  inline LinearCosineDecayConf& operator=(LinearCosineDecayConf&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LinearCosineDecayConf& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LinearCosineDecayConf* internal_default_instance() {
    return reinterpret_cast<const LinearCosineDecayConf*>(
               &_LinearCosineDecayConf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(LinearCosineDecayConf& a, LinearCosineDecayConf& b) {
    a.Swap(&b);
  }
  inline void Swap(LinearCosineDecayConf* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LinearCosineDecayConf* New() const final {
    return CreateMaybeMessage<LinearCosineDecayConf>(nullptr);
  }

  LinearCosineDecayConf* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LinearCosineDecayConf>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LinearCosineDecayConf& from);
  void MergeFrom(const LinearCosineDecayConf& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LinearCosineDecayConf* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "oneflow.LinearCosineDecayConf";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_oneflow_2fcore_2fjob_2flearning_5frate_5fschedule_5fconf_2eproto);
    return ::descriptor_table_oneflow_2fcore_2fjob_2flearning_5frate_5fschedule_5fconf_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDecayBatchesFieldNumber = 1,
    kAlphaFieldNumber = 3,
    kNumPeriodsFieldNumber = 2,
    kBetaFieldNumber = 4,
  };
  // required int64 decay_batches = 1;
  bool has_decay_batches() const;
  void clear_decay_batches();
  ::PROTOBUF_NAMESPACE_ID::int64 decay_batches() const;
  void set_decay_batches(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional double alpha = 3 [default = 0];
  bool has_alpha() const;
  void clear_alpha();
  double alpha() const;
  void set_alpha(double value);

  // optional double num_periods = 2 [default = 0.5];
  bool has_num_periods() const;
  void clear_num_periods();
  double num_periods() const;
  void set_num_periods(double value);

  // optional double beta = 4 [default = 0.001];
  bool has_beta() const;
  void clear_beta();
  double beta() const;
  void set_beta(double value);

  // @@protoc_insertion_point(class_scope:oneflow.LinearCosineDecayConf)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 decay_batches_;
  double alpha_;
  double num_periods_;
  double beta_;
  friend struct ::TableStruct_oneflow_2fcore_2fjob_2flearning_5frate_5fschedule_5fconf_2eproto;
};
// -------------------------------------------------------------------

class PiecewiseScalingConf :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:oneflow.PiecewiseScalingConf) */ {
 public:
  PiecewiseScalingConf();
  virtual ~PiecewiseScalingConf();

  PiecewiseScalingConf(const PiecewiseScalingConf& from);
  PiecewiseScalingConf(PiecewiseScalingConf&& from) noexcept
    : PiecewiseScalingConf() {
    *this = ::std::move(from);
  }

  inline PiecewiseScalingConf& operator=(const PiecewiseScalingConf& from) {
    CopyFrom(from);
    return *this;
  }
  inline PiecewiseScalingConf& operator=(PiecewiseScalingConf&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PiecewiseScalingConf& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PiecewiseScalingConf* internal_default_instance() {
    return reinterpret_cast<const PiecewiseScalingConf*>(
               &_PiecewiseScalingConf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(PiecewiseScalingConf& a, PiecewiseScalingConf& b) {
    a.Swap(&b);
  }
  inline void Swap(PiecewiseScalingConf* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PiecewiseScalingConf* New() const final {
    return CreateMaybeMessage<PiecewiseScalingConf>(nullptr);
  }

  PiecewiseScalingConf* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PiecewiseScalingConf>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PiecewiseScalingConf& from);
  void MergeFrom(const PiecewiseScalingConf& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PiecewiseScalingConf* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "oneflow.PiecewiseScalingConf";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_oneflow_2fcore_2fjob_2flearning_5frate_5fschedule_5fconf_2eproto);
    return ::descriptor_table_oneflow_2fcore_2fjob_2flearning_5frate_5fschedule_5fconf_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBoundariesFieldNumber = 1,
    kScalesFieldNumber = 2,
  };
  // repeated int64 boundaries = 1;
  int boundaries_size() const;
  void clear_boundaries();
  ::PROTOBUF_NAMESPACE_ID::int64 boundaries(int index) const;
  void set_boundaries(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_boundaries(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      boundaries() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_boundaries();

  // repeated double scales = 2;
  int scales_size() const;
  void clear_scales();
  double scales(int index) const;
  void set_scales(int index, double value);
  void add_scales(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      scales() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_scales();

  // @@protoc_insertion_point(class_scope:oneflow.PiecewiseScalingConf)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > boundaries_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > scales_;
  friend struct ::TableStruct_oneflow_2fcore_2fjob_2flearning_5frate_5fschedule_5fconf_2eproto;
};
// -------------------------------------------------------------------

class StepConf :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:oneflow.StepConf) */ {
 public:
  StepConf();
  virtual ~StepConf();

  StepConf(const StepConf& from);
  StepConf(StepConf&& from) noexcept
    : StepConf() {
    *this = ::std::move(from);
  }

  inline StepConf& operator=(const StepConf& from) {
    CopyFrom(from);
    return *this;
  }
  inline StepConf& operator=(StepConf&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StepConf& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StepConf* internal_default_instance() {
    return reinterpret_cast<const StepConf*>(
               &_StepConf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(StepConf& a, StepConf& b) {
    a.Swap(&b);
  }
  inline void Swap(StepConf* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StepConf* New() const final {
    return CreateMaybeMessage<StepConf>(nullptr);
  }

  StepConf* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StepConf>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StepConf& from);
  void MergeFrom(const StepConf& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StepConf* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "oneflow.StepConf";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_oneflow_2fcore_2fjob_2flearning_5frate_5fschedule_5fconf_2eproto);
    return ::descriptor_table_oneflow_2fcore_2fjob_2flearning_5frate_5fschedule_5fconf_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStepSizeFieldNumber = 1,
    kGammaFieldNumber = 2,
  };
  // required int64 step_size = 1;
  bool has_step_size() const;
  void clear_step_size();
  ::PROTOBUF_NAMESPACE_ID::int64 step_size() const;
  void set_step_size(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional double gamma = 2 [default = 0.1];
  bool has_gamma() const;
  void clear_gamma();
  double gamma() const;
  void set_gamma(double value);

  // @@protoc_insertion_point(class_scope:oneflow.StepConf)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 step_size_;
  double gamma_;
  friend struct ::TableStruct_oneflow_2fcore_2fjob_2flearning_5frate_5fschedule_5fconf_2eproto;
};
// -------------------------------------------------------------------

class MultiStepConf :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:oneflow.MultiStepConf) */ {
 public:
  MultiStepConf();
  virtual ~MultiStepConf();

  MultiStepConf(const MultiStepConf& from);
  MultiStepConf(MultiStepConf&& from) noexcept
    : MultiStepConf() {
    *this = ::std::move(from);
  }

  inline MultiStepConf& operator=(const MultiStepConf& from) {
    CopyFrom(from);
    return *this;
  }
  inline MultiStepConf& operator=(MultiStepConf&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MultiStepConf& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MultiStepConf* internal_default_instance() {
    return reinterpret_cast<const MultiStepConf*>(
               &_MultiStepConf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(MultiStepConf& a, MultiStepConf& b) {
    a.Swap(&b);
  }
  inline void Swap(MultiStepConf* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MultiStepConf* New() const final {
    return CreateMaybeMessage<MultiStepConf>(nullptr);
  }

  MultiStepConf* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MultiStepConf>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MultiStepConf& from);
  void MergeFrom(const MultiStepConf& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MultiStepConf* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "oneflow.MultiStepConf";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_oneflow_2fcore_2fjob_2flearning_5frate_5fschedule_5fconf_2eproto);
    return ::descriptor_table_oneflow_2fcore_2fjob_2flearning_5frate_5fschedule_5fconf_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMilestonesFieldNumber = 1,
    kGammaFieldNumber = 2,
  };
  // repeated int64 milestones = 1;
  int milestones_size() const;
  void clear_milestones();
  ::PROTOBUF_NAMESPACE_ID::int64 milestones(int index) const;
  void set_milestones(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_milestones(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      milestones() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_milestones();

  // optional double gamma = 2 [default = 0.1];
  bool has_gamma() const;
  void clear_gamma();
  double gamma() const;
  void set_gamma(double value);

  // @@protoc_insertion_point(class_scope:oneflow.MultiStepConf)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > milestones_;
  double gamma_;
  friend struct ::TableStruct_oneflow_2fcore_2fjob_2flearning_5frate_5fschedule_5fconf_2eproto;
};
// -------------------------------------------------------------------

class LinearLRConf :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:oneflow.LinearLRConf) */ {
 public:
  LinearLRConf();
  virtual ~LinearLRConf();

  LinearLRConf(const LinearLRConf& from);
  LinearLRConf(LinearLRConf&& from) noexcept
    : LinearLRConf() {
    *this = ::std::move(from);
  }

  inline LinearLRConf& operator=(const LinearLRConf& from) {
    CopyFrom(from);
    return *this;
  }
  inline LinearLRConf& operator=(LinearLRConf&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LinearLRConf& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LinearLRConf* internal_default_instance() {
    return reinterpret_cast<const LinearLRConf*>(
               &_LinearLRConf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(LinearLRConf& a, LinearLRConf& b) {
    a.Swap(&b);
  }
  inline void Swap(LinearLRConf* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LinearLRConf* New() const final {
    return CreateMaybeMessage<LinearLRConf>(nullptr);
  }

  LinearLRConf* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LinearLRConf>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LinearLRConf& from);
  void MergeFrom(const LinearLRConf& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LinearLRConf* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "oneflow.LinearLRConf";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_oneflow_2fcore_2fjob_2flearning_5frate_5fschedule_5fconf_2eproto);
    return ::descriptor_table_oneflow_2fcore_2fjob_2flearning_5frate_5fschedule_5fconf_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStartFactorFieldNumber = 1,
    kEndFactorFieldNumber = 2,
    kTotalItersFieldNumber = 3,
  };
  // required double start_factor = 1;
  bool has_start_factor() const;
  void clear_start_factor();
  double start_factor() const;
  void set_start_factor(double value);

  // required double end_factor = 2;
  bool has_end_factor() const;
  void clear_end_factor();
  double end_factor() const;
  void set_end_factor(double value);

  // required int64 total_iters = 3;
  bool has_total_iters() const;
  void clear_total_iters();
  ::PROTOBUF_NAMESPACE_ID::int64 total_iters() const;
  void set_total_iters(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:oneflow.LinearLRConf)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double start_factor_;
  double end_factor_;
  ::PROTOBUF_NAMESPACE_ID::int64 total_iters_;
  friend struct ::TableStruct_oneflow_2fcore_2fjob_2flearning_5frate_5fschedule_5fconf_2eproto;
};
// -------------------------------------------------------------------

class ConstantLRConf :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:oneflow.ConstantLRConf) */ {
 public:
  ConstantLRConf();
  virtual ~ConstantLRConf();

  ConstantLRConf(const ConstantLRConf& from);
  ConstantLRConf(ConstantLRConf&& from) noexcept
    : ConstantLRConf() {
    *this = ::std::move(from);
  }

  inline ConstantLRConf& operator=(const ConstantLRConf& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConstantLRConf& operator=(ConstantLRConf&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConstantLRConf& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConstantLRConf* internal_default_instance() {
    return reinterpret_cast<const ConstantLRConf*>(
               &_ConstantLRConf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(ConstantLRConf& a, ConstantLRConf& b) {
    a.Swap(&b);
  }
  inline void Swap(ConstantLRConf* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConstantLRConf* New() const final {
    return CreateMaybeMessage<ConstantLRConf>(nullptr);
  }

  ConstantLRConf* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConstantLRConf>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConstantLRConf& from);
  void MergeFrom(const ConstantLRConf& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConstantLRConf* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "oneflow.ConstantLRConf";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_oneflow_2fcore_2fjob_2flearning_5frate_5fschedule_5fconf_2eproto);
    return ::descriptor_table_oneflow_2fcore_2fjob_2flearning_5frate_5fschedule_5fconf_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFactorFieldNumber = 1,
    kTotalItersFieldNumber = 2,
  };
  // required double factor = 1;
  bool has_factor() const;
  void clear_factor();
  double factor() const;
  void set_factor(double value);

  // required int64 total_iters = 2;
  bool has_total_iters() const;
  void clear_total_iters();
  ::PROTOBUF_NAMESPACE_ID::int64 total_iters() const;
  void set_total_iters(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:oneflow.ConstantLRConf)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double factor_;
  ::PROTOBUF_NAMESPACE_ID::int64 total_iters_;
  friend struct ::TableStruct_oneflow_2fcore_2fjob_2flearning_5frate_5fschedule_5fconf_2eproto;
};
// -------------------------------------------------------------------

class CosineAnnealingWarmRestartsConf :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:oneflow.CosineAnnealingWarmRestartsConf) */ {
 public:
  CosineAnnealingWarmRestartsConf();
  virtual ~CosineAnnealingWarmRestartsConf();

  CosineAnnealingWarmRestartsConf(const CosineAnnealingWarmRestartsConf& from);
  CosineAnnealingWarmRestartsConf(CosineAnnealingWarmRestartsConf&& from) noexcept
    : CosineAnnealingWarmRestartsConf() {
    *this = ::std::move(from);
  }

  inline CosineAnnealingWarmRestartsConf& operator=(const CosineAnnealingWarmRestartsConf& from) {
    CopyFrom(from);
    return *this;
  }
  inline CosineAnnealingWarmRestartsConf& operator=(CosineAnnealingWarmRestartsConf&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CosineAnnealingWarmRestartsConf& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CosineAnnealingWarmRestartsConf* internal_default_instance() {
    return reinterpret_cast<const CosineAnnealingWarmRestartsConf*>(
               &_CosineAnnealingWarmRestartsConf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(CosineAnnealingWarmRestartsConf& a, CosineAnnealingWarmRestartsConf& b) {
    a.Swap(&b);
  }
  inline void Swap(CosineAnnealingWarmRestartsConf* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CosineAnnealingWarmRestartsConf* New() const final {
    return CreateMaybeMessage<CosineAnnealingWarmRestartsConf>(nullptr);
  }

  CosineAnnealingWarmRestartsConf* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CosineAnnealingWarmRestartsConf>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CosineAnnealingWarmRestartsConf& from);
  void MergeFrom(const CosineAnnealingWarmRestartsConf& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CosineAnnealingWarmRestartsConf* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "oneflow.CosineAnnealingWarmRestartsConf";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_oneflow_2fcore_2fjob_2flearning_5frate_5fschedule_5fconf_2eproto);
    return ::descriptor_table_oneflow_2fcore_2fjob_2flearning_5frate_5fschedule_5fconf_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTInitialFieldNumber = 1,
    kTMultFieldNumber = 2,
    kEtaMinFieldNumber = 3,
    kDecayRateFieldNumber = 4,
    kRestartLimitFieldNumber = 5,
  };
  // required int64 t_initial = 1;
  bool has_t_initial() const;
  void clear_t_initial();
  ::PROTOBUF_NAMESPACE_ID::int64 t_initial() const;
  void set_t_initial(::PROTOBUF_NAMESPACE_ID::int64 value);

  // required int64 t_mult = 2;
  bool has_t_mult() const;
  void clear_t_mult();
  ::PROTOBUF_NAMESPACE_ID::int64 t_mult() const;
  void set_t_mult(::PROTOBUF_NAMESPACE_ID::int64 value);

  // required double eta_min = 3;
  bool has_eta_min() const;
  void clear_eta_min();
  double eta_min() const;
  void set_eta_min(double value);

  // required double decay_rate = 4;
  bool has_decay_rate() const;
  void clear_decay_rate();
  double decay_rate() const;
  void set_decay_rate(double value);

  // required int64 restart_limit = 5;
  bool has_restart_limit() const;
  void clear_restart_limit();
  ::PROTOBUF_NAMESPACE_ID::int64 restart_limit() const;
  void set_restart_limit(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:oneflow.CosineAnnealingWarmRestartsConf)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 t_initial_;
  ::PROTOBUF_NAMESPACE_ID::int64 t_mult_;
  double eta_min_;
  double decay_rate_;
  ::PROTOBUF_NAMESPACE_ID::int64 restart_limit_;
  friend struct ::TableStruct_oneflow_2fcore_2fjob_2flearning_5frate_5fschedule_5fconf_2eproto;
};
// -------------------------------------------------------------------

class SequentialSchedulerConf :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:oneflow.SequentialSchedulerConf) */ {
 public:
  SequentialSchedulerConf();
  virtual ~SequentialSchedulerConf();

  SequentialSchedulerConf(const SequentialSchedulerConf& from);
  SequentialSchedulerConf(SequentialSchedulerConf&& from) noexcept
    : SequentialSchedulerConf() {
    *this = ::std::move(from);
  }

  inline SequentialSchedulerConf& operator=(const SequentialSchedulerConf& from) {
    CopyFrom(from);
    return *this;
  }
  inline SequentialSchedulerConf& operator=(SequentialSchedulerConf&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SequentialSchedulerConf& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SequentialSchedulerConf* internal_default_instance() {
    return reinterpret_cast<const SequentialSchedulerConf*>(
               &_SequentialSchedulerConf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(SequentialSchedulerConf& a, SequentialSchedulerConf& b) {
    a.Swap(&b);
  }
  inline void Swap(SequentialSchedulerConf* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SequentialSchedulerConf* New() const final {
    return CreateMaybeMessage<SequentialSchedulerConf>(nullptr);
  }

  SequentialSchedulerConf* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SequentialSchedulerConf>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SequentialSchedulerConf& from);
  void MergeFrom(const SequentialSchedulerConf& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SequentialSchedulerConf* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "oneflow.SequentialSchedulerConf";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_oneflow_2fcore_2fjob_2flearning_5frate_5fschedule_5fconf_2eproto);
    return ::descriptor_table_oneflow_2fcore_2fjob_2flearning_5frate_5fschedule_5fconf_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSchedulersFieldNumber = 1,
    kMilestonesFieldNumber = 2,
    kIntervalRescalingFieldNumber = 3,
  };
  // repeated .oneflow.LearningRateDecayConf schedulers = 1;
  int schedulers_size() const;
  void clear_schedulers();
  ::oneflow::LearningRateDecayConf* mutable_schedulers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oneflow::LearningRateDecayConf >*
      mutable_schedulers();
  const ::oneflow::LearningRateDecayConf& schedulers(int index) const;
  ::oneflow::LearningRateDecayConf* add_schedulers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oneflow::LearningRateDecayConf >&
      schedulers() const;

  // repeated int64 milestones = 2;
  int milestones_size() const;
  void clear_milestones();
  ::PROTOBUF_NAMESPACE_ID::int64 milestones(int index) const;
  void set_milestones(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_milestones(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      milestones() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_milestones();

  // repeated int32 interval_rescaling = 3;
  int interval_rescaling_size() const;
  void clear_interval_rescaling();
  ::PROTOBUF_NAMESPACE_ID::int32 interval_rescaling(int index) const;
  void set_interval_rescaling(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_interval_rescaling(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      interval_rescaling() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_interval_rescaling();

  // @@protoc_insertion_point(class_scope:oneflow.SequentialSchedulerConf)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oneflow::LearningRateDecayConf > schedulers_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > milestones_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > interval_rescaling_;
  friend struct ::TableStruct_oneflow_2fcore_2fjob_2flearning_5frate_5fschedule_5fconf_2eproto;
};
// -------------------------------------------------------------------

class LearningRateDecayConf :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:oneflow.LearningRateDecayConf) */ {
 public:
  LearningRateDecayConf();
  virtual ~LearningRateDecayConf();

  LearningRateDecayConf(const LearningRateDecayConf& from);
  LearningRateDecayConf(LearningRateDecayConf&& from) noexcept
    : LearningRateDecayConf() {
    *this = ::std::move(from);
  }

  inline LearningRateDecayConf& operator=(const LearningRateDecayConf& from) {
    CopyFrom(from);
    return *this;
  }
  inline LearningRateDecayConf& operator=(LearningRateDecayConf&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LearningRateDecayConf& default_instance();

  enum TypeCase {
    kExponentialConf = 2000,
    kInverseTimeConf = 2001,
    kNaturalExpConf = 2002,
    kPiecewiseConstantConf = 2003,
    kPolynomialConf = 2004,
    kCosineConf = 2005,
    kLinearCosineConf = 2006,
    kPiecewiseScalingConf = 2007,
    kMultiStepConf = 2008,
    kStepConf = 2009,
    kCosineAnnealingConf = 2010,
    kLinearLrConf = 2011,
    kConstantLrConf = 2012,
    kCosineAnnealingWarmRestartsConf = 2013,
    kSequentialSchedulerConf = 2014,
    TYPE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LearningRateDecayConf* internal_default_instance() {
    return reinterpret_cast<const LearningRateDecayConf*>(
               &_LearningRateDecayConf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(LearningRateDecayConf& a, LearningRateDecayConf& b) {
    a.Swap(&b);
  }
  inline void Swap(LearningRateDecayConf* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LearningRateDecayConf* New() const final {
    return CreateMaybeMessage<LearningRateDecayConf>(nullptr);
  }

  LearningRateDecayConf* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LearningRateDecayConf>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LearningRateDecayConf& from);
  void MergeFrom(const LearningRateDecayConf& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LearningRateDecayConf* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "oneflow.LearningRateDecayConf";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_oneflow_2fcore_2fjob_2flearning_5frate_5fschedule_5fconf_2eproto);
    return ::descriptor_table_oneflow_2fcore_2fjob_2flearning_5frate_5fschedule_5fconf_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExponentialConfFieldNumber = 2000,
    kInverseTimeConfFieldNumber = 2001,
    kNaturalExpConfFieldNumber = 2002,
    kPiecewiseConstantConfFieldNumber = 2003,
    kPolynomialConfFieldNumber = 2004,
    kCosineConfFieldNumber = 2005,
    kLinearCosineConfFieldNumber = 2006,
    kPiecewiseScalingConfFieldNumber = 2007,
    kMultiStepConfFieldNumber = 2008,
    kStepConfFieldNumber = 2009,
    kCosineAnnealingConfFieldNumber = 2010,
    kLinearLrConfFieldNumber = 2011,
    kConstantLrConfFieldNumber = 2012,
    kCosineAnnealingWarmRestartsConfFieldNumber = 2013,
    kSequentialSchedulerConfFieldNumber = 2014,
  };
  // optional .oneflow.ExponentialDecayConf exponential_conf = 2000;
  bool has_exponential_conf() const;
  void clear_exponential_conf();
  const ::oneflow::ExponentialDecayConf& exponential_conf() const;
  ::oneflow::ExponentialDecayConf* release_exponential_conf();
  ::oneflow::ExponentialDecayConf* mutable_exponential_conf();
  void set_allocated_exponential_conf(::oneflow::ExponentialDecayConf* exponential_conf);

  // optional .oneflow.InverseTimeDecayConf inverse_time_conf = 2001;
  bool has_inverse_time_conf() const;
  void clear_inverse_time_conf();
  const ::oneflow::InverseTimeDecayConf& inverse_time_conf() const;
  ::oneflow::InverseTimeDecayConf* release_inverse_time_conf();
  ::oneflow::InverseTimeDecayConf* mutable_inverse_time_conf();
  void set_allocated_inverse_time_conf(::oneflow::InverseTimeDecayConf* inverse_time_conf);

  // optional .oneflow.NaturalExpDecayConf natural_exp_conf = 2002;
  bool has_natural_exp_conf() const;
  void clear_natural_exp_conf();
  const ::oneflow::NaturalExpDecayConf& natural_exp_conf() const;
  ::oneflow::NaturalExpDecayConf* release_natural_exp_conf();
  ::oneflow::NaturalExpDecayConf* mutable_natural_exp_conf();
  void set_allocated_natural_exp_conf(::oneflow::NaturalExpDecayConf* natural_exp_conf);

  // optional .oneflow.PiecewiseConstantConf piecewise_constant_conf = 2003;
  bool has_piecewise_constant_conf() const;
  void clear_piecewise_constant_conf();
  const ::oneflow::PiecewiseConstantConf& piecewise_constant_conf() const;
  ::oneflow::PiecewiseConstantConf* release_piecewise_constant_conf();
  ::oneflow::PiecewiseConstantConf* mutable_piecewise_constant_conf();
  void set_allocated_piecewise_constant_conf(::oneflow::PiecewiseConstantConf* piecewise_constant_conf);

  // optional .oneflow.PolynomialDecayConf polynomial_conf = 2004;
  bool has_polynomial_conf() const;
  void clear_polynomial_conf();
  const ::oneflow::PolynomialDecayConf& polynomial_conf() const;
  ::oneflow::PolynomialDecayConf* release_polynomial_conf();
  ::oneflow::PolynomialDecayConf* mutable_polynomial_conf();
  void set_allocated_polynomial_conf(::oneflow::PolynomialDecayConf* polynomial_conf);

  // optional .oneflow.CosineDecayConf cosine_conf = 2005;
  bool has_cosine_conf() const;
  void clear_cosine_conf();
  const ::oneflow::CosineDecayConf& cosine_conf() const;
  ::oneflow::CosineDecayConf* release_cosine_conf();
  ::oneflow::CosineDecayConf* mutable_cosine_conf();
  void set_allocated_cosine_conf(::oneflow::CosineDecayConf* cosine_conf);

  // optional .oneflow.LinearCosineDecayConf linear_cosine_conf = 2006;
  bool has_linear_cosine_conf() const;
  void clear_linear_cosine_conf();
  const ::oneflow::LinearCosineDecayConf& linear_cosine_conf() const;
  ::oneflow::LinearCosineDecayConf* release_linear_cosine_conf();
  ::oneflow::LinearCosineDecayConf* mutable_linear_cosine_conf();
  void set_allocated_linear_cosine_conf(::oneflow::LinearCosineDecayConf* linear_cosine_conf);

  // optional .oneflow.PiecewiseScalingConf piecewise_scaling_conf = 2007;
  bool has_piecewise_scaling_conf() const;
  void clear_piecewise_scaling_conf();
  const ::oneflow::PiecewiseScalingConf& piecewise_scaling_conf() const;
  ::oneflow::PiecewiseScalingConf* release_piecewise_scaling_conf();
  ::oneflow::PiecewiseScalingConf* mutable_piecewise_scaling_conf();
  void set_allocated_piecewise_scaling_conf(::oneflow::PiecewiseScalingConf* piecewise_scaling_conf);

  // optional .oneflow.MultiStepConf multi_step_conf = 2008;
  bool has_multi_step_conf() const;
  void clear_multi_step_conf();
  const ::oneflow::MultiStepConf& multi_step_conf() const;
  ::oneflow::MultiStepConf* release_multi_step_conf();
  ::oneflow::MultiStepConf* mutable_multi_step_conf();
  void set_allocated_multi_step_conf(::oneflow::MultiStepConf* multi_step_conf);

  // optional .oneflow.StepConf step_conf = 2009;
  bool has_step_conf() const;
  void clear_step_conf();
  const ::oneflow::StepConf& step_conf() const;
  ::oneflow::StepConf* release_step_conf();
  ::oneflow::StepConf* mutable_step_conf();
  void set_allocated_step_conf(::oneflow::StepConf* step_conf);

  // optional .oneflow.CosineAnnealingDecayConf cosine_annealing_conf = 2010;
  bool has_cosine_annealing_conf() const;
  void clear_cosine_annealing_conf();
  const ::oneflow::CosineAnnealingDecayConf& cosine_annealing_conf() const;
  ::oneflow::CosineAnnealingDecayConf* release_cosine_annealing_conf();
  ::oneflow::CosineAnnealingDecayConf* mutable_cosine_annealing_conf();
  void set_allocated_cosine_annealing_conf(::oneflow::CosineAnnealingDecayConf* cosine_annealing_conf);

  // optional .oneflow.LinearLRConf linear_lr_conf = 2011;
  bool has_linear_lr_conf() const;
  void clear_linear_lr_conf();
  const ::oneflow::LinearLRConf& linear_lr_conf() const;
  ::oneflow::LinearLRConf* release_linear_lr_conf();
  ::oneflow::LinearLRConf* mutable_linear_lr_conf();
  void set_allocated_linear_lr_conf(::oneflow::LinearLRConf* linear_lr_conf);

  // optional .oneflow.ConstantLRConf constant_lr_conf = 2012;
  bool has_constant_lr_conf() const;
  void clear_constant_lr_conf();
  const ::oneflow::ConstantLRConf& constant_lr_conf() const;
  ::oneflow::ConstantLRConf* release_constant_lr_conf();
  ::oneflow::ConstantLRConf* mutable_constant_lr_conf();
  void set_allocated_constant_lr_conf(::oneflow::ConstantLRConf* constant_lr_conf);

  // optional .oneflow.CosineAnnealingWarmRestartsConf cosine_annealing_warm_restarts_conf = 2013;
  bool has_cosine_annealing_warm_restarts_conf() const;
  void clear_cosine_annealing_warm_restarts_conf();
  const ::oneflow::CosineAnnealingWarmRestartsConf& cosine_annealing_warm_restarts_conf() const;
  ::oneflow::CosineAnnealingWarmRestartsConf* release_cosine_annealing_warm_restarts_conf();
  ::oneflow::CosineAnnealingWarmRestartsConf* mutable_cosine_annealing_warm_restarts_conf();
  void set_allocated_cosine_annealing_warm_restarts_conf(::oneflow::CosineAnnealingWarmRestartsConf* cosine_annealing_warm_restarts_conf);

  // optional .oneflow.SequentialSchedulerConf sequential_scheduler_conf = 2014;
  bool has_sequential_scheduler_conf() const;
  void clear_sequential_scheduler_conf();
  const ::oneflow::SequentialSchedulerConf& sequential_scheduler_conf() const;
  ::oneflow::SequentialSchedulerConf* release_sequential_scheduler_conf();
  ::oneflow::SequentialSchedulerConf* mutable_sequential_scheduler_conf();
  void set_allocated_sequential_scheduler_conf(::oneflow::SequentialSchedulerConf* sequential_scheduler_conf);

  void clear_type();
  TypeCase type_case() const;
  // @@protoc_insertion_point(class_scope:oneflow.LearningRateDecayConf)
 private:
  class _Internal;
  void set_has_exponential_conf();
  void set_has_inverse_time_conf();
  void set_has_natural_exp_conf();
  void set_has_piecewise_constant_conf();
  void set_has_polynomial_conf();
  void set_has_cosine_conf();
  void set_has_linear_cosine_conf();
  void set_has_piecewise_scaling_conf();
  void set_has_multi_step_conf();
  void set_has_step_conf();
  void set_has_cosine_annealing_conf();
  void set_has_linear_lr_conf();
  void set_has_constant_lr_conf();
  void set_has_cosine_annealing_warm_restarts_conf();
  void set_has_sequential_scheduler_conf();

  inline bool has_type() const;
  inline void clear_has_type();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  union TypeUnion {
    TypeUnion() {}
    ::oneflow::ExponentialDecayConf* exponential_conf_;
    ::oneflow::InverseTimeDecayConf* inverse_time_conf_;
    ::oneflow::NaturalExpDecayConf* natural_exp_conf_;
    ::oneflow::PiecewiseConstantConf* piecewise_constant_conf_;
    ::oneflow::PolynomialDecayConf* polynomial_conf_;
    ::oneflow::CosineDecayConf* cosine_conf_;
    ::oneflow::LinearCosineDecayConf* linear_cosine_conf_;
    ::oneflow::PiecewiseScalingConf* piecewise_scaling_conf_;
    ::oneflow::MultiStepConf* multi_step_conf_;
    ::oneflow::StepConf* step_conf_;
    ::oneflow::CosineAnnealingDecayConf* cosine_annealing_conf_;
    ::oneflow::LinearLRConf* linear_lr_conf_;
    ::oneflow::ConstantLRConf* constant_lr_conf_;
    ::oneflow::CosineAnnealingWarmRestartsConf* cosine_annealing_warm_restarts_conf_;
    ::oneflow::SequentialSchedulerConf* sequential_scheduler_conf_;
  } type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_oneflow_2fcore_2fjob_2flearning_5frate_5fschedule_5fconf_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ExponentialDecayConf

// required int64 decay_batches = 1;
inline bool ExponentialDecayConf::has_decay_batches() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ExponentialDecayConf::clear_decay_batches() {
  decay_batches_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ExponentialDecayConf::decay_batches() const {
  // @@protoc_insertion_point(field_get:oneflow.ExponentialDecayConf.decay_batches)
  return decay_batches_;
}
inline void ExponentialDecayConf::set_decay_batches(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  decay_batches_ = value;
  // @@protoc_insertion_point(field_set:oneflow.ExponentialDecayConf.decay_batches)
}

// required double decay_rate = 2;
inline bool ExponentialDecayConf::has_decay_rate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ExponentialDecayConf::clear_decay_rate() {
  decay_rate_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double ExponentialDecayConf::decay_rate() const {
  // @@protoc_insertion_point(field_get:oneflow.ExponentialDecayConf.decay_rate)
  return decay_rate_;
}
inline void ExponentialDecayConf::set_decay_rate(double value) {
  _has_bits_[0] |= 0x00000002u;
  decay_rate_ = value;
  // @@protoc_insertion_point(field_set:oneflow.ExponentialDecayConf.decay_rate)
}

// optional bool staircase = 3 [default = false];
inline bool ExponentialDecayConf::has_staircase() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ExponentialDecayConf::clear_staircase() {
  staircase_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool ExponentialDecayConf::staircase() const {
  // @@protoc_insertion_point(field_get:oneflow.ExponentialDecayConf.staircase)
  return staircase_;
}
inline void ExponentialDecayConf::set_staircase(bool value) {
  _has_bits_[0] |= 0x00000004u;
  staircase_ = value;
  // @@protoc_insertion_point(field_set:oneflow.ExponentialDecayConf.staircase)
}

// -------------------------------------------------------------------

// InverseTimeDecayConf

// required int64 decay_batches = 1;
inline bool InverseTimeDecayConf::has_decay_batches() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InverseTimeDecayConf::clear_decay_batches() {
  decay_batches_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 InverseTimeDecayConf::decay_batches() const {
  // @@protoc_insertion_point(field_get:oneflow.InverseTimeDecayConf.decay_batches)
  return decay_batches_;
}
inline void InverseTimeDecayConf::set_decay_batches(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  decay_batches_ = value;
  // @@protoc_insertion_point(field_set:oneflow.InverseTimeDecayConf.decay_batches)
}

// required double decay_rate = 2;
inline bool InverseTimeDecayConf::has_decay_rate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void InverseTimeDecayConf::clear_decay_rate() {
  decay_rate_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double InverseTimeDecayConf::decay_rate() const {
  // @@protoc_insertion_point(field_get:oneflow.InverseTimeDecayConf.decay_rate)
  return decay_rate_;
}
inline void InverseTimeDecayConf::set_decay_rate(double value) {
  _has_bits_[0] |= 0x00000002u;
  decay_rate_ = value;
  // @@protoc_insertion_point(field_set:oneflow.InverseTimeDecayConf.decay_rate)
}

// optional bool staircase = 3 [default = false];
inline bool InverseTimeDecayConf::has_staircase() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void InverseTimeDecayConf::clear_staircase() {
  staircase_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool InverseTimeDecayConf::staircase() const {
  // @@protoc_insertion_point(field_get:oneflow.InverseTimeDecayConf.staircase)
  return staircase_;
}
inline void InverseTimeDecayConf::set_staircase(bool value) {
  _has_bits_[0] |= 0x00000004u;
  staircase_ = value;
  // @@protoc_insertion_point(field_set:oneflow.InverseTimeDecayConf.staircase)
}

// -------------------------------------------------------------------

// NaturalExpDecayConf

// required int64 decay_batches = 1;
inline bool NaturalExpDecayConf::has_decay_batches() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NaturalExpDecayConf::clear_decay_batches() {
  decay_batches_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 NaturalExpDecayConf::decay_batches() const {
  // @@protoc_insertion_point(field_get:oneflow.NaturalExpDecayConf.decay_batches)
  return decay_batches_;
}
inline void NaturalExpDecayConf::set_decay_batches(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  decay_batches_ = value;
  // @@protoc_insertion_point(field_set:oneflow.NaturalExpDecayConf.decay_batches)
}

// required double decay_rate = 2;
inline bool NaturalExpDecayConf::has_decay_rate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NaturalExpDecayConf::clear_decay_rate() {
  decay_rate_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double NaturalExpDecayConf::decay_rate() const {
  // @@protoc_insertion_point(field_get:oneflow.NaturalExpDecayConf.decay_rate)
  return decay_rate_;
}
inline void NaturalExpDecayConf::set_decay_rate(double value) {
  _has_bits_[0] |= 0x00000002u;
  decay_rate_ = value;
  // @@protoc_insertion_point(field_set:oneflow.NaturalExpDecayConf.decay_rate)
}

// optional bool staircase = 3 [default = false];
inline bool NaturalExpDecayConf::has_staircase() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NaturalExpDecayConf::clear_staircase() {
  staircase_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool NaturalExpDecayConf::staircase() const {
  // @@protoc_insertion_point(field_get:oneflow.NaturalExpDecayConf.staircase)
  return staircase_;
}
inline void NaturalExpDecayConf::set_staircase(bool value) {
  _has_bits_[0] |= 0x00000004u;
  staircase_ = value;
  // @@protoc_insertion_point(field_set:oneflow.NaturalExpDecayConf.staircase)
}

// -------------------------------------------------------------------

// PiecewiseConstantConf

// repeated int64 boundaries = 1;
inline int PiecewiseConstantConf::boundaries_size() const {
  return boundaries_.size();
}
inline void PiecewiseConstantConf::clear_boundaries() {
  boundaries_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PiecewiseConstantConf::boundaries(int index) const {
  // @@protoc_insertion_point(field_get:oneflow.PiecewiseConstantConf.boundaries)
  return boundaries_.Get(index);
}
inline void PiecewiseConstantConf::set_boundaries(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  boundaries_.Set(index, value);
  // @@protoc_insertion_point(field_set:oneflow.PiecewiseConstantConf.boundaries)
}
inline void PiecewiseConstantConf::add_boundaries(::PROTOBUF_NAMESPACE_ID::int64 value) {
  boundaries_.Add(value);
  // @@protoc_insertion_point(field_add:oneflow.PiecewiseConstantConf.boundaries)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
PiecewiseConstantConf::boundaries() const {
  // @@protoc_insertion_point(field_list:oneflow.PiecewiseConstantConf.boundaries)
  return boundaries_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
PiecewiseConstantConf::mutable_boundaries() {
  // @@protoc_insertion_point(field_mutable_list:oneflow.PiecewiseConstantConf.boundaries)
  return &boundaries_;
}

// repeated double values = 2;
inline int PiecewiseConstantConf::values_size() const {
  return values_.size();
}
inline void PiecewiseConstantConf::clear_values() {
  values_.Clear();
}
inline double PiecewiseConstantConf::values(int index) const {
  // @@protoc_insertion_point(field_get:oneflow.PiecewiseConstantConf.values)
  return values_.Get(index);
}
inline void PiecewiseConstantConf::set_values(int index, double value) {
  values_.Set(index, value);
  // @@protoc_insertion_point(field_set:oneflow.PiecewiseConstantConf.values)
}
inline void PiecewiseConstantConf::add_values(double value) {
  values_.Add(value);
  // @@protoc_insertion_point(field_add:oneflow.PiecewiseConstantConf.values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
PiecewiseConstantConf::values() const {
  // @@protoc_insertion_point(field_list:oneflow.PiecewiseConstantConf.values)
  return values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
PiecewiseConstantConf::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:oneflow.PiecewiseConstantConf.values)
  return &values_;
}

// -------------------------------------------------------------------

// PolynomialDecayConf

// required int64 decay_batches = 1;
inline bool PolynomialDecayConf::has_decay_batches() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PolynomialDecayConf::clear_decay_batches() {
  decay_batches_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PolynomialDecayConf::decay_batches() const {
  // @@protoc_insertion_point(field_get:oneflow.PolynomialDecayConf.decay_batches)
  return decay_batches_;
}
inline void PolynomialDecayConf::set_decay_batches(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  decay_batches_ = value;
  // @@protoc_insertion_point(field_set:oneflow.PolynomialDecayConf.decay_batches)
}

// optional double end_learning_rate = 2 [default = 0.0001];
inline bool PolynomialDecayConf::has_end_learning_rate() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PolynomialDecayConf::clear_end_learning_rate() {
  end_learning_rate_ = 0.0001;
  _has_bits_[0] &= ~0x00000004u;
}
inline double PolynomialDecayConf::end_learning_rate() const {
  // @@protoc_insertion_point(field_get:oneflow.PolynomialDecayConf.end_learning_rate)
  return end_learning_rate_;
}
inline void PolynomialDecayConf::set_end_learning_rate(double value) {
  _has_bits_[0] |= 0x00000004u;
  end_learning_rate_ = value;
  // @@protoc_insertion_point(field_set:oneflow.PolynomialDecayConf.end_learning_rate)
}

// optional double power = 3 [default = 1];
inline bool PolynomialDecayConf::has_power() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PolynomialDecayConf::clear_power() {
  power_ = 1;
  _has_bits_[0] &= ~0x00000008u;
}
inline double PolynomialDecayConf::power() const {
  // @@protoc_insertion_point(field_get:oneflow.PolynomialDecayConf.power)
  return power_;
}
inline void PolynomialDecayConf::set_power(double value) {
  _has_bits_[0] |= 0x00000008u;
  power_ = value;
  // @@protoc_insertion_point(field_set:oneflow.PolynomialDecayConf.power)
}

// optional bool cycle = 4 [default = false];
inline bool PolynomialDecayConf::has_cycle() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PolynomialDecayConf::clear_cycle() {
  cycle_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool PolynomialDecayConf::cycle() const {
  // @@protoc_insertion_point(field_get:oneflow.PolynomialDecayConf.cycle)
  return cycle_;
}
inline void PolynomialDecayConf::set_cycle(bool value) {
  _has_bits_[0] |= 0x00000002u;
  cycle_ = value;
  // @@protoc_insertion_point(field_set:oneflow.PolynomialDecayConf.cycle)
}

// -------------------------------------------------------------------

// CosineDecayConf

// required int64 decay_batches = 1;
inline bool CosineDecayConf::has_decay_batches() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CosineDecayConf::clear_decay_batches() {
  decay_batches_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CosineDecayConf::decay_batches() const {
  // @@protoc_insertion_point(field_get:oneflow.CosineDecayConf.decay_batches)
  return decay_batches_;
}
inline void CosineDecayConf::set_decay_batches(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  decay_batches_ = value;
  // @@protoc_insertion_point(field_set:oneflow.CosineDecayConf.decay_batches)
}

// optional double alpha = 2 [default = 0];
inline bool CosineDecayConf::has_alpha() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CosineDecayConf::clear_alpha() {
  alpha_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double CosineDecayConf::alpha() const {
  // @@protoc_insertion_point(field_get:oneflow.CosineDecayConf.alpha)
  return alpha_;
}
inline void CosineDecayConf::set_alpha(double value) {
  _has_bits_[0] |= 0x00000002u;
  alpha_ = value;
  // @@protoc_insertion_point(field_set:oneflow.CosineDecayConf.alpha)
}

// -------------------------------------------------------------------

// CosineAnnealingDecayConf

// required int64 t_max = 1;
inline bool CosineAnnealingDecayConf::has_t_max() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CosineAnnealingDecayConf::clear_t_max() {
  t_max_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CosineAnnealingDecayConf::t_max() const {
  // @@protoc_insertion_point(field_get:oneflow.CosineAnnealingDecayConf.t_max)
  return t_max_;
}
inline void CosineAnnealingDecayConf::set_t_max(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  t_max_ = value;
  // @@protoc_insertion_point(field_set:oneflow.CosineAnnealingDecayConf.t_max)
}

// optional double eta_min = 2 [default = 0];
inline bool CosineAnnealingDecayConf::has_eta_min() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CosineAnnealingDecayConf::clear_eta_min() {
  eta_min_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double CosineAnnealingDecayConf::eta_min() const {
  // @@protoc_insertion_point(field_get:oneflow.CosineAnnealingDecayConf.eta_min)
  return eta_min_;
}
inline void CosineAnnealingDecayConf::set_eta_min(double value) {
  _has_bits_[0] |= 0x00000002u;
  eta_min_ = value;
  // @@protoc_insertion_point(field_set:oneflow.CosineAnnealingDecayConf.eta_min)
}

// -------------------------------------------------------------------

// LinearCosineDecayConf

// required int64 decay_batches = 1;
inline bool LinearCosineDecayConf::has_decay_batches() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LinearCosineDecayConf::clear_decay_batches() {
  decay_batches_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LinearCosineDecayConf::decay_batches() const {
  // @@protoc_insertion_point(field_get:oneflow.LinearCosineDecayConf.decay_batches)
  return decay_batches_;
}
inline void LinearCosineDecayConf::set_decay_batches(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  decay_batches_ = value;
  // @@protoc_insertion_point(field_set:oneflow.LinearCosineDecayConf.decay_batches)
}

// optional double num_periods = 2 [default = 0.5];
inline bool LinearCosineDecayConf::has_num_periods() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LinearCosineDecayConf::clear_num_periods() {
  num_periods_ = 0.5;
  _has_bits_[0] &= ~0x00000004u;
}
inline double LinearCosineDecayConf::num_periods() const {
  // @@protoc_insertion_point(field_get:oneflow.LinearCosineDecayConf.num_periods)
  return num_periods_;
}
inline void LinearCosineDecayConf::set_num_periods(double value) {
  _has_bits_[0] |= 0x00000004u;
  num_periods_ = value;
  // @@protoc_insertion_point(field_set:oneflow.LinearCosineDecayConf.num_periods)
}

// optional double alpha = 3 [default = 0];
inline bool LinearCosineDecayConf::has_alpha() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LinearCosineDecayConf::clear_alpha() {
  alpha_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double LinearCosineDecayConf::alpha() const {
  // @@protoc_insertion_point(field_get:oneflow.LinearCosineDecayConf.alpha)
  return alpha_;
}
inline void LinearCosineDecayConf::set_alpha(double value) {
  _has_bits_[0] |= 0x00000002u;
  alpha_ = value;
  // @@protoc_insertion_point(field_set:oneflow.LinearCosineDecayConf.alpha)
}

// optional double beta = 4 [default = 0.001];
inline bool LinearCosineDecayConf::has_beta() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LinearCosineDecayConf::clear_beta() {
  beta_ = 0.001;
  _has_bits_[0] &= ~0x00000008u;
}
inline double LinearCosineDecayConf::beta() const {
  // @@protoc_insertion_point(field_get:oneflow.LinearCosineDecayConf.beta)
  return beta_;
}
inline void LinearCosineDecayConf::set_beta(double value) {
  _has_bits_[0] |= 0x00000008u;
  beta_ = value;
  // @@protoc_insertion_point(field_set:oneflow.LinearCosineDecayConf.beta)
}

// -------------------------------------------------------------------

// PiecewiseScalingConf

// repeated int64 boundaries = 1;
inline int PiecewiseScalingConf::boundaries_size() const {
  return boundaries_.size();
}
inline void PiecewiseScalingConf::clear_boundaries() {
  boundaries_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PiecewiseScalingConf::boundaries(int index) const {
  // @@protoc_insertion_point(field_get:oneflow.PiecewiseScalingConf.boundaries)
  return boundaries_.Get(index);
}
inline void PiecewiseScalingConf::set_boundaries(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  boundaries_.Set(index, value);
  // @@protoc_insertion_point(field_set:oneflow.PiecewiseScalingConf.boundaries)
}
inline void PiecewiseScalingConf::add_boundaries(::PROTOBUF_NAMESPACE_ID::int64 value) {
  boundaries_.Add(value);
  // @@protoc_insertion_point(field_add:oneflow.PiecewiseScalingConf.boundaries)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
PiecewiseScalingConf::boundaries() const {
  // @@protoc_insertion_point(field_list:oneflow.PiecewiseScalingConf.boundaries)
  return boundaries_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
PiecewiseScalingConf::mutable_boundaries() {
  // @@protoc_insertion_point(field_mutable_list:oneflow.PiecewiseScalingConf.boundaries)
  return &boundaries_;
}

// repeated double scales = 2;
inline int PiecewiseScalingConf::scales_size() const {
  return scales_.size();
}
inline void PiecewiseScalingConf::clear_scales() {
  scales_.Clear();
}
inline double PiecewiseScalingConf::scales(int index) const {
  // @@protoc_insertion_point(field_get:oneflow.PiecewiseScalingConf.scales)
  return scales_.Get(index);
}
inline void PiecewiseScalingConf::set_scales(int index, double value) {
  scales_.Set(index, value);
  // @@protoc_insertion_point(field_set:oneflow.PiecewiseScalingConf.scales)
}
inline void PiecewiseScalingConf::add_scales(double value) {
  scales_.Add(value);
  // @@protoc_insertion_point(field_add:oneflow.PiecewiseScalingConf.scales)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
PiecewiseScalingConf::scales() const {
  // @@protoc_insertion_point(field_list:oneflow.PiecewiseScalingConf.scales)
  return scales_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
PiecewiseScalingConf::mutable_scales() {
  // @@protoc_insertion_point(field_mutable_list:oneflow.PiecewiseScalingConf.scales)
  return &scales_;
}

// -------------------------------------------------------------------

// StepConf

// required int64 step_size = 1;
inline bool StepConf::has_step_size() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StepConf::clear_step_size() {
  step_size_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 StepConf::step_size() const {
  // @@protoc_insertion_point(field_get:oneflow.StepConf.step_size)
  return step_size_;
}
inline void StepConf::set_step_size(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  step_size_ = value;
  // @@protoc_insertion_point(field_set:oneflow.StepConf.step_size)
}

// optional double gamma = 2 [default = 0.1];
inline bool StepConf::has_gamma() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StepConf::clear_gamma() {
  gamma_ = 0.1;
  _has_bits_[0] &= ~0x00000002u;
}
inline double StepConf::gamma() const {
  // @@protoc_insertion_point(field_get:oneflow.StepConf.gamma)
  return gamma_;
}
inline void StepConf::set_gamma(double value) {
  _has_bits_[0] |= 0x00000002u;
  gamma_ = value;
  // @@protoc_insertion_point(field_set:oneflow.StepConf.gamma)
}

// -------------------------------------------------------------------

// MultiStepConf

// repeated int64 milestones = 1;
inline int MultiStepConf::milestones_size() const {
  return milestones_.size();
}
inline void MultiStepConf::clear_milestones() {
  milestones_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MultiStepConf::milestones(int index) const {
  // @@protoc_insertion_point(field_get:oneflow.MultiStepConf.milestones)
  return milestones_.Get(index);
}
inline void MultiStepConf::set_milestones(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  milestones_.Set(index, value);
  // @@protoc_insertion_point(field_set:oneflow.MultiStepConf.milestones)
}
inline void MultiStepConf::add_milestones(::PROTOBUF_NAMESPACE_ID::int64 value) {
  milestones_.Add(value);
  // @@protoc_insertion_point(field_add:oneflow.MultiStepConf.milestones)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
MultiStepConf::milestones() const {
  // @@protoc_insertion_point(field_list:oneflow.MultiStepConf.milestones)
  return milestones_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
MultiStepConf::mutable_milestones() {
  // @@protoc_insertion_point(field_mutable_list:oneflow.MultiStepConf.milestones)
  return &milestones_;
}

// optional double gamma = 2 [default = 0.1];
inline bool MultiStepConf::has_gamma() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MultiStepConf::clear_gamma() {
  gamma_ = 0.1;
  _has_bits_[0] &= ~0x00000001u;
}
inline double MultiStepConf::gamma() const {
  // @@protoc_insertion_point(field_get:oneflow.MultiStepConf.gamma)
  return gamma_;
}
inline void MultiStepConf::set_gamma(double value) {
  _has_bits_[0] |= 0x00000001u;
  gamma_ = value;
  // @@protoc_insertion_point(field_set:oneflow.MultiStepConf.gamma)
}

// -------------------------------------------------------------------

// LinearLRConf

// required double start_factor = 1;
inline bool LinearLRConf::has_start_factor() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LinearLRConf::clear_start_factor() {
  start_factor_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double LinearLRConf::start_factor() const {
  // @@protoc_insertion_point(field_get:oneflow.LinearLRConf.start_factor)
  return start_factor_;
}
inline void LinearLRConf::set_start_factor(double value) {
  _has_bits_[0] |= 0x00000001u;
  start_factor_ = value;
  // @@protoc_insertion_point(field_set:oneflow.LinearLRConf.start_factor)
}

// required double end_factor = 2;
inline bool LinearLRConf::has_end_factor() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LinearLRConf::clear_end_factor() {
  end_factor_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double LinearLRConf::end_factor() const {
  // @@protoc_insertion_point(field_get:oneflow.LinearLRConf.end_factor)
  return end_factor_;
}
inline void LinearLRConf::set_end_factor(double value) {
  _has_bits_[0] |= 0x00000002u;
  end_factor_ = value;
  // @@protoc_insertion_point(field_set:oneflow.LinearLRConf.end_factor)
}

// required int64 total_iters = 3;
inline bool LinearLRConf::has_total_iters() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LinearLRConf::clear_total_iters() {
  total_iters_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LinearLRConf::total_iters() const {
  // @@protoc_insertion_point(field_get:oneflow.LinearLRConf.total_iters)
  return total_iters_;
}
inline void LinearLRConf::set_total_iters(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  total_iters_ = value;
  // @@protoc_insertion_point(field_set:oneflow.LinearLRConf.total_iters)
}

// -------------------------------------------------------------------

// ConstantLRConf

// required double factor = 1;
inline bool ConstantLRConf::has_factor() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConstantLRConf::clear_factor() {
  factor_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double ConstantLRConf::factor() const {
  // @@protoc_insertion_point(field_get:oneflow.ConstantLRConf.factor)
  return factor_;
}
inline void ConstantLRConf::set_factor(double value) {
  _has_bits_[0] |= 0x00000001u;
  factor_ = value;
  // @@protoc_insertion_point(field_set:oneflow.ConstantLRConf.factor)
}

// required int64 total_iters = 2;
inline bool ConstantLRConf::has_total_iters() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConstantLRConf::clear_total_iters() {
  total_iters_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ConstantLRConf::total_iters() const {
  // @@protoc_insertion_point(field_get:oneflow.ConstantLRConf.total_iters)
  return total_iters_;
}
inline void ConstantLRConf::set_total_iters(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  total_iters_ = value;
  // @@protoc_insertion_point(field_set:oneflow.ConstantLRConf.total_iters)
}

// -------------------------------------------------------------------

// CosineAnnealingWarmRestartsConf

// required int64 t_initial = 1;
inline bool CosineAnnealingWarmRestartsConf::has_t_initial() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CosineAnnealingWarmRestartsConf::clear_t_initial() {
  t_initial_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CosineAnnealingWarmRestartsConf::t_initial() const {
  // @@protoc_insertion_point(field_get:oneflow.CosineAnnealingWarmRestartsConf.t_initial)
  return t_initial_;
}
inline void CosineAnnealingWarmRestartsConf::set_t_initial(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  t_initial_ = value;
  // @@protoc_insertion_point(field_set:oneflow.CosineAnnealingWarmRestartsConf.t_initial)
}

// required int64 t_mult = 2;
inline bool CosineAnnealingWarmRestartsConf::has_t_mult() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CosineAnnealingWarmRestartsConf::clear_t_mult() {
  t_mult_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CosineAnnealingWarmRestartsConf::t_mult() const {
  // @@protoc_insertion_point(field_get:oneflow.CosineAnnealingWarmRestartsConf.t_mult)
  return t_mult_;
}
inline void CosineAnnealingWarmRestartsConf::set_t_mult(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  t_mult_ = value;
  // @@protoc_insertion_point(field_set:oneflow.CosineAnnealingWarmRestartsConf.t_mult)
}

// required double eta_min = 3;
inline bool CosineAnnealingWarmRestartsConf::has_eta_min() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CosineAnnealingWarmRestartsConf::clear_eta_min() {
  eta_min_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double CosineAnnealingWarmRestartsConf::eta_min() const {
  // @@protoc_insertion_point(field_get:oneflow.CosineAnnealingWarmRestartsConf.eta_min)
  return eta_min_;
}
inline void CosineAnnealingWarmRestartsConf::set_eta_min(double value) {
  _has_bits_[0] |= 0x00000004u;
  eta_min_ = value;
  // @@protoc_insertion_point(field_set:oneflow.CosineAnnealingWarmRestartsConf.eta_min)
}

// required double decay_rate = 4;
inline bool CosineAnnealingWarmRestartsConf::has_decay_rate() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CosineAnnealingWarmRestartsConf::clear_decay_rate() {
  decay_rate_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double CosineAnnealingWarmRestartsConf::decay_rate() const {
  // @@protoc_insertion_point(field_get:oneflow.CosineAnnealingWarmRestartsConf.decay_rate)
  return decay_rate_;
}
inline void CosineAnnealingWarmRestartsConf::set_decay_rate(double value) {
  _has_bits_[0] |= 0x00000008u;
  decay_rate_ = value;
  // @@protoc_insertion_point(field_set:oneflow.CosineAnnealingWarmRestartsConf.decay_rate)
}

// required int64 restart_limit = 5;
inline bool CosineAnnealingWarmRestartsConf::has_restart_limit() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CosineAnnealingWarmRestartsConf::clear_restart_limit() {
  restart_limit_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CosineAnnealingWarmRestartsConf::restart_limit() const {
  // @@protoc_insertion_point(field_get:oneflow.CosineAnnealingWarmRestartsConf.restart_limit)
  return restart_limit_;
}
inline void CosineAnnealingWarmRestartsConf::set_restart_limit(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000010u;
  restart_limit_ = value;
  // @@protoc_insertion_point(field_set:oneflow.CosineAnnealingWarmRestartsConf.restart_limit)
}

// -------------------------------------------------------------------

// SequentialSchedulerConf

// repeated .oneflow.LearningRateDecayConf schedulers = 1;
inline int SequentialSchedulerConf::schedulers_size() const {
  return schedulers_.size();
}
inline void SequentialSchedulerConf::clear_schedulers() {
  schedulers_.Clear();
}
inline ::oneflow::LearningRateDecayConf* SequentialSchedulerConf::mutable_schedulers(int index) {
  // @@protoc_insertion_point(field_mutable:oneflow.SequentialSchedulerConf.schedulers)
  return schedulers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oneflow::LearningRateDecayConf >*
SequentialSchedulerConf::mutable_schedulers() {
  // @@protoc_insertion_point(field_mutable_list:oneflow.SequentialSchedulerConf.schedulers)
  return &schedulers_;
}
inline const ::oneflow::LearningRateDecayConf& SequentialSchedulerConf::schedulers(int index) const {
  // @@protoc_insertion_point(field_get:oneflow.SequentialSchedulerConf.schedulers)
  return schedulers_.Get(index);
}
inline ::oneflow::LearningRateDecayConf* SequentialSchedulerConf::add_schedulers() {
  // @@protoc_insertion_point(field_add:oneflow.SequentialSchedulerConf.schedulers)
  return schedulers_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oneflow::LearningRateDecayConf >&
SequentialSchedulerConf::schedulers() const {
  // @@protoc_insertion_point(field_list:oneflow.SequentialSchedulerConf.schedulers)
  return schedulers_;
}

// repeated int64 milestones = 2;
inline int SequentialSchedulerConf::milestones_size() const {
  return milestones_.size();
}
inline void SequentialSchedulerConf::clear_milestones() {
  milestones_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SequentialSchedulerConf::milestones(int index) const {
  // @@protoc_insertion_point(field_get:oneflow.SequentialSchedulerConf.milestones)
  return milestones_.Get(index);
}
inline void SequentialSchedulerConf::set_milestones(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  milestones_.Set(index, value);
  // @@protoc_insertion_point(field_set:oneflow.SequentialSchedulerConf.milestones)
}
inline void SequentialSchedulerConf::add_milestones(::PROTOBUF_NAMESPACE_ID::int64 value) {
  milestones_.Add(value);
  // @@protoc_insertion_point(field_add:oneflow.SequentialSchedulerConf.milestones)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
SequentialSchedulerConf::milestones() const {
  // @@protoc_insertion_point(field_list:oneflow.SequentialSchedulerConf.milestones)
  return milestones_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
SequentialSchedulerConf::mutable_milestones() {
  // @@protoc_insertion_point(field_mutable_list:oneflow.SequentialSchedulerConf.milestones)
  return &milestones_;
}

// repeated int32 interval_rescaling = 3;
inline int SequentialSchedulerConf::interval_rescaling_size() const {
  return interval_rescaling_.size();
}
inline void SequentialSchedulerConf::clear_interval_rescaling() {
  interval_rescaling_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SequentialSchedulerConf::interval_rescaling(int index) const {
  // @@protoc_insertion_point(field_get:oneflow.SequentialSchedulerConf.interval_rescaling)
  return interval_rescaling_.Get(index);
}
inline void SequentialSchedulerConf::set_interval_rescaling(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  interval_rescaling_.Set(index, value);
  // @@protoc_insertion_point(field_set:oneflow.SequentialSchedulerConf.interval_rescaling)
}
inline void SequentialSchedulerConf::add_interval_rescaling(::PROTOBUF_NAMESPACE_ID::int32 value) {
  interval_rescaling_.Add(value);
  // @@protoc_insertion_point(field_add:oneflow.SequentialSchedulerConf.interval_rescaling)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
SequentialSchedulerConf::interval_rescaling() const {
  // @@protoc_insertion_point(field_list:oneflow.SequentialSchedulerConf.interval_rescaling)
  return interval_rescaling_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
SequentialSchedulerConf::mutable_interval_rescaling() {
  // @@protoc_insertion_point(field_mutable_list:oneflow.SequentialSchedulerConf.interval_rescaling)
  return &interval_rescaling_;
}

// -------------------------------------------------------------------

// LearningRateDecayConf

// optional .oneflow.ExponentialDecayConf exponential_conf = 2000;
inline bool LearningRateDecayConf::has_exponential_conf() const {
  return type_case() == kExponentialConf;
}
inline void LearningRateDecayConf::set_has_exponential_conf() {
  _oneof_case_[0] = kExponentialConf;
}
inline void LearningRateDecayConf::clear_exponential_conf() {
  if (has_exponential_conf()) {
    delete type_.exponential_conf_;
    clear_has_type();
  }
}
inline ::oneflow::ExponentialDecayConf* LearningRateDecayConf::release_exponential_conf() {
  // @@protoc_insertion_point(field_release:oneflow.LearningRateDecayConf.exponential_conf)
  if (has_exponential_conf()) {
    clear_has_type();
      ::oneflow::ExponentialDecayConf* temp = type_.exponential_conf_;
    type_.exponential_conf_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::oneflow::ExponentialDecayConf& LearningRateDecayConf::exponential_conf() const {
  // @@protoc_insertion_point(field_get:oneflow.LearningRateDecayConf.exponential_conf)
  return has_exponential_conf()
      ? *type_.exponential_conf_
      : *reinterpret_cast< ::oneflow::ExponentialDecayConf*>(&::oneflow::_ExponentialDecayConf_default_instance_);
}
inline ::oneflow::ExponentialDecayConf* LearningRateDecayConf::mutable_exponential_conf() {
  if (!has_exponential_conf()) {
    clear_type();
    set_has_exponential_conf();
    type_.exponential_conf_ = CreateMaybeMessage< ::oneflow::ExponentialDecayConf >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:oneflow.LearningRateDecayConf.exponential_conf)
  return type_.exponential_conf_;
}

// optional .oneflow.InverseTimeDecayConf inverse_time_conf = 2001;
inline bool LearningRateDecayConf::has_inverse_time_conf() const {
  return type_case() == kInverseTimeConf;
}
inline void LearningRateDecayConf::set_has_inverse_time_conf() {
  _oneof_case_[0] = kInverseTimeConf;
}
inline void LearningRateDecayConf::clear_inverse_time_conf() {
  if (has_inverse_time_conf()) {
    delete type_.inverse_time_conf_;
    clear_has_type();
  }
}
inline ::oneflow::InverseTimeDecayConf* LearningRateDecayConf::release_inverse_time_conf() {
  // @@protoc_insertion_point(field_release:oneflow.LearningRateDecayConf.inverse_time_conf)
  if (has_inverse_time_conf()) {
    clear_has_type();
      ::oneflow::InverseTimeDecayConf* temp = type_.inverse_time_conf_;
    type_.inverse_time_conf_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::oneflow::InverseTimeDecayConf& LearningRateDecayConf::inverse_time_conf() const {
  // @@protoc_insertion_point(field_get:oneflow.LearningRateDecayConf.inverse_time_conf)
  return has_inverse_time_conf()
      ? *type_.inverse_time_conf_
      : *reinterpret_cast< ::oneflow::InverseTimeDecayConf*>(&::oneflow::_InverseTimeDecayConf_default_instance_);
}
inline ::oneflow::InverseTimeDecayConf* LearningRateDecayConf::mutable_inverse_time_conf() {
  if (!has_inverse_time_conf()) {
    clear_type();
    set_has_inverse_time_conf();
    type_.inverse_time_conf_ = CreateMaybeMessage< ::oneflow::InverseTimeDecayConf >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:oneflow.LearningRateDecayConf.inverse_time_conf)
  return type_.inverse_time_conf_;
}

// optional .oneflow.NaturalExpDecayConf natural_exp_conf = 2002;
inline bool LearningRateDecayConf::has_natural_exp_conf() const {
  return type_case() == kNaturalExpConf;
}
inline void LearningRateDecayConf::set_has_natural_exp_conf() {
  _oneof_case_[0] = kNaturalExpConf;
}
inline void LearningRateDecayConf::clear_natural_exp_conf() {
  if (has_natural_exp_conf()) {
    delete type_.natural_exp_conf_;
    clear_has_type();
  }
}
inline ::oneflow::NaturalExpDecayConf* LearningRateDecayConf::release_natural_exp_conf() {
  // @@protoc_insertion_point(field_release:oneflow.LearningRateDecayConf.natural_exp_conf)
  if (has_natural_exp_conf()) {
    clear_has_type();
      ::oneflow::NaturalExpDecayConf* temp = type_.natural_exp_conf_;
    type_.natural_exp_conf_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::oneflow::NaturalExpDecayConf& LearningRateDecayConf::natural_exp_conf() const {
  // @@protoc_insertion_point(field_get:oneflow.LearningRateDecayConf.natural_exp_conf)
  return has_natural_exp_conf()
      ? *type_.natural_exp_conf_
      : *reinterpret_cast< ::oneflow::NaturalExpDecayConf*>(&::oneflow::_NaturalExpDecayConf_default_instance_);
}
inline ::oneflow::NaturalExpDecayConf* LearningRateDecayConf::mutable_natural_exp_conf() {
  if (!has_natural_exp_conf()) {
    clear_type();
    set_has_natural_exp_conf();
    type_.natural_exp_conf_ = CreateMaybeMessage< ::oneflow::NaturalExpDecayConf >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:oneflow.LearningRateDecayConf.natural_exp_conf)
  return type_.natural_exp_conf_;
}

// optional .oneflow.PiecewiseConstantConf piecewise_constant_conf = 2003;
inline bool LearningRateDecayConf::has_piecewise_constant_conf() const {
  return type_case() == kPiecewiseConstantConf;
}
inline void LearningRateDecayConf::set_has_piecewise_constant_conf() {
  _oneof_case_[0] = kPiecewiseConstantConf;
}
inline void LearningRateDecayConf::clear_piecewise_constant_conf() {
  if (has_piecewise_constant_conf()) {
    delete type_.piecewise_constant_conf_;
    clear_has_type();
  }
}
inline ::oneflow::PiecewiseConstantConf* LearningRateDecayConf::release_piecewise_constant_conf() {
  // @@protoc_insertion_point(field_release:oneflow.LearningRateDecayConf.piecewise_constant_conf)
  if (has_piecewise_constant_conf()) {
    clear_has_type();
      ::oneflow::PiecewiseConstantConf* temp = type_.piecewise_constant_conf_;
    type_.piecewise_constant_conf_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::oneflow::PiecewiseConstantConf& LearningRateDecayConf::piecewise_constant_conf() const {
  // @@protoc_insertion_point(field_get:oneflow.LearningRateDecayConf.piecewise_constant_conf)
  return has_piecewise_constant_conf()
      ? *type_.piecewise_constant_conf_
      : *reinterpret_cast< ::oneflow::PiecewiseConstantConf*>(&::oneflow::_PiecewiseConstantConf_default_instance_);
}
inline ::oneflow::PiecewiseConstantConf* LearningRateDecayConf::mutable_piecewise_constant_conf() {
  if (!has_piecewise_constant_conf()) {
    clear_type();
    set_has_piecewise_constant_conf();
    type_.piecewise_constant_conf_ = CreateMaybeMessage< ::oneflow::PiecewiseConstantConf >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:oneflow.LearningRateDecayConf.piecewise_constant_conf)
  return type_.piecewise_constant_conf_;
}

// optional .oneflow.PolynomialDecayConf polynomial_conf = 2004;
inline bool LearningRateDecayConf::has_polynomial_conf() const {
  return type_case() == kPolynomialConf;
}
inline void LearningRateDecayConf::set_has_polynomial_conf() {
  _oneof_case_[0] = kPolynomialConf;
}
inline void LearningRateDecayConf::clear_polynomial_conf() {
  if (has_polynomial_conf()) {
    delete type_.polynomial_conf_;
    clear_has_type();
  }
}
inline ::oneflow::PolynomialDecayConf* LearningRateDecayConf::release_polynomial_conf() {
  // @@protoc_insertion_point(field_release:oneflow.LearningRateDecayConf.polynomial_conf)
  if (has_polynomial_conf()) {
    clear_has_type();
      ::oneflow::PolynomialDecayConf* temp = type_.polynomial_conf_;
    type_.polynomial_conf_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::oneflow::PolynomialDecayConf& LearningRateDecayConf::polynomial_conf() const {
  // @@protoc_insertion_point(field_get:oneflow.LearningRateDecayConf.polynomial_conf)
  return has_polynomial_conf()
      ? *type_.polynomial_conf_
      : *reinterpret_cast< ::oneflow::PolynomialDecayConf*>(&::oneflow::_PolynomialDecayConf_default_instance_);
}
inline ::oneflow::PolynomialDecayConf* LearningRateDecayConf::mutable_polynomial_conf() {
  if (!has_polynomial_conf()) {
    clear_type();
    set_has_polynomial_conf();
    type_.polynomial_conf_ = CreateMaybeMessage< ::oneflow::PolynomialDecayConf >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:oneflow.LearningRateDecayConf.polynomial_conf)
  return type_.polynomial_conf_;
}

// optional .oneflow.CosineDecayConf cosine_conf = 2005;
inline bool LearningRateDecayConf::has_cosine_conf() const {
  return type_case() == kCosineConf;
}
inline void LearningRateDecayConf::set_has_cosine_conf() {
  _oneof_case_[0] = kCosineConf;
}
inline void LearningRateDecayConf::clear_cosine_conf() {
  if (has_cosine_conf()) {
    delete type_.cosine_conf_;
    clear_has_type();
  }
}
inline ::oneflow::CosineDecayConf* LearningRateDecayConf::release_cosine_conf() {
  // @@protoc_insertion_point(field_release:oneflow.LearningRateDecayConf.cosine_conf)
  if (has_cosine_conf()) {
    clear_has_type();
      ::oneflow::CosineDecayConf* temp = type_.cosine_conf_;
    type_.cosine_conf_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::oneflow::CosineDecayConf& LearningRateDecayConf::cosine_conf() const {
  // @@protoc_insertion_point(field_get:oneflow.LearningRateDecayConf.cosine_conf)
  return has_cosine_conf()
      ? *type_.cosine_conf_
      : *reinterpret_cast< ::oneflow::CosineDecayConf*>(&::oneflow::_CosineDecayConf_default_instance_);
}
inline ::oneflow::CosineDecayConf* LearningRateDecayConf::mutable_cosine_conf() {
  if (!has_cosine_conf()) {
    clear_type();
    set_has_cosine_conf();
    type_.cosine_conf_ = CreateMaybeMessage< ::oneflow::CosineDecayConf >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:oneflow.LearningRateDecayConf.cosine_conf)
  return type_.cosine_conf_;
}

// optional .oneflow.LinearCosineDecayConf linear_cosine_conf = 2006;
inline bool LearningRateDecayConf::has_linear_cosine_conf() const {
  return type_case() == kLinearCosineConf;
}
inline void LearningRateDecayConf::set_has_linear_cosine_conf() {
  _oneof_case_[0] = kLinearCosineConf;
}
inline void LearningRateDecayConf::clear_linear_cosine_conf() {
  if (has_linear_cosine_conf()) {
    delete type_.linear_cosine_conf_;
    clear_has_type();
  }
}
inline ::oneflow::LinearCosineDecayConf* LearningRateDecayConf::release_linear_cosine_conf() {
  // @@protoc_insertion_point(field_release:oneflow.LearningRateDecayConf.linear_cosine_conf)
  if (has_linear_cosine_conf()) {
    clear_has_type();
      ::oneflow::LinearCosineDecayConf* temp = type_.linear_cosine_conf_;
    type_.linear_cosine_conf_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::oneflow::LinearCosineDecayConf& LearningRateDecayConf::linear_cosine_conf() const {
  // @@protoc_insertion_point(field_get:oneflow.LearningRateDecayConf.linear_cosine_conf)
  return has_linear_cosine_conf()
      ? *type_.linear_cosine_conf_
      : *reinterpret_cast< ::oneflow::LinearCosineDecayConf*>(&::oneflow::_LinearCosineDecayConf_default_instance_);
}
inline ::oneflow::LinearCosineDecayConf* LearningRateDecayConf::mutable_linear_cosine_conf() {
  if (!has_linear_cosine_conf()) {
    clear_type();
    set_has_linear_cosine_conf();
    type_.linear_cosine_conf_ = CreateMaybeMessage< ::oneflow::LinearCosineDecayConf >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:oneflow.LearningRateDecayConf.linear_cosine_conf)
  return type_.linear_cosine_conf_;
}

// optional .oneflow.PiecewiseScalingConf piecewise_scaling_conf = 2007;
inline bool LearningRateDecayConf::has_piecewise_scaling_conf() const {
  return type_case() == kPiecewiseScalingConf;
}
inline void LearningRateDecayConf::set_has_piecewise_scaling_conf() {
  _oneof_case_[0] = kPiecewiseScalingConf;
}
inline void LearningRateDecayConf::clear_piecewise_scaling_conf() {
  if (has_piecewise_scaling_conf()) {
    delete type_.piecewise_scaling_conf_;
    clear_has_type();
  }
}
inline ::oneflow::PiecewiseScalingConf* LearningRateDecayConf::release_piecewise_scaling_conf() {
  // @@protoc_insertion_point(field_release:oneflow.LearningRateDecayConf.piecewise_scaling_conf)
  if (has_piecewise_scaling_conf()) {
    clear_has_type();
      ::oneflow::PiecewiseScalingConf* temp = type_.piecewise_scaling_conf_;
    type_.piecewise_scaling_conf_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::oneflow::PiecewiseScalingConf& LearningRateDecayConf::piecewise_scaling_conf() const {
  // @@protoc_insertion_point(field_get:oneflow.LearningRateDecayConf.piecewise_scaling_conf)
  return has_piecewise_scaling_conf()
      ? *type_.piecewise_scaling_conf_
      : *reinterpret_cast< ::oneflow::PiecewiseScalingConf*>(&::oneflow::_PiecewiseScalingConf_default_instance_);
}
inline ::oneflow::PiecewiseScalingConf* LearningRateDecayConf::mutable_piecewise_scaling_conf() {
  if (!has_piecewise_scaling_conf()) {
    clear_type();
    set_has_piecewise_scaling_conf();
    type_.piecewise_scaling_conf_ = CreateMaybeMessage< ::oneflow::PiecewiseScalingConf >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:oneflow.LearningRateDecayConf.piecewise_scaling_conf)
  return type_.piecewise_scaling_conf_;
}

// optional .oneflow.MultiStepConf multi_step_conf = 2008;
inline bool LearningRateDecayConf::has_multi_step_conf() const {
  return type_case() == kMultiStepConf;
}
inline void LearningRateDecayConf::set_has_multi_step_conf() {
  _oneof_case_[0] = kMultiStepConf;
}
inline void LearningRateDecayConf::clear_multi_step_conf() {
  if (has_multi_step_conf()) {
    delete type_.multi_step_conf_;
    clear_has_type();
  }
}
inline ::oneflow::MultiStepConf* LearningRateDecayConf::release_multi_step_conf() {
  // @@protoc_insertion_point(field_release:oneflow.LearningRateDecayConf.multi_step_conf)
  if (has_multi_step_conf()) {
    clear_has_type();
      ::oneflow::MultiStepConf* temp = type_.multi_step_conf_;
    type_.multi_step_conf_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::oneflow::MultiStepConf& LearningRateDecayConf::multi_step_conf() const {
  // @@protoc_insertion_point(field_get:oneflow.LearningRateDecayConf.multi_step_conf)
  return has_multi_step_conf()
      ? *type_.multi_step_conf_
      : *reinterpret_cast< ::oneflow::MultiStepConf*>(&::oneflow::_MultiStepConf_default_instance_);
}
inline ::oneflow::MultiStepConf* LearningRateDecayConf::mutable_multi_step_conf() {
  if (!has_multi_step_conf()) {
    clear_type();
    set_has_multi_step_conf();
    type_.multi_step_conf_ = CreateMaybeMessage< ::oneflow::MultiStepConf >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:oneflow.LearningRateDecayConf.multi_step_conf)
  return type_.multi_step_conf_;
}

// optional .oneflow.StepConf step_conf = 2009;
inline bool LearningRateDecayConf::has_step_conf() const {
  return type_case() == kStepConf;
}
inline void LearningRateDecayConf::set_has_step_conf() {
  _oneof_case_[0] = kStepConf;
}
inline void LearningRateDecayConf::clear_step_conf() {
  if (has_step_conf()) {
    delete type_.step_conf_;
    clear_has_type();
  }
}
inline ::oneflow::StepConf* LearningRateDecayConf::release_step_conf() {
  // @@protoc_insertion_point(field_release:oneflow.LearningRateDecayConf.step_conf)
  if (has_step_conf()) {
    clear_has_type();
      ::oneflow::StepConf* temp = type_.step_conf_;
    type_.step_conf_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::oneflow::StepConf& LearningRateDecayConf::step_conf() const {
  // @@protoc_insertion_point(field_get:oneflow.LearningRateDecayConf.step_conf)
  return has_step_conf()
      ? *type_.step_conf_
      : *reinterpret_cast< ::oneflow::StepConf*>(&::oneflow::_StepConf_default_instance_);
}
inline ::oneflow::StepConf* LearningRateDecayConf::mutable_step_conf() {
  if (!has_step_conf()) {
    clear_type();
    set_has_step_conf();
    type_.step_conf_ = CreateMaybeMessage< ::oneflow::StepConf >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:oneflow.LearningRateDecayConf.step_conf)
  return type_.step_conf_;
}

// optional .oneflow.CosineAnnealingDecayConf cosine_annealing_conf = 2010;
inline bool LearningRateDecayConf::has_cosine_annealing_conf() const {
  return type_case() == kCosineAnnealingConf;
}
inline void LearningRateDecayConf::set_has_cosine_annealing_conf() {
  _oneof_case_[0] = kCosineAnnealingConf;
}
inline void LearningRateDecayConf::clear_cosine_annealing_conf() {
  if (has_cosine_annealing_conf()) {
    delete type_.cosine_annealing_conf_;
    clear_has_type();
  }
}
inline ::oneflow::CosineAnnealingDecayConf* LearningRateDecayConf::release_cosine_annealing_conf() {
  // @@protoc_insertion_point(field_release:oneflow.LearningRateDecayConf.cosine_annealing_conf)
  if (has_cosine_annealing_conf()) {
    clear_has_type();
      ::oneflow::CosineAnnealingDecayConf* temp = type_.cosine_annealing_conf_;
    type_.cosine_annealing_conf_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::oneflow::CosineAnnealingDecayConf& LearningRateDecayConf::cosine_annealing_conf() const {
  // @@protoc_insertion_point(field_get:oneflow.LearningRateDecayConf.cosine_annealing_conf)
  return has_cosine_annealing_conf()
      ? *type_.cosine_annealing_conf_
      : *reinterpret_cast< ::oneflow::CosineAnnealingDecayConf*>(&::oneflow::_CosineAnnealingDecayConf_default_instance_);
}
inline ::oneflow::CosineAnnealingDecayConf* LearningRateDecayConf::mutable_cosine_annealing_conf() {
  if (!has_cosine_annealing_conf()) {
    clear_type();
    set_has_cosine_annealing_conf();
    type_.cosine_annealing_conf_ = CreateMaybeMessage< ::oneflow::CosineAnnealingDecayConf >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:oneflow.LearningRateDecayConf.cosine_annealing_conf)
  return type_.cosine_annealing_conf_;
}

// optional .oneflow.LinearLRConf linear_lr_conf = 2011;
inline bool LearningRateDecayConf::has_linear_lr_conf() const {
  return type_case() == kLinearLrConf;
}
inline void LearningRateDecayConf::set_has_linear_lr_conf() {
  _oneof_case_[0] = kLinearLrConf;
}
inline void LearningRateDecayConf::clear_linear_lr_conf() {
  if (has_linear_lr_conf()) {
    delete type_.linear_lr_conf_;
    clear_has_type();
  }
}
inline ::oneflow::LinearLRConf* LearningRateDecayConf::release_linear_lr_conf() {
  // @@protoc_insertion_point(field_release:oneflow.LearningRateDecayConf.linear_lr_conf)
  if (has_linear_lr_conf()) {
    clear_has_type();
      ::oneflow::LinearLRConf* temp = type_.linear_lr_conf_;
    type_.linear_lr_conf_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::oneflow::LinearLRConf& LearningRateDecayConf::linear_lr_conf() const {
  // @@protoc_insertion_point(field_get:oneflow.LearningRateDecayConf.linear_lr_conf)
  return has_linear_lr_conf()
      ? *type_.linear_lr_conf_
      : *reinterpret_cast< ::oneflow::LinearLRConf*>(&::oneflow::_LinearLRConf_default_instance_);
}
inline ::oneflow::LinearLRConf* LearningRateDecayConf::mutable_linear_lr_conf() {
  if (!has_linear_lr_conf()) {
    clear_type();
    set_has_linear_lr_conf();
    type_.linear_lr_conf_ = CreateMaybeMessage< ::oneflow::LinearLRConf >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:oneflow.LearningRateDecayConf.linear_lr_conf)
  return type_.linear_lr_conf_;
}

// optional .oneflow.ConstantLRConf constant_lr_conf = 2012;
inline bool LearningRateDecayConf::has_constant_lr_conf() const {
  return type_case() == kConstantLrConf;
}
inline void LearningRateDecayConf::set_has_constant_lr_conf() {
  _oneof_case_[0] = kConstantLrConf;
}
inline void LearningRateDecayConf::clear_constant_lr_conf() {
  if (has_constant_lr_conf()) {
    delete type_.constant_lr_conf_;
    clear_has_type();
  }
}
inline ::oneflow::ConstantLRConf* LearningRateDecayConf::release_constant_lr_conf() {
  // @@protoc_insertion_point(field_release:oneflow.LearningRateDecayConf.constant_lr_conf)
  if (has_constant_lr_conf()) {
    clear_has_type();
      ::oneflow::ConstantLRConf* temp = type_.constant_lr_conf_;
    type_.constant_lr_conf_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::oneflow::ConstantLRConf& LearningRateDecayConf::constant_lr_conf() const {
  // @@protoc_insertion_point(field_get:oneflow.LearningRateDecayConf.constant_lr_conf)
  return has_constant_lr_conf()
      ? *type_.constant_lr_conf_
      : *reinterpret_cast< ::oneflow::ConstantLRConf*>(&::oneflow::_ConstantLRConf_default_instance_);
}
inline ::oneflow::ConstantLRConf* LearningRateDecayConf::mutable_constant_lr_conf() {
  if (!has_constant_lr_conf()) {
    clear_type();
    set_has_constant_lr_conf();
    type_.constant_lr_conf_ = CreateMaybeMessage< ::oneflow::ConstantLRConf >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:oneflow.LearningRateDecayConf.constant_lr_conf)
  return type_.constant_lr_conf_;
}

// optional .oneflow.CosineAnnealingWarmRestartsConf cosine_annealing_warm_restarts_conf = 2013;
inline bool LearningRateDecayConf::has_cosine_annealing_warm_restarts_conf() const {
  return type_case() == kCosineAnnealingWarmRestartsConf;
}
inline void LearningRateDecayConf::set_has_cosine_annealing_warm_restarts_conf() {
  _oneof_case_[0] = kCosineAnnealingWarmRestartsConf;
}
inline void LearningRateDecayConf::clear_cosine_annealing_warm_restarts_conf() {
  if (has_cosine_annealing_warm_restarts_conf()) {
    delete type_.cosine_annealing_warm_restarts_conf_;
    clear_has_type();
  }
}
inline ::oneflow::CosineAnnealingWarmRestartsConf* LearningRateDecayConf::release_cosine_annealing_warm_restarts_conf() {
  // @@protoc_insertion_point(field_release:oneflow.LearningRateDecayConf.cosine_annealing_warm_restarts_conf)
  if (has_cosine_annealing_warm_restarts_conf()) {
    clear_has_type();
      ::oneflow::CosineAnnealingWarmRestartsConf* temp = type_.cosine_annealing_warm_restarts_conf_;
    type_.cosine_annealing_warm_restarts_conf_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::oneflow::CosineAnnealingWarmRestartsConf& LearningRateDecayConf::cosine_annealing_warm_restarts_conf() const {
  // @@protoc_insertion_point(field_get:oneflow.LearningRateDecayConf.cosine_annealing_warm_restarts_conf)
  return has_cosine_annealing_warm_restarts_conf()
      ? *type_.cosine_annealing_warm_restarts_conf_
      : *reinterpret_cast< ::oneflow::CosineAnnealingWarmRestartsConf*>(&::oneflow::_CosineAnnealingWarmRestartsConf_default_instance_);
}
inline ::oneflow::CosineAnnealingWarmRestartsConf* LearningRateDecayConf::mutable_cosine_annealing_warm_restarts_conf() {
  if (!has_cosine_annealing_warm_restarts_conf()) {
    clear_type();
    set_has_cosine_annealing_warm_restarts_conf();
    type_.cosine_annealing_warm_restarts_conf_ = CreateMaybeMessage< ::oneflow::CosineAnnealingWarmRestartsConf >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:oneflow.LearningRateDecayConf.cosine_annealing_warm_restarts_conf)
  return type_.cosine_annealing_warm_restarts_conf_;
}

// optional .oneflow.SequentialSchedulerConf sequential_scheduler_conf = 2014;
inline bool LearningRateDecayConf::has_sequential_scheduler_conf() const {
  return type_case() == kSequentialSchedulerConf;
}
inline void LearningRateDecayConf::set_has_sequential_scheduler_conf() {
  _oneof_case_[0] = kSequentialSchedulerConf;
}
inline void LearningRateDecayConf::clear_sequential_scheduler_conf() {
  if (has_sequential_scheduler_conf()) {
    delete type_.sequential_scheduler_conf_;
    clear_has_type();
  }
}
inline ::oneflow::SequentialSchedulerConf* LearningRateDecayConf::release_sequential_scheduler_conf() {
  // @@protoc_insertion_point(field_release:oneflow.LearningRateDecayConf.sequential_scheduler_conf)
  if (has_sequential_scheduler_conf()) {
    clear_has_type();
      ::oneflow::SequentialSchedulerConf* temp = type_.sequential_scheduler_conf_;
    type_.sequential_scheduler_conf_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::oneflow::SequentialSchedulerConf& LearningRateDecayConf::sequential_scheduler_conf() const {
  // @@protoc_insertion_point(field_get:oneflow.LearningRateDecayConf.sequential_scheduler_conf)
  return has_sequential_scheduler_conf()
      ? *type_.sequential_scheduler_conf_
      : *reinterpret_cast< ::oneflow::SequentialSchedulerConf*>(&::oneflow::_SequentialSchedulerConf_default_instance_);
}
inline ::oneflow::SequentialSchedulerConf* LearningRateDecayConf::mutable_sequential_scheduler_conf() {
  if (!has_sequential_scheduler_conf()) {
    clear_type();
    set_has_sequential_scheduler_conf();
    type_.sequential_scheduler_conf_ = CreateMaybeMessage< ::oneflow::SequentialSchedulerConf >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:oneflow.LearningRateDecayConf.sequential_scheduler_conf)
  return type_.sequential_scheduler_conf_;
}

inline bool LearningRateDecayConf::has_type() const {
  return type_case() != TYPE_NOT_SET;
}
inline void LearningRateDecayConf::clear_has_type() {
  _oneof_case_[0] = TYPE_NOT_SET;
}
inline LearningRateDecayConf::TypeCase LearningRateDecayConf::type_case() const {
  return LearningRateDecayConf::TypeCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace oneflow

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_oneflow_2fcore_2fjob_2flearning_5frate_5fschedule_5fconf_2eproto
