// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: oneflow/core/memory/memory_block.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_oneflow_2fcore_2fmemory_2fmemory_5fblock_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_oneflow_2fcore_2fmemory_2fmemory_5fblock_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "oneflow/core/memory/memory_case.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_oneflow_2fcore_2fmemory_2fmemory_5fblock_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_oneflow_2fcore_2fmemory_2fmemory_5fblock_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_oneflow_2fcore_2fmemory_2fmemory_5fblock_2eproto;
namespace oneflow {
class ChunkProto;
class ChunkProtoDefaultTypeInternal;
extern ChunkProtoDefaultTypeInternal _ChunkProto_default_instance_;
class MemBlockAndChunkList;
class MemBlockAndChunkListDefaultTypeInternal;
extern MemBlockAndChunkListDefaultTypeInternal _MemBlockAndChunkList_default_instance_;
class MemBlockProto;
class MemBlockProtoDefaultTypeInternal;
extern MemBlockProtoDefaultTypeInternal _MemBlockProto_default_instance_;
}  // namespace oneflow
PROTOBUF_NAMESPACE_OPEN
template<> ::oneflow::ChunkProto* Arena::CreateMaybeMessage<::oneflow::ChunkProto>(Arena*);
template<> ::oneflow::MemBlockAndChunkList* Arena::CreateMaybeMessage<::oneflow::MemBlockAndChunkList>(Arena*);
template<> ::oneflow::MemBlockProto* Arena::CreateMaybeMessage<::oneflow::MemBlockProto>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace oneflow {

// ===================================================================

class MemBlockProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:oneflow.MemBlockProto) */ {
 public:
  MemBlockProto();
  virtual ~MemBlockProto();

  MemBlockProto(const MemBlockProto& from);
  MemBlockProto(MemBlockProto&& from) noexcept
    : MemBlockProto() {
    *this = ::std::move(from);
  }

  inline MemBlockProto& operator=(const MemBlockProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline MemBlockProto& operator=(MemBlockProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MemBlockProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MemBlockProto* internal_default_instance() {
    return reinterpret_cast<const MemBlockProto*>(
               &_MemBlockProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MemBlockProto& a, MemBlockProto& b) {
    a.Swap(&b);
  }
  inline void Swap(MemBlockProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MemBlockProto* New() const final {
    return CreateMaybeMessage<MemBlockProto>(nullptr);
  }

  MemBlockProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MemBlockProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MemBlockProto& from);
  void MergeFrom(const MemBlockProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MemBlockProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "oneflow.MemBlockProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_oneflow_2fcore_2fmemory_2fmemory_5fblock_2eproto);
    return ::descriptor_table_oneflow_2fcore_2fmemory_2fmemory_5fblock_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kJobIdFieldNumber = 2,
    kVariableOpNameFieldNumber = 10,
    kMemCaseFieldNumber = 4,
    kMemBlockIdFieldNumber = 1,
    kMachineIdFieldNumber = 3,
    kMemSizeFieldNumber = 8,
    kEnableReuseMemFieldNumber = 5,
    kIsSeparatedHeaderFieldNumber = 11,
    kChunkIdFieldNumber = 6,
    kChunkOffsetFieldNumber = 7,
    kThrdIdHintFieldNumber = 9,
  };
  // repeated int64 job_id = 2;
  int job_id_size() const;
  void clear_job_id();
  ::PROTOBUF_NAMESPACE_ID::int64 job_id(int index) const;
  void set_job_id(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_job_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      job_id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_job_id();

  // optional string variable_op_name = 10 [default = ""];
  bool has_variable_op_name() const;
  void clear_variable_op_name();
  const std::string& variable_op_name() const;
  void set_variable_op_name(const std::string& value);
  void set_variable_op_name(std::string&& value);
  void set_variable_op_name(const char* value);
  void set_variable_op_name(const char* value, size_t size);
  std::string* mutable_variable_op_name();
  std::string* release_variable_op_name();
  void set_allocated_variable_op_name(std::string* variable_op_name);

  // required .oneflow.MemoryCase mem_case = 4;
  bool has_mem_case() const;
  void clear_mem_case();
  const ::oneflow::MemoryCase& mem_case() const;
  ::oneflow::MemoryCase* release_mem_case();
  ::oneflow::MemoryCase* mutable_mem_case();
  void set_allocated_mem_case(::oneflow::MemoryCase* mem_case);

  // required int64 mem_block_id = 1;
  bool has_mem_block_id() const;
  void clear_mem_block_id();
  ::PROTOBUF_NAMESPACE_ID::int64 mem_block_id() const;
  void set_mem_block_id(::PROTOBUF_NAMESPACE_ID::int64 value);

  // required int64 machine_id = 3;
  bool has_machine_id() const;
  void clear_machine_id();
  ::PROTOBUF_NAMESPACE_ID::int64 machine_id() const;
  void set_machine_id(::PROTOBUF_NAMESPACE_ID::int64 value);

  // required int64 mem_size = 8;
  bool has_mem_size() const;
  void clear_mem_size();
  ::PROTOBUF_NAMESPACE_ID::int64 mem_size() const;
  void set_mem_size(::PROTOBUF_NAMESPACE_ID::int64 value);

  // required bool enable_reuse_mem = 5;
  bool has_enable_reuse_mem() const;
  void clear_enable_reuse_mem();
  bool enable_reuse_mem() const;
  void set_enable_reuse_mem(bool value);

  // optional bool is_separated_header = 11 [default = false];
  bool has_is_separated_header() const;
  void clear_is_separated_header();
  bool is_separated_header() const;
  void set_is_separated_header(bool value);

  // optional int64 chunk_id = 6 [default = -1];
  bool has_chunk_id() const;
  void clear_chunk_id();
  ::PROTOBUF_NAMESPACE_ID::int64 chunk_id() const;
  void set_chunk_id(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 chunk_offset = 7 [default = -1];
  bool has_chunk_offset() const;
  void clear_chunk_offset();
  ::PROTOBUF_NAMESPACE_ID::int64 chunk_offset() const;
  void set_chunk_offset(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 thrd_id_hint = 9 [default = -1];
  bool has_thrd_id_hint() const;
  void clear_thrd_id_hint();
  ::PROTOBUF_NAMESPACE_ID::int64 thrd_id_hint() const;
  void set_thrd_id_hint(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:oneflow.MemBlockProto)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > job_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr variable_op_name_;
  ::oneflow::MemoryCase* mem_case_;
  ::PROTOBUF_NAMESPACE_ID::int64 mem_block_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 machine_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 mem_size_;
  bool enable_reuse_mem_;
  bool is_separated_header_;
  ::PROTOBUF_NAMESPACE_ID::int64 chunk_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 chunk_offset_;
  ::PROTOBUF_NAMESPACE_ID::int64 thrd_id_hint_;
  friend struct ::TableStruct_oneflow_2fcore_2fmemory_2fmemory_5fblock_2eproto;
};
// -------------------------------------------------------------------

class ChunkProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:oneflow.ChunkProto) */ {
 public:
  ChunkProto();
  virtual ~ChunkProto();

  ChunkProto(const ChunkProto& from);
  ChunkProto(ChunkProto&& from) noexcept
    : ChunkProto() {
    *this = ::std::move(from);
  }

  inline ChunkProto& operator=(const ChunkProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChunkProto& operator=(ChunkProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ChunkProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChunkProto* internal_default_instance() {
    return reinterpret_cast<const ChunkProto*>(
               &_ChunkProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ChunkProto& a, ChunkProto& b) {
    a.Swap(&b);
  }
  inline void Swap(ChunkProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChunkProto* New() const final {
    return CreateMaybeMessage<ChunkProto>(nullptr);
  }

  ChunkProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChunkProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChunkProto& from);
  void MergeFrom(const ChunkProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChunkProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "oneflow.ChunkProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_oneflow_2fcore_2fmemory_2fmemory_5fblock_2eproto);
    return ::descriptor_table_oneflow_2fcore_2fmemory_2fmemory_5fblock_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kJobIdFieldNumber = 2,
    kMemCaseFieldNumber = 4,
    kChunkIdFieldNumber = 1,
    kMachineIdFieldNumber = 3,
    kMemSizeFieldNumber = 5,
  };
  // repeated int64 job_id = 2;
  int job_id_size() const;
  void clear_job_id();
  ::PROTOBUF_NAMESPACE_ID::int64 job_id(int index) const;
  void set_job_id(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_job_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      job_id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_job_id();

  // required .oneflow.MemoryCase mem_case = 4;
  bool has_mem_case() const;
  void clear_mem_case();
  const ::oneflow::MemoryCase& mem_case() const;
  ::oneflow::MemoryCase* release_mem_case();
  ::oneflow::MemoryCase* mutable_mem_case();
  void set_allocated_mem_case(::oneflow::MemoryCase* mem_case);

  // required int64 chunk_id = 1;
  bool has_chunk_id() const;
  void clear_chunk_id();
  ::PROTOBUF_NAMESPACE_ID::int64 chunk_id() const;
  void set_chunk_id(::PROTOBUF_NAMESPACE_ID::int64 value);

  // required int64 machine_id = 3;
  bool has_machine_id() const;
  void clear_machine_id();
  ::PROTOBUF_NAMESPACE_ID::int64 machine_id() const;
  void set_machine_id(::PROTOBUF_NAMESPACE_ID::int64 value);

  // required int64 mem_size = 5;
  bool has_mem_size() const;
  void clear_mem_size();
  ::PROTOBUF_NAMESPACE_ID::int64 mem_size() const;
  void set_mem_size(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:oneflow.ChunkProto)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > job_id_;
  ::oneflow::MemoryCase* mem_case_;
  ::PROTOBUF_NAMESPACE_ID::int64 chunk_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 machine_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 mem_size_;
  friend struct ::TableStruct_oneflow_2fcore_2fmemory_2fmemory_5fblock_2eproto;
};
// -------------------------------------------------------------------

class MemBlockAndChunkList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:oneflow.MemBlockAndChunkList) */ {
 public:
  MemBlockAndChunkList();
  virtual ~MemBlockAndChunkList();

  MemBlockAndChunkList(const MemBlockAndChunkList& from);
  MemBlockAndChunkList(MemBlockAndChunkList&& from) noexcept
    : MemBlockAndChunkList() {
    *this = ::std::move(from);
  }

  inline MemBlockAndChunkList& operator=(const MemBlockAndChunkList& from) {
    CopyFrom(from);
    return *this;
  }
  inline MemBlockAndChunkList& operator=(MemBlockAndChunkList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MemBlockAndChunkList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MemBlockAndChunkList* internal_default_instance() {
    return reinterpret_cast<const MemBlockAndChunkList*>(
               &_MemBlockAndChunkList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(MemBlockAndChunkList& a, MemBlockAndChunkList& b) {
    a.Swap(&b);
  }
  inline void Swap(MemBlockAndChunkList* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MemBlockAndChunkList* New() const final {
    return CreateMaybeMessage<MemBlockAndChunkList>(nullptr);
  }

  MemBlockAndChunkList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MemBlockAndChunkList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MemBlockAndChunkList& from);
  void MergeFrom(const MemBlockAndChunkList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MemBlockAndChunkList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "oneflow.MemBlockAndChunkList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_oneflow_2fcore_2fmemory_2fmemory_5fblock_2eproto);
    return ::descriptor_table_oneflow_2fcore_2fmemory_2fmemory_5fblock_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMemBlockFieldNumber = 1,
    kChunkFieldNumber = 2,
  };
  // repeated .oneflow.MemBlockProto mem_block = 1;
  int mem_block_size() const;
  void clear_mem_block();
  ::oneflow::MemBlockProto* mutable_mem_block(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oneflow::MemBlockProto >*
      mutable_mem_block();
  const ::oneflow::MemBlockProto& mem_block(int index) const;
  ::oneflow::MemBlockProto* add_mem_block();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oneflow::MemBlockProto >&
      mem_block() const;

  // repeated .oneflow.ChunkProto chunk = 2;
  int chunk_size() const;
  void clear_chunk();
  ::oneflow::ChunkProto* mutable_chunk(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oneflow::ChunkProto >*
      mutable_chunk();
  const ::oneflow::ChunkProto& chunk(int index) const;
  ::oneflow::ChunkProto* add_chunk();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oneflow::ChunkProto >&
      chunk() const;

  // @@protoc_insertion_point(class_scope:oneflow.MemBlockAndChunkList)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oneflow::MemBlockProto > mem_block_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oneflow::ChunkProto > chunk_;
  friend struct ::TableStruct_oneflow_2fcore_2fmemory_2fmemory_5fblock_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MemBlockProto

// required int64 mem_block_id = 1;
inline bool MemBlockProto::has_mem_block_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MemBlockProto::clear_mem_block_id() {
  mem_block_id_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MemBlockProto::mem_block_id() const {
  // @@protoc_insertion_point(field_get:oneflow.MemBlockProto.mem_block_id)
  return mem_block_id_;
}
inline void MemBlockProto::set_mem_block_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  mem_block_id_ = value;
  // @@protoc_insertion_point(field_set:oneflow.MemBlockProto.mem_block_id)
}

// repeated int64 job_id = 2;
inline int MemBlockProto::job_id_size() const {
  return job_id_.size();
}
inline void MemBlockProto::clear_job_id() {
  job_id_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MemBlockProto::job_id(int index) const {
  // @@protoc_insertion_point(field_get:oneflow.MemBlockProto.job_id)
  return job_id_.Get(index);
}
inline void MemBlockProto::set_job_id(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  job_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:oneflow.MemBlockProto.job_id)
}
inline void MemBlockProto::add_job_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  job_id_.Add(value);
  // @@protoc_insertion_point(field_add:oneflow.MemBlockProto.job_id)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
MemBlockProto::job_id() const {
  // @@protoc_insertion_point(field_list:oneflow.MemBlockProto.job_id)
  return job_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
MemBlockProto::mutable_job_id() {
  // @@protoc_insertion_point(field_mutable_list:oneflow.MemBlockProto.job_id)
  return &job_id_;
}

// required int64 machine_id = 3;
inline bool MemBlockProto::has_machine_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MemBlockProto::clear_machine_id() {
  machine_id_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MemBlockProto::machine_id() const {
  // @@protoc_insertion_point(field_get:oneflow.MemBlockProto.machine_id)
  return machine_id_;
}
inline void MemBlockProto::set_machine_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000008u;
  machine_id_ = value;
  // @@protoc_insertion_point(field_set:oneflow.MemBlockProto.machine_id)
}

// required .oneflow.MemoryCase mem_case = 4;
inline bool MemBlockProto::has_mem_case() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::oneflow::MemoryCase& MemBlockProto::mem_case() const {
  const ::oneflow::MemoryCase* p = mem_case_;
  // @@protoc_insertion_point(field_get:oneflow.MemBlockProto.mem_case)
  return p != nullptr ? *p : *reinterpret_cast<const ::oneflow::MemoryCase*>(
      &::oneflow::_MemoryCase_default_instance_);
}
inline ::oneflow::MemoryCase* MemBlockProto::release_mem_case() {
  // @@protoc_insertion_point(field_release:oneflow.MemBlockProto.mem_case)
  _has_bits_[0] &= ~0x00000002u;
  ::oneflow::MemoryCase* temp = mem_case_;
  mem_case_ = nullptr;
  return temp;
}
inline ::oneflow::MemoryCase* MemBlockProto::mutable_mem_case() {
  _has_bits_[0] |= 0x00000002u;
  if (mem_case_ == nullptr) {
    auto* p = CreateMaybeMessage<::oneflow::MemoryCase>(GetArenaNoVirtual());
    mem_case_ = p;
  }
  // @@protoc_insertion_point(field_mutable:oneflow.MemBlockProto.mem_case)
  return mem_case_;
}
inline void MemBlockProto::set_allocated_mem_case(::oneflow::MemoryCase* mem_case) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(mem_case_);
  }
  if (mem_case) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mem_case = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mem_case, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  mem_case_ = mem_case;
  // @@protoc_insertion_point(field_set_allocated:oneflow.MemBlockProto.mem_case)
}

// required bool enable_reuse_mem = 5;
inline bool MemBlockProto::has_enable_reuse_mem() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MemBlockProto::clear_enable_reuse_mem() {
  enable_reuse_mem_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool MemBlockProto::enable_reuse_mem() const {
  // @@protoc_insertion_point(field_get:oneflow.MemBlockProto.enable_reuse_mem)
  return enable_reuse_mem_;
}
inline void MemBlockProto::set_enable_reuse_mem(bool value) {
  _has_bits_[0] |= 0x00000020u;
  enable_reuse_mem_ = value;
  // @@protoc_insertion_point(field_set:oneflow.MemBlockProto.enable_reuse_mem)
}

// optional int64 chunk_id = 6 [default = -1];
inline bool MemBlockProto::has_chunk_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void MemBlockProto::clear_chunk_id() {
  chunk_id_ = PROTOBUF_LONGLONG(-1);
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MemBlockProto::chunk_id() const {
  // @@protoc_insertion_point(field_get:oneflow.MemBlockProto.chunk_id)
  return chunk_id_;
}
inline void MemBlockProto::set_chunk_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000080u;
  chunk_id_ = value;
  // @@protoc_insertion_point(field_set:oneflow.MemBlockProto.chunk_id)
}

// optional int64 chunk_offset = 7 [default = -1];
inline bool MemBlockProto::has_chunk_offset() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void MemBlockProto::clear_chunk_offset() {
  chunk_offset_ = PROTOBUF_LONGLONG(-1);
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MemBlockProto::chunk_offset() const {
  // @@protoc_insertion_point(field_get:oneflow.MemBlockProto.chunk_offset)
  return chunk_offset_;
}
inline void MemBlockProto::set_chunk_offset(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000100u;
  chunk_offset_ = value;
  // @@protoc_insertion_point(field_set:oneflow.MemBlockProto.chunk_offset)
}

// required int64 mem_size = 8;
inline bool MemBlockProto::has_mem_size() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MemBlockProto::clear_mem_size() {
  mem_size_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MemBlockProto::mem_size() const {
  // @@protoc_insertion_point(field_get:oneflow.MemBlockProto.mem_size)
  return mem_size_;
}
inline void MemBlockProto::set_mem_size(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000010u;
  mem_size_ = value;
  // @@protoc_insertion_point(field_set:oneflow.MemBlockProto.mem_size)
}

// optional int64 thrd_id_hint = 9 [default = -1];
inline bool MemBlockProto::has_thrd_id_hint() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void MemBlockProto::clear_thrd_id_hint() {
  thrd_id_hint_ = PROTOBUF_LONGLONG(-1);
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MemBlockProto::thrd_id_hint() const {
  // @@protoc_insertion_point(field_get:oneflow.MemBlockProto.thrd_id_hint)
  return thrd_id_hint_;
}
inline void MemBlockProto::set_thrd_id_hint(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000200u;
  thrd_id_hint_ = value;
  // @@protoc_insertion_point(field_set:oneflow.MemBlockProto.thrd_id_hint)
}

// optional string variable_op_name = 10 [default = ""];
inline bool MemBlockProto::has_variable_op_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MemBlockProto::clear_variable_op_name() {
  variable_op_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& MemBlockProto::variable_op_name() const {
  // @@protoc_insertion_point(field_get:oneflow.MemBlockProto.variable_op_name)
  return variable_op_name_.GetNoArena();
}
inline void MemBlockProto::set_variable_op_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  variable_op_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:oneflow.MemBlockProto.variable_op_name)
}
inline void MemBlockProto::set_variable_op_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  variable_op_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:oneflow.MemBlockProto.variable_op_name)
}
inline void MemBlockProto::set_variable_op_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  variable_op_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:oneflow.MemBlockProto.variable_op_name)
}
inline void MemBlockProto::set_variable_op_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  variable_op_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:oneflow.MemBlockProto.variable_op_name)
}
inline std::string* MemBlockProto::mutable_variable_op_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:oneflow.MemBlockProto.variable_op_name)
  return variable_op_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MemBlockProto::release_variable_op_name() {
  // @@protoc_insertion_point(field_release:oneflow.MemBlockProto.variable_op_name)
  if (!has_variable_op_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return variable_op_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MemBlockProto::set_allocated_variable_op_name(std::string* variable_op_name) {
  if (variable_op_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  variable_op_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), variable_op_name);
  // @@protoc_insertion_point(field_set_allocated:oneflow.MemBlockProto.variable_op_name)
}

// optional bool is_separated_header = 11 [default = false];
inline bool MemBlockProto::has_is_separated_header() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MemBlockProto::clear_is_separated_header() {
  is_separated_header_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool MemBlockProto::is_separated_header() const {
  // @@protoc_insertion_point(field_get:oneflow.MemBlockProto.is_separated_header)
  return is_separated_header_;
}
inline void MemBlockProto::set_is_separated_header(bool value) {
  _has_bits_[0] |= 0x00000040u;
  is_separated_header_ = value;
  // @@protoc_insertion_point(field_set:oneflow.MemBlockProto.is_separated_header)
}

// -------------------------------------------------------------------

// ChunkProto

// required int64 chunk_id = 1;
inline bool ChunkProto::has_chunk_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChunkProto::clear_chunk_id() {
  chunk_id_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ChunkProto::chunk_id() const {
  // @@protoc_insertion_point(field_get:oneflow.ChunkProto.chunk_id)
  return chunk_id_;
}
inline void ChunkProto::set_chunk_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  chunk_id_ = value;
  // @@protoc_insertion_point(field_set:oneflow.ChunkProto.chunk_id)
}

// repeated int64 job_id = 2;
inline int ChunkProto::job_id_size() const {
  return job_id_.size();
}
inline void ChunkProto::clear_job_id() {
  job_id_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ChunkProto::job_id(int index) const {
  // @@protoc_insertion_point(field_get:oneflow.ChunkProto.job_id)
  return job_id_.Get(index);
}
inline void ChunkProto::set_job_id(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  job_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:oneflow.ChunkProto.job_id)
}
inline void ChunkProto::add_job_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  job_id_.Add(value);
  // @@protoc_insertion_point(field_add:oneflow.ChunkProto.job_id)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
ChunkProto::job_id() const {
  // @@protoc_insertion_point(field_list:oneflow.ChunkProto.job_id)
  return job_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
ChunkProto::mutable_job_id() {
  // @@protoc_insertion_point(field_mutable_list:oneflow.ChunkProto.job_id)
  return &job_id_;
}

// required int64 machine_id = 3;
inline bool ChunkProto::has_machine_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ChunkProto::clear_machine_id() {
  machine_id_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ChunkProto::machine_id() const {
  // @@protoc_insertion_point(field_get:oneflow.ChunkProto.machine_id)
  return machine_id_;
}
inline void ChunkProto::set_machine_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  machine_id_ = value;
  // @@protoc_insertion_point(field_set:oneflow.ChunkProto.machine_id)
}

// required .oneflow.MemoryCase mem_case = 4;
inline bool ChunkProto::has_mem_case() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::oneflow::MemoryCase& ChunkProto::mem_case() const {
  const ::oneflow::MemoryCase* p = mem_case_;
  // @@protoc_insertion_point(field_get:oneflow.ChunkProto.mem_case)
  return p != nullptr ? *p : *reinterpret_cast<const ::oneflow::MemoryCase*>(
      &::oneflow::_MemoryCase_default_instance_);
}
inline ::oneflow::MemoryCase* ChunkProto::release_mem_case() {
  // @@protoc_insertion_point(field_release:oneflow.ChunkProto.mem_case)
  _has_bits_[0] &= ~0x00000001u;
  ::oneflow::MemoryCase* temp = mem_case_;
  mem_case_ = nullptr;
  return temp;
}
inline ::oneflow::MemoryCase* ChunkProto::mutable_mem_case() {
  _has_bits_[0] |= 0x00000001u;
  if (mem_case_ == nullptr) {
    auto* p = CreateMaybeMessage<::oneflow::MemoryCase>(GetArenaNoVirtual());
    mem_case_ = p;
  }
  // @@protoc_insertion_point(field_mutable:oneflow.ChunkProto.mem_case)
  return mem_case_;
}
inline void ChunkProto::set_allocated_mem_case(::oneflow::MemoryCase* mem_case) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(mem_case_);
  }
  if (mem_case) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mem_case = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mem_case, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  mem_case_ = mem_case;
  // @@protoc_insertion_point(field_set_allocated:oneflow.ChunkProto.mem_case)
}

// required int64 mem_size = 5;
inline bool ChunkProto::has_mem_size() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ChunkProto::clear_mem_size() {
  mem_size_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ChunkProto::mem_size() const {
  // @@protoc_insertion_point(field_get:oneflow.ChunkProto.mem_size)
  return mem_size_;
}
inline void ChunkProto::set_mem_size(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000008u;
  mem_size_ = value;
  // @@protoc_insertion_point(field_set:oneflow.ChunkProto.mem_size)
}

// -------------------------------------------------------------------

// MemBlockAndChunkList

// repeated .oneflow.MemBlockProto mem_block = 1;
inline int MemBlockAndChunkList::mem_block_size() const {
  return mem_block_.size();
}
inline void MemBlockAndChunkList::clear_mem_block() {
  mem_block_.Clear();
}
inline ::oneflow::MemBlockProto* MemBlockAndChunkList::mutable_mem_block(int index) {
  // @@protoc_insertion_point(field_mutable:oneflow.MemBlockAndChunkList.mem_block)
  return mem_block_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oneflow::MemBlockProto >*
MemBlockAndChunkList::mutable_mem_block() {
  // @@protoc_insertion_point(field_mutable_list:oneflow.MemBlockAndChunkList.mem_block)
  return &mem_block_;
}
inline const ::oneflow::MemBlockProto& MemBlockAndChunkList::mem_block(int index) const {
  // @@protoc_insertion_point(field_get:oneflow.MemBlockAndChunkList.mem_block)
  return mem_block_.Get(index);
}
inline ::oneflow::MemBlockProto* MemBlockAndChunkList::add_mem_block() {
  // @@protoc_insertion_point(field_add:oneflow.MemBlockAndChunkList.mem_block)
  return mem_block_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oneflow::MemBlockProto >&
MemBlockAndChunkList::mem_block() const {
  // @@protoc_insertion_point(field_list:oneflow.MemBlockAndChunkList.mem_block)
  return mem_block_;
}

// repeated .oneflow.ChunkProto chunk = 2;
inline int MemBlockAndChunkList::chunk_size() const {
  return chunk_.size();
}
inline void MemBlockAndChunkList::clear_chunk() {
  chunk_.Clear();
}
inline ::oneflow::ChunkProto* MemBlockAndChunkList::mutable_chunk(int index) {
  // @@protoc_insertion_point(field_mutable:oneflow.MemBlockAndChunkList.chunk)
  return chunk_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oneflow::ChunkProto >*
MemBlockAndChunkList::mutable_chunk() {
  // @@protoc_insertion_point(field_mutable_list:oneflow.MemBlockAndChunkList.chunk)
  return &chunk_;
}
inline const ::oneflow::ChunkProto& MemBlockAndChunkList::chunk(int index) const {
  // @@protoc_insertion_point(field_get:oneflow.MemBlockAndChunkList.chunk)
  return chunk_.Get(index);
}
inline ::oneflow::ChunkProto* MemBlockAndChunkList::add_chunk() {
  // @@protoc_insertion_point(field_add:oneflow.MemBlockAndChunkList.chunk)
  return chunk_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oneflow::ChunkProto >&
MemBlockAndChunkList::chunk() const {
  // @@protoc_insertion_point(field_list:oneflow.MemBlockAndChunkList.chunk)
  return chunk_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace oneflow

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_oneflow_2fcore_2fmemory_2fmemory_5fblock_2eproto
