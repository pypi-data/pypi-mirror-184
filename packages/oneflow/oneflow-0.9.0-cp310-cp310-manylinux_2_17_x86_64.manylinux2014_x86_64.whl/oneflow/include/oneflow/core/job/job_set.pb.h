// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: oneflow/core/job/job_set.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_oneflow_2fcore_2fjob_2fjob_5fset_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_oneflow_2fcore_2fjob_2fjob_5fset_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "oneflow/core/job/job.pb.h"
#include "oneflow/core/job/resource.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_oneflow_2fcore_2fjob_2fjob_5fset_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_oneflow_2fcore_2fjob_2fjob_5fset_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_oneflow_2fcore_2fjob_2fjob_5fset_2eproto;
namespace oneflow {
class ConfigProto;
class ConfigProtoDefaultTypeInternal;
extern ConfigProtoDefaultTypeInternal _ConfigProto_default_instance_;
class CustomParallelismStrategy;
class CustomParallelismStrategyDefaultTypeInternal;
extern CustomParallelismStrategyDefaultTypeInternal _CustomParallelismStrategy_default_instance_;
class InterJobReuseMemStrategy;
class InterJobReuseMemStrategyDefaultTypeInternal;
extern InterJobReuseMemStrategyDefaultTypeInternal _InterJobReuseMemStrategy_default_instance_;
class JobNameGroup;
class JobNameGroupDefaultTypeInternal;
extern JobNameGroupDefaultTypeInternal _JobNameGroup_default_instance_;
class JobSet;
class JobSetDefaultTypeInternal;
extern JobSetDefaultTypeInternal _JobSet_default_instance_;
class ParallelismPriorityStrategy;
class ParallelismPriorityStrategyDefaultTypeInternal;
extern ParallelismPriorityStrategyDefaultTypeInternal _ParallelismPriorityStrategy_default_instance_;
class ReuseMemPriorityStrategy;
class ReuseMemPriorityStrategyDefaultTypeInternal;
extern ReuseMemPriorityStrategyDefaultTypeInternal _ReuseMemPriorityStrategy_default_instance_;
}  // namespace oneflow
PROTOBUF_NAMESPACE_OPEN
template<> ::oneflow::ConfigProto* Arena::CreateMaybeMessage<::oneflow::ConfigProto>(Arena*);
template<> ::oneflow::CustomParallelismStrategy* Arena::CreateMaybeMessage<::oneflow::CustomParallelismStrategy>(Arena*);
template<> ::oneflow::InterJobReuseMemStrategy* Arena::CreateMaybeMessage<::oneflow::InterJobReuseMemStrategy>(Arena*);
template<> ::oneflow::JobNameGroup* Arena::CreateMaybeMessage<::oneflow::JobNameGroup>(Arena*);
template<> ::oneflow::JobSet* Arena::CreateMaybeMessage<::oneflow::JobSet>(Arena*);
template<> ::oneflow::ParallelismPriorityStrategy* Arena::CreateMaybeMessage<::oneflow::ParallelismPriorityStrategy>(Arena*);
template<> ::oneflow::ReuseMemPriorityStrategy* Arena::CreateMaybeMessage<::oneflow::ReuseMemPriorityStrategy>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace oneflow {

// ===================================================================

class ReuseMemPriorityStrategy :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:oneflow.ReuseMemPriorityStrategy) */ {
 public:
  ReuseMemPriorityStrategy();
  virtual ~ReuseMemPriorityStrategy();

  ReuseMemPriorityStrategy(const ReuseMemPriorityStrategy& from);
  ReuseMemPriorityStrategy(ReuseMemPriorityStrategy&& from) noexcept
    : ReuseMemPriorityStrategy() {
    *this = ::std::move(from);
  }

  inline ReuseMemPriorityStrategy& operator=(const ReuseMemPriorityStrategy& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReuseMemPriorityStrategy& operator=(ReuseMemPriorityStrategy&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReuseMemPriorityStrategy& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReuseMemPriorityStrategy* internal_default_instance() {
    return reinterpret_cast<const ReuseMemPriorityStrategy*>(
               &_ReuseMemPriorityStrategy_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ReuseMemPriorityStrategy& a, ReuseMemPriorityStrategy& b) {
    a.Swap(&b);
  }
  inline void Swap(ReuseMemPriorityStrategy* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReuseMemPriorityStrategy* New() const final {
    return CreateMaybeMessage<ReuseMemPriorityStrategy>(nullptr);
  }

  ReuseMemPriorityStrategy* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReuseMemPriorityStrategy>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReuseMemPriorityStrategy& from);
  void MergeFrom(const ReuseMemPriorityStrategy& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReuseMemPriorityStrategy* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "oneflow.ReuseMemPriorityStrategy";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_oneflow_2fcore_2fjob_2fjob_5fset_2eproto);
    return ::descriptor_table_oneflow_2fcore_2fjob_2fjob_5fset_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:oneflow.ReuseMemPriorityStrategy)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_oneflow_2fcore_2fjob_2fjob_5fset_2eproto;
};
// -------------------------------------------------------------------

class ParallelismPriorityStrategy :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:oneflow.ParallelismPriorityStrategy) */ {
 public:
  ParallelismPriorityStrategy();
  virtual ~ParallelismPriorityStrategy();

  ParallelismPriorityStrategy(const ParallelismPriorityStrategy& from);
  ParallelismPriorityStrategy(ParallelismPriorityStrategy&& from) noexcept
    : ParallelismPriorityStrategy() {
    *this = ::std::move(from);
  }

  inline ParallelismPriorityStrategy& operator=(const ParallelismPriorityStrategy& from) {
    CopyFrom(from);
    return *this;
  }
  inline ParallelismPriorityStrategy& operator=(ParallelismPriorityStrategy&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ParallelismPriorityStrategy& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ParallelismPriorityStrategy* internal_default_instance() {
    return reinterpret_cast<const ParallelismPriorityStrategy*>(
               &_ParallelismPriorityStrategy_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ParallelismPriorityStrategy& a, ParallelismPriorityStrategy& b) {
    a.Swap(&b);
  }
  inline void Swap(ParallelismPriorityStrategy* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ParallelismPriorityStrategy* New() const final {
    return CreateMaybeMessage<ParallelismPriorityStrategy>(nullptr);
  }

  ParallelismPriorityStrategy* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ParallelismPriorityStrategy>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ParallelismPriorityStrategy& from);
  void MergeFrom(const ParallelismPriorityStrategy& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ParallelismPriorityStrategy* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "oneflow.ParallelismPriorityStrategy";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_oneflow_2fcore_2fjob_2fjob_5fset_2eproto);
    return ::descriptor_table_oneflow_2fcore_2fjob_2fjob_5fset_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:oneflow.ParallelismPriorityStrategy)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_oneflow_2fcore_2fjob_2fjob_5fset_2eproto;
};
// -------------------------------------------------------------------

class JobNameGroup :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:oneflow.JobNameGroup) */ {
 public:
  JobNameGroup();
  virtual ~JobNameGroup();

  JobNameGroup(const JobNameGroup& from);
  JobNameGroup(JobNameGroup&& from) noexcept
    : JobNameGroup() {
    *this = ::std::move(from);
  }

  inline JobNameGroup& operator=(const JobNameGroup& from) {
    CopyFrom(from);
    return *this;
  }
  inline JobNameGroup& operator=(JobNameGroup&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const JobNameGroup& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const JobNameGroup* internal_default_instance() {
    return reinterpret_cast<const JobNameGroup*>(
               &_JobNameGroup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(JobNameGroup& a, JobNameGroup& b) {
    a.Swap(&b);
  }
  inline void Swap(JobNameGroup* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline JobNameGroup* New() const final {
    return CreateMaybeMessage<JobNameGroup>(nullptr);
  }

  JobNameGroup* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<JobNameGroup>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const JobNameGroup& from);
  void MergeFrom(const JobNameGroup& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JobNameGroup* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "oneflow.JobNameGroup";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_oneflow_2fcore_2fjob_2fjob_5fset_2eproto);
    return ::descriptor_table_oneflow_2fcore_2fjob_2fjob_5fset_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kJobNameFieldNumber = 1,
  };
  // repeated string job_name = 1;
  int job_name_size() const;
  void clear_job_name();
  const std::string& job_name(int index) const;
  std::string* mutable_job_name(int index);
  void set_job_name(int index, const std::string& value);
  void set_job_name(int index, std::string&& value);
  void set_job_name(int index, const char* value);
  void set_job_name(int index, const char* value, size_t size);
  std::string* add_job_name();
  void add_job_name(const std::string& value);
  void add_job_name(std::string&& value);
  void add_job_name(const char* value);
  void add_job_name(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& job_name() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_job_name();

  // @@protoc_insertion_point(class_scope:oneflow.JobNameGroup)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> job_name_;
  friend struct ::TableStruct_oneflow_2fcore_2fjob_2fjob_5fset_2eproto;
};
// -------------------------------------------------------------------

class CustomParallelismStrategy :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:oneflow.CustomParallelismStrategy) */ {
 public:
  CustomParallelismStrategy();
  virtual ~CustomParallelismStrategy();

  CustomParallelismStrategy(const CustomParallelismStrategy& from);
  CustomParallelismStrategy(CustomParallelismStrategy&& from) noexcept
    : CustomParallelismStrategy() {
    *this = ::std::move(from);
  }

  inline CustomParallelismStrategy& operator=(const CustomParallelismStrategy& from) {
    CopyFrom(from);
    return *this;
  }
  inline CustomParallelismStrategy& operator=(CustomParallelismStrategy&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CustomParallelismStrategy& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CustomParallelismStrategy* internal_default_instance() {
    return reinterpret_cast<const CustomParallelismStrategy*>(
               &_CustomParallelismStrategy_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CustomParallelismStrategy& a, CustomParallelismStrategy& b) {
    a.Swap(&b);
  }
  inline void Swap(CustomParallelismStrategy* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CustomParallelismStrategy* New() const final {
    return CreateMaybeMessage<CustomParallelismStrategy>(nullptr);
  }

  CustomParallelismStrategy* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CustomParallelismStrategy>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CustomParallelismStrategy& from);
  void MergeFrom(const CustomParallelismStrategy& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CustomParallelismStrategy* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "oneflow.CustomParallelismStrategy";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_oneflow_2fcore_2fjob_2fjob_5fset_2eproto);
    return ::descriptor_table_oneflow_2fcore_2fjob_2fjob_5fset_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNonparallelGroupFieldNumber = 1,
  };
  // repeated .oneflow.JobNameGroup nonparallel_group = 1;
  int nonparallel_group_size() const;
  void clear_nonparallel_group();
  ::oneflow::JobNameGroup* mutable_nonparallel_group(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oneflow::JobNameGroup >*
      mutable_nonparallel_group();
  const ::oneflow::JobNameGroup& nonparallel_group(int index) const;
  ::oneflow::JobNameGroup* add_nonparallel_group();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oneflow::JobNameGroup >&
      nonparallel_group() const;

  // @@protoc_insertion_point(class_scope:oneflow.CustomParallelismStrategy)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oneflow::JobNameGroup > nonparallel_group_;
  friend struct ::TableStruct_oneflow_2fcore_2fjob_2fjob_5fset_2eproto;
};
// -------------------------------------------------------------------

class InterJobReuseMemStrategy :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:oneflow.InterJobReuseMemStrategy) */ {
 public:
  InterJobReuseMemStrategy();
  virtual ~InterJobReuseMemStrategy();

  InterJobReuseMemStrategy(const InterJobReuseMemStrategy& from);
  InterJobReuseMemStrategy(InterJobReuseMemStrategy&& from) noexcept
    : InterJobReuseMemStrategy() {
    *this = ::std::move(from);
  }

  inline InterJobReuseMemStrategy& operator=(const InterJobReuseMemStrategy& from) {
    CopyFrom(from);
    return *this;
  }
  inline InterJobReuseMemStrategy& operator=(InterJobReuseMemStrategy&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InterJobReuseMemStrategy& default_instance();

  enum StrategyCaseCase {
    kReuseMemPriority = 1,
    kParallelismPriority = 2,
    kCustomParallelism = 3,
    STRATEGY_CASE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InterJobReuseMemStrategy* internal_default_instance() {
    return reinterpret_cast<const InterJobReuseMemStrategy*>(
               &_InterJobReuseMemStrategy_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(InterJobReuseMemStrategy& a, InterJobReuseMemStrategy& b) {
    a.Swap(&b);
  }
  inline void Swap(InterJobReuseMemStrategy* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InterJobReuseMemStrategy* New() const final {
    return CreateMaybeMessage<InterJobReuseMemStrategy>(nullptr);
  }

  InterJobReuseMemStrategy* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InterJobReuseMemStrategy>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InterJobReuseMemStrategy& from);
  void MergeFrom(const InterJobReuseMemStrategy& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InterJobReuseMemStrategy* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "oneflow.InterJobReuseMemStrategy";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_oneflow_2fcore_2fjob_2fjob_5fset_2eproto);
    return ::descriptor_table_oneflow_2fcore_2fjob_2fjob_5fset_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReuseMemPriorityFieldNumber = 1,
    kParallelismPriorityFieldNumber = 2,
    kCustomParallelismFieldNumber = 3,
  };
  // optional .oneflow.ReuseMemPriorityStrategy reuse_mem_priority = 1;
  bool has_reuse_mem_priority() const;
  void clear_reuse_mem_priority();
  const ::oneflow::ReuseMemPriorityStrategy& reuse_mem_priority() const;
  ::oneflow::ReuseMemPriorityStrategy* release_reuse_mem_priority();
  ::oneflow::ReuseMemPriorityStrategy* mutable_reuse_mem_priority();
  void set_allocated_reuse_mem_priority(::oneflow::ReuseMemPriorityStrategy* reuse_mem_priority);

  // optional .oneflow.ParallelismPriorityStrategy parallelism_priority = 2;
  bool has_parallelism_priority() const;
  void clear_parallelism_priority();
  const ::oneflow::ParallelismPriorityStrategy& parallelism_priority() const;
  ::oneflow::ParallelismPriorityStrategy* release_parallelism_priority();
  ::oneflow::ParallelismPriorityStrategy* mutable_parallelism_priority();
  void set_allocated_parallelism_priority(::oneflow::ParallelismPriorityStrategy* parallelism_priority);

  // optional .oneflow.CustomParallelismStrategy custom_parallelism = 3;
  bool has_custom_parallelism() const;
  void clear_custom_parallelism();
  const ::oneflow::CustomParallelismStrategy& custom_parallelism() const;
  ::oneflow::CustomParallelismStrategy* release_custom_parallelism();
  ::oneflow::CustomParallelismStrategy* mutable_custom_parallelism();
  void set_allocated_custom_parallelism(::oneflow::CustomParallelismStrategy* custom_parallelism);

  void clear_strategy_case();
  StrategyCaseCase strategy_case_case() const;
  // @@protoc_insertion_point(class_scope:oneflow.InterJobReuseMemStrategy)
 private:
  class _Internal;
  void set_has_reuse_mem_priority();
  void set_has_parallelism_priority();
  void set_has_custom_parallelism();

  inline bool has_strategy_case() const;
  inline void clear_has_strategy_case();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  union StrategyCaseUnion {
    StrategyCaseUnion() {}
    ::oneflow::ReuseMemPriorityStrategy* reuse_mem_priority_;
    ::oneflow::ParallelismPriorityStrategy* parallelism_priority_;
    ::oneflow::CustomParallelismStrategy* custom_parallelism_;
  } strategy_case_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_oneflow_2fcore_2fjob_2fjob_5fset_2eproto;
};
// -------------------------------------------------------------------

class ConfigProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:oneflow.ConfigProto) */ {
 public:
  ConfigProto();
  virtual ~ConfigProto();

  ConfigProto(const ConfigProto& from);
  ConfigProto(ConfigProto&& from) noexcept
    : ConfigProto() {
    *this = ::std::move(from);
  }

  inline ConfigProto& operator=(const ConfigProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConfigProto& operator=(ConfigProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConfigProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConfigProto* internal_default_instance() {
    return reinterpret_cast<const ConfigProto*>(
               &_ConfigProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ConfigProto& a, ConfigProto& b) {
    a.Swap(&b);
  }
  inline void Swap(ConfigProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConfigProto* New() const final {
    return CreateMaybeMessage<ConfigProto>(nullptr);
  }

  ConfigProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConfigProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConfigProto& from);
  void MergeFrom(const ConfigProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "oneflow.ConfigProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_oneflow_2fcore_2fjob_2fjob_5fset_2eproto);
    return ::descriptor_table_oneflow_2fcore_2fjob_2fjob_5fset_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResourceFieldNumber = 1,
    kSessionIdFieldNumber = 5,
  };
  // required .oneflow.Resource resource = 1;
  bool has_resource() const;
  void clear_resource();
  const ::oneflow::Resource& resource() const;
  ::oneflow::Resource* release_resource();
  ::oneflow::Resource* mutable_resource();
  void set_allocated_resource(::oneflow::Resource* resource);

  // required int64 session_id = 5;
  bool has_session_id() const;
  void clear_session_id();
  ::PROTOBUF_NAMESPACE_ID::int64 session_id() const;
  void set_session_id(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:oneflow.ConfigProto)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::oneflow::Resource* resource_;
  ::PROTOBUF_NAMESPACE_ID::int64 session_id_;
  friend struct ::TableStruct_oneflow_2fcore_2fjob_2fjob_5fset_2eproto;
};
// -------------------------------------------------------------------

class JobSet :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:oneflow.JobSet) */ {
 public:
  JobSet();
  virtual ~JobSet();

  JobSet(const JobSet& from);
  JobSet(JobSet&& from) noexcept
    : JobSet() {
    *this = ::std::move(from);
  }

  inline JobSet& operator=(const JobSet& from) {
    CopyFrom(from);
    return *this;
  }
  inline JobSet& operator=(JobSet&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const JobSet& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const JobSet* internal_default_instance() {
    return reinterpret_cast<const JobSet*>(
               &_JobSet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(JobSet& a, JobSet& b) {
    a.Swap(&b);
  }
  inline void Swap(JobSet* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline JobSet* New() const final {
    return CreateMaybeMessage<JobSet>(nullptr);
  }

  JobSet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<JobSet>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const JobSet& from);
  void MergeFrom(const JobSet& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JobSet* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "oneflow.JobSet";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_oneflow_2fcore_2fjob_2fjob_5fset_2eproto);
    return ::descriptor_table_oneflow_2fcore_2fjob_2fjob_5fset_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kJobFieldNumber = 1,
    kInterJobReuseMemStrategyFieldNumber = 5,
  };
  // repeated .oneflow.Job job = 1;
  int job_size() const;
  void clear_job();
  ::oneflow::Job* mutable_job(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oneflow::Job >*
      mutable_job();
  const ::oneflow::Job& job(int index) const;
  ::oneflow::Job* add_job();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oneflow::Job >&
      job() const;

  // optional .oneflow.InterJobReuseMemStrategy inter_job_reuse_mem_strategy = 5;
  bool has_inter_job_reuse_mem_strategy() const;
  void clear_inter_job_reuse_mem_strategy();
  const ::oneflow::InterJobReuseMemStrategy& inter_job_reuse_mem_strategy() const;
  ::oneflow::InterJobReuseMemStrategy* release_inter_job_reuse_mem_strategy();
  ::oneflow::InterJobReuseMemStrategy* mutable_inter_job_reuse_mem_strategy();
  void set_allocated_inter_job_reuse_mem_strategy(::oneflow::InterJobReuseMemStrategy* inter_job_reuse_mem_strategy);

  // @@protoc_insertion_point(class_scope:oneflow.JobSet)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oneflow::Job > job_;
  ::oneflow::InterJobReuseMemStrategy* inter_job_reuse_mem_strategy_;
  friend struct ::TableStruct_oneflow_2fcore_2fjob_2fjob_5fset_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ReuseMemPriorityStrategy

// -------------------------------------------------------------------

// ParallelismPriorityStrategy

// -------------------------------------------------------------------

// JobNameGroup

// repeated string job_name = 1;
inline int JobNameGroup::job_name_size() const {
  return job_name_.size();
}
inline void JobNameGroup::clear_job_name() {
  job_name_.Clear();
}
inline const std::string& JobNameGroup::job_name(int index) const {
  // @@protoc_insertion_point(field_get:oneflow.JobNameGroup.job_name)
  return job_name_.Get(index);
}
inline std::string* JobNameGroup::mutable_job_name(int index) {
  // @@protoc_insertion_point(field_mutable:oneflow.JobNameGroup.job_name)
  return job_name_.Mutable(index);
}
inline void JobNameGroup::set_job_name(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:oneflow.JobNameGroup.job_name)
  job_name_.Mutable(index)->assign(value);
}
inline void JobNameGroup::set_job_name(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:oneflow.JobNameGroup.job_name)
  job_name_.Mutable(index)->assign(std::move(value));
}
inline void JobNameGroup::set_job_name(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  job_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:oneflow.JobNameGroup.job_name)
}
inline void JobNameGroup::set_job_name(int index, const char* value, size_t size) {
  job_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:oneflow.JobNameGroup.job_name)
}
inline std::string* JobNameGroup::add_job_name() {
  // @@protoc_insertion_point(field_add_mutable:oneflow.JobNameGroup.job_name)
  return job_name_.Add();
}
inline void JobNameGroup::add_job_name(const std::string& value) {
  job_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:oneflow.JobNameGroup.job_name)
}
inline void JobNameGroup::add_job_name(std::string&& value) {
  job_name_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:oneflow.JobNameGroup.job_name)
}
inline void JobNameGroup::add_job_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  job_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:oneflow.JobNameGroup.job_name)
}
inline void JobNameGroup::add_job_name(const char* value, size_t size) {
  job_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:oneflow.JobNameGroup.job_name)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
JobNameGroup::job_name() const {
  // @@protoc_insertion_point(field_list:oneflow.JobNameGroup.job_name)
  return job_name_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
JobNameGroup::mutable_job_name() {
  // @@protoc_insertion_point(field_mutable_list:oneflow.JobNameGroup.job_name)
  return &job_name_;
}

// -------------------------------------------------------------------

// CustomParallelismStrategy

// repeated .oneflow.JobNameGroup nonparallel_group = 1;
inline int CustomParallelismStrategy::nonparallel_group_size() const {
  return nonparallel_group_.size();
}
inline void CustomParallelismStrategy::clear_nonparallel_group() {
  nonparallel_group_.Clear();
}
inline ::oneflow::JobNameGroup* CustomParallelismStrategy::mutable_nonparallel_group(int index) {
  // @@protoc_insertion_point(field_mutable:oneflow.CustomParallelismStrategy.nonparallel_group)
  return nonparallel_group_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oneflow::JobNameGroup >*
CustomParallelismStrategy::mutable_nonparallel_group() {
  // @@protoc_insertion_point(field_mutable_list:oneflow.CustomParallelismStrategy.nonparallel_group)
  return &nonparallel_group_;
}
inline const ::oneflow::JobNameGroup& CustomParallelismStrategy::nonparallel_group(int index) const {
  // @@protoc_insertion_point(field_get:oneflow.CustomParallelismStrategy.nonparallel_group)
  return nonparallel_group_.Get(index);
}
inline ::oneflow::JobNameGroup* CustomParallelismStrategy::add_nonparallel_group() {
  // @@protoc_insertion_point(field_add:oneflow.CustomParallelismStrategy.nonparallel_group)
  return nonparallel_group_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oneflow::JobNameGroup >&
CustomParallelismStrategy::nonparallel_group() const {
  // @@protoc_insertion_point(field_list:oneflow.CustomParallelismStrategy.nonparallel_group)
  return nonparallel_group_;
}

// -------------------------------------------------------------------

// InterJobReuseMemStrategy

// optional .oneflow.ReuseMemPriorityStrategy reuse_mem_priority = 1;
inline bool InterJobReuseMemStrategy::has_reuse_mem_priority() const {
  return strategy_case_case() == kReuseMemPriority;
}
inline void InterJobReuseMemStrategy::set_has_reuse_mem_priority() {
  _oneof_case_[0] = kReuseMemPriority;
}
inline void InterJobReuseMemStrategy::clear_reuse_mem_priority() {
  if (has_reuse_mem_priority()) {
    delete strategy_case_.reuse_mem_priority_;
    clear_has_strategy_case();
  }
}
inline ::oneflow::ReuseMemPriorityStrategy* InterJobReuseMemStrategy::release_reuse_mem_priority() {
  // @@protoc_insertion_point(field_release:oneflow.InterJobReuseMemStrategy.reuse_mem_priority)
  if (has_reuse_mem_priority()) {
    clear_has_strategy_case();
      ::oneflow::ReuseMemPriorityStrategy* temp = strategy_case_.reuse_mem_priority_;
    strategy_case_.reuse_mem_priority_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::oneflow::ReuseMemPriorityStrategy& InterJobReuseMemStrategy::reuse_mem_priority() const {
  // @@protoc_insertion_point(field_get:oneflow.InterJobReuseMemStrategy.reuse_mem_priority)
  return has_reuse_mem_priority()
      ? *strategy_case_.reuse_mem_priority_
      : *reinterpret_cast< ::oneflow::ReuseMemPriorityStrategy*>(&::oneflow::_ReuseMemPriorityStrategy_default_instance_);
}
inline ::oneflow::ReuseMemPriorityStrategy* InterJobReuseMemStrategy::mutable_reuse_mem_priority() {
  if (!has_reuse_mem_priority()) {
    clear_strategy_case();
    set_has_reuse_mem_priority();
    strategy_case_.reuse_mem_priority_ = CreateMaybeMessage< ::oneflow::ReuseMemPriorityStrategy >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:oneflow.InterJobReuseMemStrategy.reuse_mem_priority)
  return strategy_case_.reuse_mem_priority_;
}

// optional .oneflow.ParallelismPriorityStrategy parallelism_priority = 2;
inline bool InterJobReuseMemStrategy::has_parallelism_priority() const {
  return strategy_case_case() == kParallelismPriority;
}
inline void InterJobReuseMemStrategy::set_has_parallelism_priority() {
  _oneof_case_[0] = kParallelismPriority;
}
inline void InterJobReuseMemStrategy::clear_parallelism_priority() {
  if (has_parallelism_priority()) {
    delete strategy_case_.parallelism_priority_;
    clear_has_strategy_case();
  }
}
inline ::oneflow::ParallelismPriorityStrategy* InterJobReuseMemStrategy::release_parallelism_priority() {
  // @@protoc_insertion_point(field_release:oneflow.InterJobReuseMemStrategy.parallelism_priority)
  if (has_parallelism_priority()) {
    clear_has_strategy_case();
      ::oneflow::ParallelismPriorityStrategy* temp = strategy_case_.parallelism_priority_;
    strategy_case_.parallelism_priority_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::oneflow::ParallelismPriorityStrategy& InterJobReuseMemStrategy::parallelism_priority() const {
  // @@protoc_insertion_point(field_get:oneflow.InterJobReuseMemStrategy.parallelism_priority)
  return has_parallelism_priority()
      ? *strategy_case_.parallelism_priority_
      : *reinterpret_cast< ::oneflow::ParallelismPriorityStrategy*>(&::oneflow::_ParallelismPriorityStrategy_default_instance_);
}
inline ::oneflow::ParallelismPriorityStrategy* InterJobReuseMemStrategy::mutable_parallelism_priority() {
  if (!has_parallelism_priority()) {
    clear_strategy_case();
    set_has_parallelism_priority();
    strategy_case_.parallelism_priority_ = CreateMaybeMessage< ::oneflow::ParallelismPriorityStrategy >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:oneflow.InterJobReuseMemStrategy.parallelism_priority)
  return strategy_case_.parallelism_priority_;
}

// optional .oneflow.CustomParallelismStrategy custom_parallelism = 3;
inline bool InterJobReuseMemStrategy::has_custom_parallelism() const {
  return strategy_case_case() == kCustomParallelism;
}
inline void InterJobReuseMemStrategy::set_has_custom_parallelism() {
  _oneof_case_[0] = kCustomParallelism;
}
inline void InterJobReuseMemStrategy::clear_custom_parallelism() {
  if (has_custom_parallelism()) {
    delete strategy_case_.custom_parallelism_;
    clear_has_strategy_case();
  }
}
inline ::oneflow::CustomParallelismStrategy* InterJobReuseMemStrategy::release_custom_parallelism() {
  // @@protoc_insertion_point(field_release:oneflow.InterJobReuseMemStrategy.custom_parallelism)
  if (has_custom_parallelism()) {
    clear_has_strategy_case();
      ::oneflow::CustomParallelismStrategy* temp = strategy_case_.custom_parallelism_;
    strategy_case_.custom_parallelism_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::oneflow::CustomParallelismStrategy& InterJobReuseMemStrategy::custom_parallelism() const {
  // @@protoc_insertion_point(field_get:oneflow.InterJobReuseMemStrategy.custom_parallelism)
  return has_custom_parallelism()
      ? *strategy_case_.custom_parallelism_
      : *reinterpret_cast< ::oneflow::CustomParallelismStrategy*>(&::oneflow::_CustomParallelismStrategy_default_instance_);
}
inline ::oneflow::CustomParallelismStrategy* InterJobReuseMemStrategy::mutable_custom_parallelism() {
  if (!has_custom_parallelism()) {
    clear_strategy_case();
    set_has_custom_parallelism();
    strategy_case_.custom_parallelism_ = CreateMaybeMessage< ::oneflow::CustomParallelismStrategy >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:oneflow.InterJobReuseMemStrategy.custom_parallelism)
  return strategy_case_.custom_parallelism_;
}

inline bool InterJobReuseMemStrategy::has_strategy_case() const {
  return strategy_case_case() != STRATEGY_CASE_NOT_SET;
}
inline void InterJobReuseMemStrategy::clear_has_strategy_case() {
  _oneof_case_[0] = STRATEGY_CASE_NOT_SET;
}
inline InterJobReuseMemStrategy::StrategyCaseCase InterJobReuseMemStrategy::strategy_case_case() const {
  return InterJobReuseMemStrategy::StrategyCaseCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ConfigProto

// required .oneflow.Resource resource = 1;
inline bool ConfigProto::has_resource() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::oneflow::Resource& ConfigProto::resource() const {
  const ::oneflow::Resource* p = resource_;
  // @@protoc_insertion_point(field_get:oneflow.ConfigProto.resource)
  return p != nullptr ? *p : *reinterpret_cast<const ::oneflow::Resource*>(
      &::oneflow::_Resource_default_instance_);
}
inline ::oneflow::Resource* ConfigProto::release_resource() {
  // @@protoc_insertion_point(field_release:oneflow.ConfigProto.resource)
  _has_bits_[0] &= ~0x00000001u;
  ::oneflow::Resource* temp = resource_;
  resource_ = nullptr;
  return temp;
}
inline ::oneflow::Resource* ConfigProto::mutable_resource() {
  _has_bits_[0] |= 0x00000001u;
  if (resource_ == nullptr) {
    auto* p = CreateMaybeMessage<::oneflow::Resource>(GetArenaNoVirtual());
    resource_ = p;
  }
  // @@protoc_insertion_point(field_mutable:oneflow.ConfigProto.resource)
  return resource_;
}
inline void ConfigProto::set_allocated_resource(::oneflow::Resource* resource) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(resource_);
  }
  if (resource) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      resource = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resource, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  resource_ = resource;
  // @@protoc_insertion_point(field_set_allocated:oneflow.ConfigProto.resource)
}

// required int64 session_id = 5;
inline bool ConfigProto::has_session_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConfigProto::clear_session_id() {
  session_id_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ConfigProto::session_id() const {
  // @@protoc_insertion_point(field_get:oneflow.ConfigProto.session_id)
  return session_id_;
}
inline void ConfigProto::set_session_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  session_id_ = value;
  // @@protoc_insertion_point(field_set:oneflow.ConfigProto.session_id)
}

// -------------------------------------------------------------------

// JobSet

// repeated .oneflow.Job job = 1;
inline int JobSet::job_size() const {
  return job_.size();
}
inline ::oneflow::Job* JobSet::mutable_job(int index) {
  // @@protoc_insertion_point(field_mutable:oneflow.JobSet.job)
  return job_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oneflow::Job >*
JobSet::mutable_job() {
  // @@protoc_insertion_point(field_mutable_list:oneflow.JobSet.job)
  return &job_;
}
inline const ::oneflow::Job& JobSet::job(int index) const {
  // @@protoc_insertion_point(field_get:oneflow.JobSet.job)
  return job_.Get(index);
}
inline ::oneflow::Job* JobSet::add_job() {
  // @@protoc_insertion_point(field_add:oneflow.JobSet.job)
  return job_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oneflow::Job >&
JobSet::job() const {
  // @@protoc_insertion_point(field_list:oneflow.JobSet.job)
  return job_;
}

// optional .oneflow.InterJobReuseMemStrategy inter_job_reuse_mem_strategy = 5;
inline bool JobSet::has_inter_job_reuse_mem_strategy() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void JobSet::clear_inter_job_reuse_mem_strategy() {
  if (inter_job_reuse_mem_strategy_ != nullptr) inter_job_reuse_mem_strategy_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::oneflow::InterJobReuseMemStrategy& JobSet::inter_job_reuse_mem_strategy() const {
  const ::oneflow::InterJobReuseMemStrategy* p = inter_job_reuse_mem_strategy_;
  // @@protoc_insertion_point(field_get:oneflow.JobSet.inter_job_reuse_mem_strategy)
  return p != nullptr ? *p : *reinterpret_cast<const ::oneflow::InterJobReuseMemStrategy*>(
      &::oneflow::_InterJobReuseMemStrategy_default_instance_);
}
inline ::oneflow::InterJobReuseMemStrategy* JobSet::release_inter_job_reuse_mem_strategy() {
  // @@protoc_insertion_point(field_release:oneflow.JobSet.inter_job_reuse_mem_strategy)
  _has_bits_[0] &= ~0x00000001u;
  ::oneflow::InterJobReuseMemStrategy* temp = inter_job_reuse_mem_strategy_;
  inter_job_reuse_mem_strategy_ = nullptr;
  return temp;
}
inline ::oneflow::InterJobReuseMemStrategy* JobSet::mutable_inter_job_reuse_mem_strategy() {
  _has_bits_[0] |= 0x00000001u;
  if (inter_job_reuse_mem_strategy_ == nullptr) {
    auto* p = CreateMaybeMessage<::oneflow::InterJobReuseMemStrategy>(GetArenaNoVirtual());
    inter_job_reuse_mem_strategy_ = p;
  }
  // @@protoc_insertion_point(field_mutable:oneflow.JobSet.inter_job_reuse_mem_strategy)
  return inter_job_reuse_mem_strategy_;
}
inline void JobSet::set_allocated_inter_job_reuse_mem_strategy(::oneflow::InterJobReuseMemStrategy* inter_job_reuse_mem_strategy) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete inter_job_reuse_mem_strategy_;
  }
  if (inter_job_reuse_mem_strategy) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      inter_job_reuse_mem_strategy = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, inter_job_reuse_mem_strategy, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  inter_job_reuse_mem_strategy_ = inter_job_reuse_mem_strategy;
  // @@protoc_insertion_point(field_set_allocated:oneflow.JobSet.inter_job_reuse_mem_strategy)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace oneflow

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_oneflow_2fcore_2fjob_2fjob_5fset_2eproto
