// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: oneflow/core/job/sbp_parallel.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_oneflow_2fcore_2fjob_2fsbp_5fparallel_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_oneflow_2fcore_2fjob_2fsbp_5fparallel_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_oneflow_2fcore_2fjob_2fsbp_5fparallel_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_oneflow_2fcore_2fjob_2fsbp_5fparallel_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[10]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_oneflow_2fcore_2fjob_2fsbp_5fparallel_2eproto;
namespace oneflow {
class BroadcastParallel;
class BroadcastParallelDefaultTypeInternal;
extern BroadcastParallelDefaultTypeInternal _BroadcastParallel_default_instance_;
class NdSbp;
class NdSbpDefaultTypeInternal;
extern NdSbpDefaultTypeInternal _NdSbp_default_instance_;
class NdSbpSignature;
class NdSbpSignatureDefaultTypeInternal;
extern NdSbpSignatureDefaultTypeInternal _NdSbpSignature_default_instance_;
class NdSbpSignature_BnInOp2ndSbpEntry_DoNotUse;
class NdSbpSignature_BnInOp2ndSbpEntry_DoNotUseDefaultTypeInternal;
extern NdSbpSignature_BnInOp2ndSbpEntry_DoNotUseDefaultTypeInternal _NdSbpSignature_BnInOp2ndSbpEntry_DoNotUse_default_instance_;
class PartialSumParallel;
class PartialSumParallelDefaultTypeInternal;
extern PartialSumParallelDefaultTypeInternal _PartialSumParallel_default_instance_;
class SbpParallel;
class SbpParallelDefaultTypeInternal;
extern SbpParallelDefaultTypeInternal _SbpParallel_default_instance_;
class SbpSignature;
class SbpSignatureDefaultTypeInternal;
extern SbpSignatureDefaultTypeInternal _SbpSignature_default_instance_;
class SbpSignatureList;
class SbpSignatureListDefaultTypeInternal;
extern SbpSignatureListDefaultTypeInternal _SbpSignatureList_default_instance_;
class SbpSignature_BnInOp2sbpParallelEntry_DoNotUse;
class SbpSignature_BnInOp2sbpParallelEntry_DoNotUseDefaultTypeInternal;
extern SbpSignature_BnInOp2sbpParallelEntry_DoNotUseDefaultTypeInternal _SbpSignature_BnInOp2sbpParallelEntry_DoNotUse_default_instance_;
class SplitParallel;
class SplitParallelDefaultTypeInternal;
extern SplitParallelDefaultTypeInternal _SplitParallel_default_instance_;
}  // namespace oneflow
PROTOBUF_NAMESPACE_OPEN
template<> ::oneflow::BroadcastParallel* Arena::CreateMaybeMessage<::oneflow::BroadcastParallel>(Arena*);
template<> ::oneflow::NdSbp* Arena::CreateMaybeMessage<::oneflow::NdSbp>(Arena*);
template<> ::oneflow::NdSbpSignature* Arena::CreateMaybeMessage<::oneflow::NdSbpSignature>(Arena*);
template<> ::oneflow::NdSbpSignature_BnInOp2ndSbpEntry_DoNotUse* Arena::CreateMaybeMessage<::oneflow::NdSbpSignature_BnInOp2ndSbpEntry_DoNotUse>(Arena*);
template<> ::oneflow::PartialSumParallel* Arena::CreateMaybeMessage<::oneflow::PartialSumParallel>(Arena*);
template<> ::oneflow::SbpParallel* Arena::CreateMaybeMessage<::oneflow::SbpParallel>(Arena*);
template<> ::oneflow::SbpSignature* Arena::CreateMaybeMessage<::oneflow::SbpSignature>(Arena*);
template<> ::oneflow::SbpSignatureList* Arena::CreateMaybeMessage<::oneflow::SbpSignatureList>(Arena*);
template<> ::oneflow::SbpSignature_BnInOp2sbpParallelEntry_DoNotUse* Arena::CreateMaybeMessage<::oneflow::SbpSignature_BnInOp2sbpParallelEntry_DoNotUse>(Arena*);
template<> ::oneflow::SplitParallel* Arena::CreateMaybeMessage<::oneflow::SplitParallel>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace oneflow {

// ===================================================================

class SplitParallel :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:oneflow.SplitParallel) */ {
 public:
  SplitParallel();
  virtual ~SplitParallel();

  SplitParallel(const SplitParallel& from);
  SplitParallel(SplitParallel&& from) noexcept
    : SplitParallel() {
    *this = ::std::move(from);
  }

  inline SplitParallel& operator=(const SplitParallel& from) {
    CopyFrom(from);
    return *this;
  }
  inline SplitParallel& operator=(SplitParallel&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SplitParallel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SplitParallel* internal_default_instance() {
    return reinterpret_cast<const SplitParallel*>(
               &_SplitParallel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SplitParallel& a, SplitParallel& b) {
    a.Swap(&b);
  }
  inline void Swap(SplitParallel* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SplitParallel* New() const final {
    return CreateMaybeMessage<SplitParallel>(nullptr);
  }

  SplitParallel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SplitParallel>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SplitParallel& from);
  void MergeFrom(const SplitParallel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SplitParallel* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "oneflow.SplitParallel";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_oneflow_2fcore_2fjob_2fsbp_5fparallel_2eproto);
    return ::descriptor_table_oneflow_2fcore_2fjob_2fsbp_5fparallel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAxisFieldNumber = 1,
  };
  // required int64 axis = 1;
  bool has_axis() const;
  void clear_axis();
  ::PROTOBUF_NAMESPACE_ID::int64 axis() const;
  void set_axis(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:oneflow.SplitParallel)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 axis_;
  friend struct ::TableStruct_oneflow_2fcore_2fjob_2fsbp_5fparallel_2eproto;
};
// -------------------------------------------------------------------

class BroadcastParallel :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:oneflow.BroadcastParallel) */ {
 public:
  BroadcastParallel();
  virtual ~BroadcastParallel();

  BroadcastParallel(const BroadcastParallel& from);
  BroadcastParallel(BroadcastParallel&& from) noexcept
    : BroadcastParallel() {
    *this = ::std::move(from);
  }

  inline BroadcastParallel& operator=(const BroadcastParallel& from) {
    CopyFrom(from);
    return *this;
  }
  inline BroadcastParallel& operator=(BroadcastParallel&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BroadcastParallel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BroadcastParallel* internal_default_instance() {
    return reinterpret_cast<const BroadcastParallel*>(
               &_BroadcastParallel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(BroadcastParallel& a, BroadcastParallel& b) {
    a.Swap(&b);
  }
  inline void Swap(BroadcastParallel* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BroadcastParallel* New() const final {
    return CreateMaybeMessage<BroadcastParallel>(nullptr);
  }

  BroadcastParallel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BroadcastParallel>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BroadcastParallel& from);
  void MergeFrom(const BroadcastParallel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BroadcastParallel* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "oneflow.BroadcastParallel";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_oneflow_2fcore_2fjob_2fsbp_5fparallel_2eproto);
    return ::descriptor_table_oneflow_2fcore_2fjob_2fsbp_5fparallel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:oneflow.BroadcastParallel)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_oneflow_2fcore_2fjob_2fsbp_5fparallel_2eproto;
};
// -------------------------------------------------------------------

class PartialSumParallel :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:oneflow.PartialSumParallel) */ {
 public:
  PartialSumParallel();
  virtual ~PartialSumParallel();

  PartialSumParallel(const PartialSumParallel& from);
  PartialSumParallel(PartialSumParallel&& from) noexcept
    : PartialSumParallel() {
    *this = ::std::move(from);
  }

  inline PartialSumParallel& operator=(const PartialSumParallel& from) {
    CopyFrom(from);
    return *this;
  }
  inline PartialSumParallel& operator=(PartialSumParallel&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PartialSumParallel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PartialSumParallel* internal_default_instance() {
    return reinterpret_cast<const PartialSumParallel*>(
               &_PartialSumParallel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PartialSumParallel& a, PartialSumParallel& b) {
    a.Swap(&b);
  }
  inline void Swap(PartialSumParallel* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PartialSumParallel* New() const final {
    return CreateMaybeMessage<PartialSumParallel>(nullptr);
  }

  PartialSumParallel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PartialSumParallel>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PartialSumParallel& from);
  void MergeFrom(const PartialSumParallel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PartialSumParallel* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "oneflow.PartialSumParallel";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_oneflow_2fcore_2fjob_2fsbp_5fparallel_2eproto);
    return ::descriptor_table_oneflow_2fcore_2fjob_2fsbp_5fparallel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:oneflow.PartialSumParallel)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_oneflow_2fcore_2fjob_2fsbp_5fparallel_2eproto;
};
// -------------------------------------------------------------------

class SbpParallel :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:oneflow.SbpParallel) */ {
 public:
  SbpParallel();
  virtual ~SbpParallel();

  SbpParallel(const SbpParallel& from);
  SbpParallel(SbpParallel&& from) noexcept
    : SbpParallel() {
    *this = ::std::move(from);
  }

  inline SbpParallel& operator=(const SbpParallel& from) {
    CopyFrom(from);
    return *this;
  }
  inline SbpParallel& operator=(SbpParallel&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SbpParallel& default_instance();

  enum ParallelTypeCase {
    kSplitParallel = 1,
    kBroadcastParallel = 2,
    kPartialSumParallel = 3,
    PARALLEL_TYPE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SbpParallel* internal_default_instance() {
    return reinterpret_cast<const SbpParallel*>(
               &_SbpParallel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SbpParallel& a, SbpParallel& b) {
    a.Swap(&b);
  }
  inline void Swap(SbpParallel* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SbpParallel* New() const final {
    return CreateMaybeMessage<SbpParallel>(nullptr);
  }

  SbpParallel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SbpParallel>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SbpParallel& from);
  void MergeFrom(const SbpParallel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SbpParallel* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "oneflow.SbpParallel";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_oneflow_2fcore_2fjob_2fsbp_5fparallel_2eproto);
    return ::descriptor_table_oneflow_2fcore_2fjob_2fsbp_5fparallel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSplitParallelFieldNumber = 1,
    kBroadcastParallelFieldNumber = 2,
    kPartialSumParallelFieldNumber = 3,
  };
  // optional .oneflow.SplitParallel split_parallel = 1;
  bool has_split_parallel() const;
  void clear_split_parallel();
  const ::oneflow::SplitParallel& split_parallel() const;
  ::oneflow::SplitParallel* release_split_parallel();
  ::oneflow::SplitParallel* mutable_split_parallel();
  void set_allocated_split_parallel(::oneflow::SplitParallel* split_parallel);

  // optional .oneflow.BroadcastParallel broadcast_parallel = 2;
  bool has_broadcast_parallel() const;
  void clear_broadcast_parallel();
  const ::oneflow::BroadcastParallel& broadcast_parallel() const;
  ::oneflow::BroadcastParallel* release_broadcast_parallel();
  ::oneflow::BroadcastParallel* mutable_broadcast_parallel();
  void set_allocated_broadcast_parallel(::oneflow::BroadcastParallel* broadcast_parallel);

  // optional .oneflow.PartialSumParallel partial_sum_parallel = 3;
  bool has_partial_sum_parallel() const;
  void clear_partial_sum_parallel();
  const ::oneflow::PartialSumParallel& partial_sum_parallel() const;
  ::oneflow::PartialSumParallel* release_partial_sum_parallel();
  ::oneflow::PartialSumParallel* mutable_partial_sum_parallel();
  void set_allocated_partial_sum_parallel(::oneflow::PartialSumParallel* partial_sum_parallel);

  void clear_parallel_type();
  ParallelTypeCase parallel_type_case() const;
  // @@protoc_insertion_point(class_scope:oneflow.SbpParallel)
 private:
  class _Internal;
  void set_has_split_parallel();
  void set_has_broadcast_parallel();
  void set_has_partial_sum_parallel();

  inline bool has_parallel_type() const;
  inline void clear_has_parallel_type();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  union ParallelTypeUnion {
    ParallelTypeUnion() {}
    ::oneflow::SplitParallel* split_parallel_;
    ::oneflow::BroadcastParallel* broadcast_parallel_;
    ::oneflow::PartialSumParallel* partial_sum_parallel_;
  } parallel_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_oneflow_2fcore_2fjob_2fsbp_5fparallel_2eproto;
};
// -------------------------------------------------------------------

class SbpSignature_BnInOp2sbpParallelEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<SbpSignature_BnInOp2sbpParallelEntry_DoNotUse, 
    std::string, ::oneflow::SbpParallel,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<SbpSignature_BnInOp2sbpParallelEntry_DoNotUse, 
    std::string, ::oneflow::SbpParallel,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  SbpSignature_BnInOp2sbpParallelEntry_DoNotUse();
  SbpSignature_BnInOp2sbpParallelEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const SbpSignature_BnInOp2sbpParallelEntry_DoNotUse& other);
  static const SbpSignature_BnInOp2sbpParallelEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const SbpSignature_BnInOp2sbpParallelEntry_DoNotUse*>(&_SbpSignature_BnInOp2sbpParallelEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
#ifndef NDEBUG
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
       s->data(), s->size(), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "oneflow.SbpSignature.BnInOp2sbpParallelEntry.key");
#endif
    return true;
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_oneflow_2fcore_2fjob_2fsbp_5fparallel_2eproto);
    return ::descriptor_table_oneflow_2fcore_2fjob_2fsbp_5fparallel_2eproto.file_level_metadata[4];
  }

  public:
};

// -------------------------------------------------------------------

class SbpSignature :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:oneflow.SbpSignature) */ {
 public:
  SbpSignature();
  virtual ~SbpSignature();

  SbpSignature(const SbpSignature& from);
  SbpSignature(SbpSignature&& from) noexcept
    : SbpSignature() {
    *this = ::std::move(from);
  }

  inline SbpSignature& operator=(const SbpSignature& from) {
    CopyFrom(from);
    return *this;
  }
  inline SbpSignature& operator=(SbpSignature&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SbpSignature& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SbpSignature* internal_default_instance() {
    return reinterpret_cast<const SbpSignature*>(
               &_SbpSignature_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(SbpSignature& a, SbpSignature& b) {
    a.Swap(&b);
  }
  inline void Swap(SbpSignature* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SbpSignature* New() const final {
    return CreateMaybeMessage<SbpSignature>(nullptr);
  }

  SbpSignature* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SbpSignature>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SbpSignature& from);
  void MergeFrom(const SbpSignature& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SbpSignature* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "oneflow.SbpSignature";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_oneflow_2fcore_2fjob_2fsbp_5fparallel_2eproto);
    return ::descriptor_table_oneflow_2fcore_2fjob_2fsbp_5fparallel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kBnInOp2SbpParallelFieldNumber = 1,
  };
  // map<string, .oneflow.SbpParallel> bn_in_op2sbp_parallel = 1;
  int bn_in_op2sbp_parallel_size() const;
  void clear_bn_in_op2sbp_parallel();
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::oneflow::SbpParallel >&
      bn_in_op2sbp_parallel() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::oneflow::SbpParallel >*
      mutable_bn_in_op2sbp_parallel();

  // @@protoc_insertion_point(class_scope:oneflow.SbpSignature)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      SbpSignature_BnInOp2sbpParallelEntry_DoNotUse,
      std::string, ::oneflow::SbpParallel,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > bn_in_op2sbp_parallel_;
  friend struct ::TableStruct_oneflow_2fcore_2fjob_2fsbp_5fparallel_2eproto;
};
// -------------------------------------------------------------------

class NdSbp :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:oneflow.NdSbp) */ {
 public:
  NdSbp();
  virtual ~NdSbp();

  NdSbp(const NdSbp& from);
  NdSbp(NdSbp&& from) noexcept
    : NdSbp() {
    *this = ::std::move(from);
  }

  inline NdSbp& operator=(const NdSbp& from) {
    CopyFrom(from);
    return *this;
  }
  inline NdSbp& operator=(NdSbp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NdSbp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NdSbp* internal_default_instance() {
    return reinterpret_cast<const NdSbp*>(
               &_NdSbp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(NdSbp& a, NdSbp& b) {
    a.Swap(&b);
  }
  inline void Swap(NdSbp* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NdSbp* New() const final {
    return CreateMaybeMessage<NdSbp>(nullptr);
  }

  NdSbp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NdSbp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NdSbp& from);
  void MergeFrom(const NdSbp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NdSbp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "oneflow.NdSbp";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_oneflow_2fcore_2fjob_2fsbp_5fparallel_2eproto);
    return ::descriptor_table_oneflow_2fcore_2fjob_2fsbp_5fparallel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSbpParallelFieldNumber = 1,
  };
  // repeated .oneflow.SbpParallel sbp_parallel = 1;
  int sbp_parallel_size() const;
  void clear_sbp_parallel();
  ::oneflow::SbpParallel* mutable_sbp_parallel(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oneflow::SbpParallel >*
      mutable_sbp_parallel();
  const ::oneflow::SbpParallel& sbp_parallel(int index) const;
  ::oneflow::SbpParallel* add_sbp_parallel();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oneflow::SbpParallel >&
      sbp_parallel() const;

  // @@protoc_insertion_point(class_scope:oneflow.NdSbp)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oneflow::SbpParallel > sbp_parallel_;
  friend struct ::TableStruct_oneflow_2fcore_2fjob_2fsbp_5fparallel_2eproto;
};
// -------------------------------------------------------------------

class NdSbpSignature_BnInOp2ndSbpEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<NdSbpSignature_BnInOp2ndSbpEntry_DoNotUse, 
    std::string, ::oneflow::NdSbp,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<NdSbpSignature_BnInOp2ndSbpEntry_DoNotUse, 
    std::string, ::oneflow::NdSbp,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  NdSbpSignature_BnInOp2ndSbpEntry_DoNotUse();
  NdSbpSignature_BnInOp2ndSbpEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const NdSbpSignature_BnInOp2ndSbpEntry_DoNotUse& other);
  static const NdSbpSignature_BnInOp2ndSbpEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const NdSbpSignature_BnInOp2ndSbpEntry_DoNotUse*>(&_NdSbpSignature_BnInOp2ndSbpEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
#ifndef NDEBUG
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
       s->data(), s->size(), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "oneflow.NdSbpSignature.BnInOp2ndSbpEntry.key");
#endif
    return true;
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_oneflow_2fcore_2fjob_2fsbp_5fparallel_2eproto);
    return ::descriptor_table_oneflow_2fcore_2fjob_2fsbp_5fparallel_2eproto.file_level_metadata[7];
  }

  public:
};

// -------------------------------------------------------------------

class NdSbpSignature :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:oneflow.NdSbpSignature) */ {
 public:
  NdSbpSignature();
  virtual ~NdSbpSignature();

  NdSbpSignature(const NdSbpSignature& from);
  NdSbpSignature(NdSbpSignature&& from) noexcept
    : NdSbpSignature() {
    *this = ::std::move(from);
  }

  inline NdSbpSignature& operator=(const NdSbpSignature& from) {
    CopyFrom(from);
    return *this;
  }
  inline NdSbpSignature& operator=(NdSbpSignature&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NdSbpSignature& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NdSbpSignature* internal_default_instance() {
    return reinterpret_cast<const NdSbpSignature*>(
               &_NdSbpSignature_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(NdSbpSignature& a, NdSbpSignature& b) {
    a.Swap(&b);
  }
  inline void Swap(NdSbpSignature* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NdSbpSignature* New() const final {
    return CreateMaybeMessage<NdSbpSignature>(nullptr);
  }

  NdSbpSignature* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NdSbpSignature>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NdSbpSignature& from);
  void MergeFrom(const NdSbpSignature& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NdSbpSignature* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "oneflow.NdSbpSignature";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_oneflow_2fcore_2fjob_2fsbp_5fparallel_2eproto);
    return ::descriptor_table_oneflow_2fcore_2fjob_2fsbp_5fparallel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kBnInOp2NdSbpFieldNumber = 1,
  };
  // map<string, .oneflow.NdSbp> bn_in_op2nd_sbp = 1;
  int bn_in_op2nd_sbp_size() const;
  void clear_bn_in_op2nd_sbp();
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::oneflow::NdSbp >&
      bn_in_op2nd_sbp() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::oneflow::NdSbp >*
      mutable_bn_in_op2nd_sbp();

  // @@protoc_insertion_point(class_scope:oneflow.NdSbpSignature)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      NdSbpSignature_BnInOp2ndSbpEntry_DoNotUse,
      std::string, ::oneflow::NdSbp,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > bn_in_op2nd_sbp_;
  friend struct ::TableStruct_oneflow_2fcore_2fjob_2fsbp_5fparallel_2eproto;
};
// -------------------------------------------------------------------

class SbpSignatureList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:oneflow.SbpSignatureList) */ {
 public:
  SbpSignatureList();
  virtual ~SbpSignatureList();

  SbpSignatureList(const SbpSignatureList& from);
  SbpSignatureList(SbpSignatureList&& from) noexcept
    : SbpSignatureList() {
    *this = ::std::move(from);
  }

  inline SbpSignatureList& operator=(const SbpSignatureList& from) {
    CopyFrom(from);
    return *this;
  }
  inline SbpSignatureList& operator=(SbpSignatureList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SbpSignatureList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SbpSignatureList* internal_default_instance() {
    return reinterpret_cast<const SbpSignatureList*>(
               &_SbpSignatureList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(SbpSignatureList& a, SbpSignatureList& b) {
    a.Swap(&b);
  }
  inline void Swap(SbpSignatureList* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SbpSignatureList* New() const final {
    return CreateMaybeMessage<SbpSignatureList>(nullptr);
  }

  SbpSignatureList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SbpSignatureList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SbpSignatureList& from);
  void MergeFrom(const SbpSignatureList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SbpSignatureList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "oneflow.SbpSignatureList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_oneflow_2fcore_2fjob_2fsbp_5fparallel_2eproto);
    return ::descriptor_table_oneflow_2fcore_2fjob_2fsbp_5fparallel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSbpSignatureFieldNumber = 1,
  };
  // repeated .oneflow.SbpSignature sbp_signature = 1;
  int sbp_signature_size() const;
  void clear_sbp_signature();
  ::oneflow::SbpSignature* mutable_sbp_signature(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oneflow::SbpSignature >*
      mutable_sbp_signature();
  const ::oneflow::SbpSignature& sbp_signature(int index) const;
  ::oneflow::SbpSignature* add_sbp_signature();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oneflow::SbpSignature >&
      sbp_signature() const;

  // @@protoc_insertion_point(class_scope:oneflow.SbpSignatureList)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oneflow::SbpSignature > sbp_signature_;
  friend struct ::TableStruct_oneflow_2fcore_2fjob_2fsbp_5fparallel_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SplitParallel

// required int64 axis = 1;
inline bool SplitParallel::has_axis() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SplitParallel::clear_axis() {
  axis_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SplitParallel::axis() const {
  // @@protoc_insertion_point(field_get:oneflow.SplitParallel.axis)
  return axis_;
}
inline void SplitParallel::set_axis(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  axis_ = value;
  // @@protoc_insertion_point(field_set:oneflow.SplitParallel.axis)
}

// -------------------------------------------------------------------

// BroadcastParallel

// -------------------------------------------------------------------

// PartialSumParallel

// -------------------------------------------------------------------

// SbpParallel

// optional .oneflow.SplitParallel split_parallel = 1;
inline bool SbpParallel::has_split_parallel() const {
  return parallel_type_case() == kSplitParallel;
}
inline void SbpParallel::set_has_split_parallel() {
  _oneof_case_[0] = kSplitParallel;
}
inline void SbpParallel::clear_split_parallel() {
  if (has_split_parallel()) {
    delete parallel_type_.split_parallel_;
    clear_has_parallel_type();
  }
}
inline ::oneflow::SplitParallel* SbpParallel::release_split_parallel() {
  // @@protoc_insertion_point(field_release:oneflow.SbpParallel.split_parallel)
  if (has_split_parallel()) {
    clear_has_parallel_type();
      ::oneflow::SplitParallel* temp = parallel_type_.split_parallel_;
    parallel_type_.split_parallel_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::oneflow::SplitParallel& SbpParallel::split_parallel() const {
  // @@protoc_insertion_point(field_get:oneflow.SbpParallel.split_parallel)
  return has_split_parallel()
      ? *parallel_type_.split_parallel_
      : *reinterpret_cast< ::oneflow::SplitParallel*>(&::oneflow::_SplitParallel_default_instance_);
}
inline ::oneflow::SplitParallel* SbpParallel::mutable_split_parallel() {
  if (!has_split_parallel()) {
    clear_parallel_type();
    set_has_split_parallel();
    parallel_type_.split_parallel_ = CreateMaybeMessage< ::oneflow::SplitParallel >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:oneflow.SbpParallel.split_parallel)
  return parallel_type_.split_parallel_;
}

// optional .oneflow.BroadcastParallel broadcast_parallel = 2;
inline bool SbpParallel::has_broadcast_parallel() const {
  return parallel_type_case() == kBroadcastParallel;
}
inline void SbpParallel::set_has_broadcast_parallel() {
  _oneof_case_[0] = kBroadcastParallel;
}
inline void SbpParallel::clear_broadcast_parallel() {
  if (has_broadcast_parallel()) {
    delete parallel_type_.broadcast_parallel_;
    clear_has_parallel_type();
  }
}
inline ::oneflow::BroadcastParallel* SbpParallel::release_broadcast_parallel() {
  // @@protoc_insertion_point(field_release:oneflow.SbpParallel.broadcast_parallel)
  if (has_broadcast_parallel()) {
    clear_has_parallel_type();
      ::oneflow::BroadcastParallel* temp = parallel_type_.broadcast_parallel_;
    parallel_type_.broadcast_parallel_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::oneflow::BroadcastParallel& SbpParallel::broadcast_parallel() const {
  // @@protoc_insertion_point(field_get:oneflow.SbpParallel.broadcast_parallel)
  return has_broadcast_parallel()
      ? *parallel_type_.broadcast_parallel_
      : *reinterpret_cast< ::oneflow::BroadcastParallel*>(&::oneflow::_BroadcastParallel_default_instance_);
}
inline ::oneflow::BroadcastParallel* SbpParallel::mutable_broadcast_parallel() {
  if (!has_broadcast_parallel()) {
    clear_parallel_type();
    set_has_broadcast_parallel();
    parallel_type_.broadcast_parallel_ = CreateMaybeMessage< ::oneflow::BroadcastParallel >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:oneflow.SbpParallel.broadcast_parallel)
  return parallel_type_.broadcast_parallel_;
}

// optional .oneflow.PartialSumParallel partial_sum_parallel = 3;
inline bool SbpParallel::has_partial_sum_parallel() const {
  return parallel_type_case() == kPartialSumParallel;
}
inline void SbpParallel::set_has_partial_sum_parallel() {
  _oneof_case_[0] = kPartialSumParallel;
}
inline void SbpParallel::clear_partial_sum_parallel() {
  if (has_partial_sum_parallel()) {
    delete parallel_type_.partial_sum_parallel_;
    clear_has_parallel_type();
  }
}
inline ::oneflow::PartialSumParallel* SbpParallel::release_partial_sum_parallel() {
  // @@protoc_insertion_point(field_release:oneflow.SbpParallel.partial_sum_parallel)
  if (has_partial_sum_parallel()) {
    clear_has_parallel_type();
      ::oneflow::PartialSumParallel* temp = parallel_type_.partial_sum_parallel_;
    parallel_type_.partial_sum_parallel_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::oneflow::PartialSumParallel& SbpParallel::partial_sum_parallel() const {
  // @@protoc_insertion_point(field_get:oneflow.SbpParallel.partial_sum_parallel)
  return has_partial_sum_parallel()
      ? *parallel_type_.partial_sum_parallel_
      : *reinterpret_cast< ::oneflow::PartialSumParallel*>(&::oneflow::_PartialSumParallel_default_instance_);
}
inline ::oneflow::PartialSumParallel* SbpParallel::mutable_partial_sum_parallel() {
  if (!has_partial_sum_parallel()) {
    clear_parallel_type();
    set_has_partial_sum_parallel();
    parallel_type_.partial_sum_parallel_ = CreateMaybeMessage< ::oneflow::PartialSumParallel >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:oneflow.SbpParallel.partial_sum_parallel)
  return parallel_type_.partial_sum_parallel_;
}

inline bool SbpParallel::has_parallel_type() const {
  return parallel_type_case() != PARALLEL_TYPE_NOT_SET;
}
inline void SbpParallel::clear_has_parallel_type() {
  _oneof_case_[0] = PARALLEL_TYPE_NOT_SET;
}
inline SbpParallel::ParallelTypeCase SbpParallel::parallel_type_case() const {
  return SbpParallel::ParallelTypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// SbpSignature

// map<string, .oneflow.SbpParallel> bn_in_op2sbp_parallel = 1;
inline int SbpSignature::bn_in_op2sbp_parallel_size() const {
  return bn_in_op2sbp_parallel_.size();
}
inline void SbpSignature::clear_bn_in_op2sbp_parallel() {
  bn_in_op2sbp_parallel_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::oneflow::SbpParallel >&
SbpSignature::bn_in_op2sbp_parallel() const {
  // @@protoc_insertion_point(field_map:oneflow.SbpSignature.bn_in_op2sbp_parallel)
  return bn_in_op2sbp_parallel_.GetMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::oneflow::SbpParallel >*
SbpSignature::mutable_bn_in_op2sbp_parallel() {
  // @@protoc_insertion_point(field_mutable_map:oneflow.SbpSignature.bn_in_op2sbp_parallel)
  return bn_in_op2sbp_parallel_.MutableMap();
}

// -------------------------------------------------------------------

// NdSbp

// repeated .oneflow.SbpParallel sbp_parallel = 1;
inline int NdSbp::sbp_parallel_size() const {
  return sbp_parallel_.size();
}
inline void NdSbp::clear_sbp_parallel() {
  sbp_parallel_.Clear();
}
inline ::oneflow::SbpParallel* NdSbp::mutable_sbp_parallel(int index) {
  // @@protoc_insertion_point(field_mutable:oneflow.NdSbp.sbp_parallel)
  return sbp_parallel_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oneflow::SbpParallel >*
NdSbp::mutable_sbp_parallel() {
  // @@protoc_insertion_point(field_mutable_list:oneflow.NdSbp.sbp_parallel)
  return &sbp_parallel_;
}
inline const ::oneflow::SbpParallel& NdSbp::sbp_parallel(int index) const {
  // @@protoc_insertion_point(field_get:oneflow.NdSbp.sbp_parallel)
  return sbp_parallel_.Get(index);
}
inline ::oneflow::SbpParallel* NdSbp::add_sbp_parallel() {
  // @@protoc_insertion_point(field_add:oneflow.NdSbp.sbp_parallel)
  return sbp_parallel_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oneflow::SbpParallel >&
NdSbp::sbp_parallel() const {
  // @@protoc_insertion_point(field_list:oneflow.NdSbp.sbp_parallel)
  return sbp_parallel_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// NdSbpSignature

// map<string, .oneflow.NdSbp> bn_in_op2nd_sbp = 1;
inline int NdSbpSignature::bn_in_op2nd_sbp_size() const {
  return bn_in_op2nd_sbp_.size();
}
inline void NdSbpSignature::clear_bn_in_op2nd_sbp() {
  bn_in_op2nd_sbp_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::oneflow::NdSbp >&
NdSbpSignature::bn_in_op2nd_sbp() const {
  // @@protoc_insertion_point(field_map:oneflow.NdSbpSignature.bn_in_op2nd_sbp)
  return bn_in_op2nd_sbp_.GetMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::oneflow::NdSbp >*
NdSbpSignature::mutable_bn_in_op2nd_sbp() {
  // @@protoc_insertion_point(field_mutable_map:oneflow.NdSbpSignature.bn_in_op2nd_sbp)
  return bn_in_op2nd_sbp_.MutableMap();
}

// -------------------------------------------------------------------

// SbpSignatureList

// repeated .oneflow.SbpSignature sbp_signature = 1;
inline int SbpSignatureList::sbp_signature_size() const {
  return sbp_signature_.size();
}
inline void SbpSignatureList::clear_sbp_signature() {
  sbp_signature_.Clear();
}
inline ::oneflow::SbpSignature* SbpSignatureList::mutable_sbp_signature(int index) {
  // @@protoc_insertion_point(field_mutable:oneflow.SbpSignatureList.sbp_signature)
  return sbp_signature_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oneflow::SbpSignature >*
SbpSignatureList::mutable_sbp_signature() {
  // @@protoc_insertion_point(field_mutable_list:oneflow.SbpSignatureList.sbp_signature)
  return &sbp_signature_;
}
inline const ::oneflow::SbpSignature& SbpSignatureList::sbp_signature(int index) const {
  // @@protoc_insertion_point(field_get:oneflow.SbpSignatureList.sbp_signature)
  return sbp_signature_.Get(index);
}
inline ::oneflow::SbpSignature* SbpSignatureList::add_sbp_signature() {
  // @@protoc_insertion_point(field_add:oneflow.SbpSignatureList.sbp_signature)
  return sbp_signature_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oneflow::SbpSignature >&
SbpSignatureList::sbp_signature() const {
  // @@protoc_insertion_point(field_list:oneflow.SbpSignatureList.sbp_signature)
  return sbp_signature_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace oneflow

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_oneflow_2fcore_2fjob_2fsbp_5fparallel_2eproto
