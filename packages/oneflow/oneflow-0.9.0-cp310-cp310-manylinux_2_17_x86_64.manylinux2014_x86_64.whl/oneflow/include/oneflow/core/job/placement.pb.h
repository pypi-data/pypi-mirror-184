// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: oneflow/core/job/placement.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_oneflow_2fcore_2fjob_2fplacement_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_oneflow_2fcore_2fjob_2fplacement_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "oneflow/core/register/logical_blob_id.pb.h"
#include "oneflow/core/common/shape.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_oneflow_2fcore_2fjob_2fplacement_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_oneflow_2fcore_2fjob_2fplacement_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_oneflow_2fcore_2fjob_2fplacement_2eproto;
namespace oneflow {
class BlobPlacementGroup;
class BlobPlacementGroupDefaultTypeInternal;
extern BlobPlacementGroupDefaultTypeInternal _BlobPlacementGroup_default_instance_;
class OpNameSet;
class OpNameSetDefaultTypeInternal;
extern OpNameSetDefaultTypeInternal _OpNameSet_default_instance_;
class ParallelConf;
class ParallelConfDefaultTypeInternal;
extern ParallelConfDefaultTypeInternal _ParallelConf_default_instance_;
class ParallelContext;
class ParallelContextDefaultTypeInternal;
extern ParallelContextDefaultTypeInternal _ParallelContext_default_instance_;
class Placement;
class PlacementDefaultTypeInternal;
extern PlacementDefaultTypeInternal _Placement_default_instance_;
class PlacementGroup;
class PlacementGroupDefaultTypeInternal;
extern PlacementGroupDefaultTypeInternal _PlacementGroup_default_instance_;
}  // namespace oneflow
PROTOBUF_NAMESPACE_OPEN
template<> ::oneflow::BlobPlacementGroup* Arena::CreateMaybeMessage<::oneflow::BlobPlacementGroup>(Arena*);
template<> ::oneflow::OpNameSet* Arena::CreateMaybeMessage<::oneflow::OpNameSet>(Arena*);
template<> ::oneflow::ParallelConf* Arena::CreateMaybeMessage<::oneflow::ParallelConf>(Arena*);
template<> ::oneflow::ParallelContext* Arena::CreateMaybeMessage<::oneflow::ParallelContext>(Arena*);
template<> ::oneflow::Placement* Arena::CreateMaybeMessage<::oneflow::Placement>(Arena*);
template<> ::oneflow::PlacementGroup* Arena::CreateMaybeMessage<::oneflow::PlacementGroup>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace oneflow {

// ===================================================================

class ParallelContext :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:oneflow.ParallelContext) */ {
 public:
  ParallelContext();
  virtual ~ParallelContext();

  ParallelContext(const ParallelContext& from);
  ParallelContext(ParallelContext&& from) noexcept
    : ParallelContext() {
    *this = ::std::move(from);
  }

  inline ParallelContext& operator=(const ParallelContext& from) {
    CopyFrom(from);
    return *this;
  }
  inline ParallelContext& operator=(ParallelContext&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ParallelContext& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ParallelContext* internal_default_instance() {
    return reinterpret_cast<const ParallelContext*>(
               &_ParallelContext_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ParallelContext& a, ParallelContext& b) {
    a.Swap(&b);
  }
  inline void Swap(ParallelContext* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ParallelContext* New() const final {
    return CreateMaybeMessage<ParallelContext>(nullptr);
  }

  ParallelContext* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ParallelContext>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ParallelContext& from);
  void MergeFrom(const ParallelContext& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ParallelContext* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "oneflow.ParallelContext";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_oneflow_2fcore_2fjob_2fplacement_2eproto);
    return ::descriptor_table_oneflow_2fcore_2fjob_2fplacement_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParallelIdFieldNumber = 1,
    kParallelNumFieldNumber = 2,
  };
  // required int64 parallel_id = 1;
  bool has_parallel_id() const;
  void clear_parallel_id();
  ::PROTOBUF_NAMESPACE_ID::int64 parallel_id() const;
  void set_parallel_id(::PROTOBUF_NAMESPACE_ID::int64 value);

  // required int64 parallel_num = 2;
  bool has_parallel_num() const;
  void clear_parallel_num();
  ::PROTOBUF_NAMESPACE_ID::int64 parallel_num() const;
  void set_parallel_num(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:oneflow.ParallelContext)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 parallel_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 parallel_num_;
  friend struct ::TableStruct_oneflow_2fcore_2fjob_2fplacement_2eproto;
};
// -------------------------------------------------------------------

class ParallelConf :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:oneflow.ParallelConf) */ {
 public:
  ParallelConf();
  virtual ~ParallelConf();

  ParallelConf(const ParallelConf& from);
  ParallelConf(ParallelConf&& from) noexcept
    : ParallelConf() {
    *this = ::std::move(from);
  }

  inline ParallelConf& operator=(const ParallelConf& from) {
    CopyFrom(from);
    return *this;
  }
  inline ParallelConf& operator=(ParallelConf&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ParallelConf& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ParallelConf* internal_default_instance() {
    return reinterpret_cast<const ParallelConf*>(
               &_ParallelConf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ParallelConf& a, ParallelConf& b) {
    a.Swap(&b);
  }
  inline void Swap(ParallelConf* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ParallelConf* New() const final {
    return CreateMaybeMessage<ParallelConf>(nullptr);
  }

  ParallelConf* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ParallelConf>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ParallelConf& from);
  void MergeFrom(const ParallelConf& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ParallelConf* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "oneflow.ParallelConf";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_oneflow_2fcore_2fjob_2fplacement_2eproto);
    return ::descriptor_table_oneflow_2fcore_2fjob_2fplacement_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceNameFieldNumber = 1,
    kDeviceTagFieldNumber = 2,
    kHierarchyFieldNumber = 3,
  };
  // repeated string device_name = 1;
  int device_name_size() const;
  void clear_device_name();
  const std::string& device_name(int index) const;
  std::string* mutable_device_name(int index);
  void set_device_name(int index, const std::string& value);
  void set_device_name(int index, std::string&& value);
  void set_device_name(int index, const char* value);
  void set_device_name(int index, const char* value, size_t size);
  std::string* add_device_name();
  void add_device_name(const std::string& value);
  void add_device_name(std::string&& value);
  void add_device_name(const char* value);
  void add_device_name(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& device_name() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_device_name();

  // required string device_tag = 2;
  bool has_device_tag() const;
  void clear_device_tag();
  const std::string& device_tag() const;
  void set_device_tag(const std::string& value);
  void set_device_tag(std::string&& value);
  void set_device_tag(const char* value);
  void set_device_tag(const char* value, size_t size);
  std::string* mutable_device_tag();
  std::string* release_device_tag();
  void set_allocated_device_tag(std::string* device_tag);

  // optional .oneflow.ShapeProto hierarchy = 3;
  bool has_hierarchy() const;
  void clear_hierarchy();
  const ::oneflow::ShapeProto& hierarchy() const;
  ::oneflow::ShapeProto* release_hierarchy();
  ::oneflow::ShapeProto* mutable_hierarchy();
  void set_allocated_hierarchy(::oneflow::ShapeProto* hierarchy);

  // @@protoc_insertion_point(class_scope:oneflow.ParallelConf)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> device_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_tag_;
  ::oneflow::ShapeProto* hierarchy_;
  friend struct ::TableStruct_oneflow_2fcore_2fjob_2fplacement_2eproto;
};
// -------------------------------------------------------------------

class OpNameSet :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:oneflow.OpNameSet) */ {
 public:
  OpNameSet();
  virtual ~OpNameSet();

  OpNameSet(const OpNameSet& from);
  OpNameSet(OpNameSet&& from) noexcept
    : OpNameSet() {
    *this = ::std::move(from);
  }

  inline OpNameSet& operator=(const OpNameSet& from) {
    CopyFrom(from);
    return *this;
  }
  inline OpNameSet& operator=(OpNameSet&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OpNameSet& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OpNameSet* internal_default_instance() {
    return reinterpret_cast<const OpNameSet*>(
               &_OpNameSet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(OpNameSet& a, OpNameSet& b) {
    a.Swap(&b);
  }
  inline void Swap(OpNameSet* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OpNameSet* New() const final {
    return CreateMaybeMessage<OpNameSet>(nullptr);
  }

  OpNameSet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OpNameSet>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OpNameSet& from);
  void MergeFrom(const OpNameSet& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OpNameSet* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "oneflow.OpNameSet";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_oneflow_2fcore_2fjob_2fplacement_2eproto);
    return ::descriptor_table_oneflow_2fcore_2fjob_2fplacement_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOpNameFieldNumber = 1,
  };
  // repeated string op_name = 1;
  int op_name_size() const;
  void clear_op_name();
  const std::string& op_name(int index) const;
  std::string* mutable_op_name(int index);
  void set_op_name(int index, const std::string& value);
  void set_op_name(int index, std::string&& value);
  void set_op_name(int index, const char* value);
  void set_op_name(int index, const char* value, size_t size);
  std::string* add_op_name();
  void add_op_name(const std::string& value);
  void add_op_name(std::string&& value);
  void add_op_name(const char* value);
  void add_op_name(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& op_name() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_op_name();

  // @@protoc_insertion_point(class_scope:oneflow.OpNameSet)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> op_name_;
  friend struct ::TableStruct_oneflow_2fcore_2fjob_2fplacement_2eproto;
};
// -------------------------------------------------------------------

class PlacementGroup :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:oneflow.PlacementGroup) */ {
 public:
  PlacementGroup();
  virtual ~PlacementGroup();

  PlacementGroup(const PlacementGroup& from);
  PlacementGroup(PlacementGroup&& from) noexcept
    : PlacementGroup() {
    *this = ::std::move(from);
  }

  inline PlacementGroup& operator=(const PlacementGroup& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlacementGroup& operator=(PlacementGroup&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PlacementGroup& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlacementGroup* internal_default_instance() {
    return reinterpret_cast<const PlacementGroup*>(
               &_PlacementGroup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PlacementGroup& a, PlacementGroup& b) {
    a.Swap(&b);
  }
  inline void Swap(PlacementGroup* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlacementGroup* New() const final {
    return CreateMaybeMessage<PlacementGroup>(nullptr);
  }

  PlacementGroup* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlacementGroup>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlacementGroup& from);
  void MergeFrom(const PlacementGroup& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlacementGroup* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "oneflow.PlacementGroup";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_oneflow_2fcore_2fjob_2fplacement_2eproto);
    return ::descriptor_table_oneflow_2fcore_2fjob_2fplacement_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOpSetFieldNumber = 1,
    kParallelConfFieldNumber = 2,
  };
  // required .oneflow.OpNameSet op_set = 1;
  bool has_op_set() const;
  void clear_op_set();
  const ::oneflow::OpNameSet& op_set() const;
  ::oneflow::OpNameSet* release_op_set();
  ::oneflow::OpNameSet* mutable_op_set();
  void set_allocated_op_set(::oneflow::OpNameSet* op_set);

  // required .oneflow.ParallelConf parallel_conf = 2;
  bool has_parallel_conf() const;
  void clear_parallel_conf();
  const ::oneflow::ParallelConf& parallel_conf() const;
  ::oneflow::ParallelConf* release_parallel_conf();
  ::oneflow::ParallelConf* mutable_parallel_conf();
  void set_allocated_parallel_conf(::oneflow::ParallelConf* parallel_conf);

  // @@protoc_insertion_point(class_scope:oneflow.PlacementGroup)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::oneflow::OpNameSet* op_set_;
  ::oneflow::ParallelConf* parallel_conf_;
  friend struct ::TableStruct_oneflow_2fcore_2fjob_2fplacement_2eproto;
};
// -------------------------------------------------------------------

class BlobPlacementGroup :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:oneflow.BlobPlacementGroup) */ {
 public:
  BlobPlacementGroup();
  virtual ~BlobPlacementGroup();

  BlobPlacementGroup(const BlobPlacementGroup& from);
  BlobPlacementGroup(BlobPlacementGroup&& from) noexcept
    : BlobPlacementGroup() {
    *this = ::std::move(from);
  }

  inline BlobPlacementGroup& operator=(const BlobPlacementGroup& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlobPlacementGroup& operator=(BlobPlacementGroup&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BlobPlacementGroup& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BlobPlacementGroup* internal_default_instance() {
    return reinterpret_cast<const BlobPlacementGroup*>(
               &_BlobPlacementGroup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(BlobPlacementGroup& a, BlobPlacementGroup& b) {
    a.Swap(&b);
  }
  inline void Swap(BlobPlacementGroup* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BlobPlacementGroup* New() const final {
    return CreateMaybeMessage<BlobPlacementGroup>(nullptr);
  }

  BlobPlacementGroup* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BlobPlacementGroup>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BlobPlacementGroup& from);
  void MergeFrom(const BlobPlacementGroup& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BlobPlacementGroup* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "oneflow.BlobPlacementGroup";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_oneflow_2fcore_2fjob_2fplacement_2eproto);
    return ::descriptor_table_oneflow_2fcore_2fjob_2fplacement_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLbiFieldNumber = 1,
    kParallelConfFieldNumber = 2,
  };
  // repeated .oneflow.LogicalBlobId lbi = 1;
  int lbi_size() const;
  void clear_lbi();
  ::oneflow::LogicalBlobId* mutable_lbi(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oneflow::LogicalBlobId >*
      mutable_lbi();
  const ::oneflow::LogicalBlobId& lbi(int index) const;
  ::oneflow::LogicalBlobId* add_lbi();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oneflow::LogicalBlobId >&
      lbi() const;

  // required .oneflow.ParallelConf parallel_conf = 2;
  bool has_parallel_conf() const;
  void clear_parallel_conf();
  const ::oneflow::ParallelConf& parallel_conf() const;
  ::oneflow::ParallelConf* release_parallel_conf();
  ::oneflow::ParallelConf* mutable_parallel_conf();
  void set_allocated_parallel_conf(::oneflow::ParallelConf* parallel_conf);

  // @@protoc_insertion_point(class_scope:oneflow.BlobPlacementGroup)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oneflow::LogicalBlobId > lbi_;
  ::oneflow::ParallelConf* parallel_conf_;
  friend struct ::TableStruct_oneflow_2fcore_2fjob_2fplacement_2eproto;
};
// -------------------------------------------------------------------

class Placement :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:oneflow.Placement) */ {
 public:
  Placement();
  virtual ~Placement();

  Placement(const Placement& from);
  Placement(Placement&& from) noexcept
    : Placement() {
    *this = ::std::move(from);
  }

  inline Placement& operator=(const Placement& from) {
    CopyFrom(from);
    return *this;
  }
  inline Placement& operator=(Placement&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Placement& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Placement* internal_default_instance() {
    return reinterpret_cast<const Placement*>(
               &_Placement_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Placement& a, Placement& b) {
    a.Swap(&b);
  }
  inline void Swap(Placement* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Placement* New() const final {
    return CreateMaybeMessage<Placement>(nullptr);
  }

  Placement* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Placement>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Placement& from);
  void MergeFrom(const Placement& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Placement* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "oneflow.Placement";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_oneflow_2fcore_2fjob_2fplacement_2eproto);
    return ::descriptor_table_oneflow_2fcore_2fjob_2fplacement_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlacementGroupFieldNumber = 1,
    kBlobPlacementGroupFieldNumber = 2,
  };
  // repeated .oneflow.PlacementGroup placement_group = 1;
  int placement_group_size() const;
  void clear_placement_group();
  ::oneflow::PlacementGroup* mutable_placement_group(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oneflow::PlacementGroup >*
      mutable_placement_group();
  const ::oneflow::PlacementGroup& placement_group(int index) const;
  ::oneflow::PlacementGroup* add_placement_group();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oneflow::PlacementGroup >&
      placement_group() const;

  // repeated .oneflow.BlobPlacementGroup blob_placement_group = 2;
  int blob_placement_group_size() const;
  void clear_blob_placement_group();
  ::oneflow::BlobPlacementGroup* mutable_blob_placement_group(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oneflow::BlobPlacementGroup >*
      mutable_blob_placement_group();
  const ::oneflow::BlobPlacementGroup& blob_placement_group(int index) const;
  ::oneflow::BlobPlacementGroup* add_blob_placement_group();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oneflow::BlobPlacementGroup >&
      blob_placement_group() const;

  // @@protoc_insertion_point(class_scope:oneflow.Placement)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oneflow::PlacementGroup > placement_group_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oneflow::BlobPlacementGroup > blob_placement_group_;
  friend struct ::TableStruct_oneflow_2fcore_2fjob_2fplacement_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ParallelContext

// required int64 parallel_id = 1;
inline bool ParallelContext::has_parallel_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ParallelContext::clear_parallel_id() {
  parallel_id_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ParallelContext::parallel_id() const {
  // @@protoc_insertion_point(field_get:oneflow.ParallelContext.parallel_id)
  return parallel_id_;
}
inline void ParallelContext::set_parallel_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  parallel_id_ = value;
  // @@protoc_insertion_point(field_set:oneflow.ParallelContext.parallel_id)
}

// required int64 parallel_num = 2;
inline bool ParallelContext::has_parallel_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ParallelContext::clear_parallel_num() {
  parallel_num_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ParallelContext::parallel_num() const {
  // @@protoc_insertion_point(field_get:oneflow.ParallelContext.parallel_num)
  return parallel_num_;
}
inline void ParallelContext::set_parallel_num(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  parallel_num_ = value;
  // @@protoc_insertion_point(field_set:oneflow.ParallelContext.parallel_num)
}

// -------------------------------------------------------------------

// ParallelConf

// repeated string device_name = 1;
inline int ParallelConf::device_name_size() const {
  return device_name_.size();
}
inline void ParallelConf::clear_device_name() {
  device_name_.Clear();
}
inline const std::string& ParallelConf::device_name(int index) const {
  // @@protoc_insertion_point(field_get:oneflow.ParallelConf.device_name)
  return device_name_.Get(index);
}
inline std::string* ParallelConf::mutable_device_name(int index) {
  // @@protoc_insertion_point(field_mutable:oneflow.ParallelConf.device_name)
  return device_name_.Mutable(index);
}
inline void ParallelConf::set_device_name(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:oneflow.ParallelConf.device_name)
  device_name_.Mutable(index)->assign(value);
}
inline void ParallelConf::set_device_name(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:oneflow.ParallelConf.device_name)
  device_name_.Mutable(index)->assign(std::move(value));
}
inline void ParallelConf::set_device_name(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  device_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:oneflow.ParallelConf.device_name)
}
inline void ParallelConf::set_device_name(int index, const char* value, size_t size) {
  device_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:oneflow.ParallelConf.device_name)
}
inline std::string* ParallelConf::add_device_name() {
  // @@protoc_insertion_point(field_add_mutable:oneflow.ParallelConf.device_name)
  return device_name_.Add();
}
inline void ParallelConf::add_device_name(const std::string& value) {
  device_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:oneflow.ParallelConf.device_name)
}
inline void ParallelConf::add_device_name(std::string&& value) {
  device_name_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:oneflow.ParallelConf.device_name)
}
inline void ParallelConf::add_device_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  device_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:oneflow.ParallelConf.device_name)
}
inline void ParallelConf::add_device_name(const char* value, size_t size) {
  device_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:oneflow.ParallelConf.device_name)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ParallelConf::device_name() const {
  // @@protoc_insertion_point(field_list:oneflow.ParallelConf.device_name)
  return device_name_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ParallelConf::mutable_device_name() {
  // @@protoc_insertion_point(field_mutable_list:oneflow.ParallelConf.device_name)
  return &device_name_;
}

// required string device_tag = 2;
inline bool ParallelConf::has_device_tag() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ParallelConf::clear_device_tag() {
  device_tag_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ParallelConf::device_tag() const {
  // @@protoc_insertion_point(field_get:oneflow.ParallelConf.device_tag)
  return device_tag_.GetNoArena();
}
inline void ParallelConf::set_device_tag(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  device_tag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:oneflow.ParallelConf.device_tag)
}
inline void ParallelConf::set_device_tag(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  device_tag_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:oneflow.ParallelConf.device_tag)
}
inline void ParallelConf::set_device_tag(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  device_tag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:oneflow.ParallelConf.device_tag)
}
inline void ParallelConf::set_device_tag(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  device_tag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:oneflow.ParallelConf.device_tag)
}
inline std::string* ParallelConf::mutable_device_tag() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:oneflow.ParallelConf.device_tag)
  return device_tag_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ParallelConf::release_device_tag() {
  // @@protoc_insertion_point(field_release:oneflow.ParallelConf.device_tag)
  if (!has_device_tag()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return device_tag_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ParallelConf::set_allocated_device_tag(std::string* device_tag) {
  if (device_tag != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  device_tag_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), device_tag);
  // @@protoc_insertion_point(field_set_allocated:oneflow.ParallelConf.device_tag)
}

// optional .oneflow.ShapeProto hierarchy = 3;
inline bool ParallelConf::has_hierarchy() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::oneflow::ShapeProto& ParallelConf::hierarchy() const {
  const ::oneflow::ShapeProto* p = hierarchy_;
  // @@protoc_insertion_point(field_get:oneflow.ParallelConf.hierarchy)
  return p != nullptr ? *p : *reinterpret_cast<const ::oneflow::ShapeProto*>(
      &::oneflow::_ShapeProto_default_instance_);
}
inline ::oneflow::ShapeProto* ParallelConf::release_hierarchy() {
  // @@protoc_insertion_point(field_release:oneflow.ParallelConf.hierarchy)
  _has_bits_[0] &= ~0x00000002u;
  ::oneflow::ShapeProto* temp = hierarchy_;
  hierarchy_ = nullptr;
  return temp;
}
inline ::oneflow::ShapeProto* ParallelConf::mutable_hierarchy() {
  _has_bits_[0] |= 0x00000002u;
  if (hierarchy_ == nullptr) {
    auto* p = CreateMaybeMessage<::oneflow::ShapeProto>(GetArenaNoVirtual());
    hierarchy_ = p;
  }
  // @@protoc_insertion_point(field_mutable:oneflow.ParallelConf.hierarchy)
  return hierarchy_;
}
inline void ParallelConf::set_allocated_hierarchy(::oneflow::ShapeProto* hierarchy) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(hierarchy_);
  }
  if (hierarchy) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      hierarchy = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hierarchy, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  hierarchy_ = hierarchy;
  // @@protoc_insertion_point(field_set_allocated:oneflow.ParallelConf.hierarchy)
}

// -------------------------------------------------------------------

// OpNameSet

// repeated string op_name = 1;
inline int OpNameSet::op_name_size() const {
  return op_name_.size();
}
inline void OpNameSet::clear_op_name() {
  op_name_.Clear();
}
inline const std::string& OpNameSet::op_name(int index) const {
  // @@protoc_insertion_point(field_get:oneflow.OpNameSet.op_name)
  return op_name_.Get(index);
}
inline std::string* OpNameSet::mutable_op_name(int index) {
  // @@protoc_insertion_point(field_mutable:oneflow.OpNameSet.op_name)
  return op_name_.Mutable(index);
}
inline void OpNameSet::set_op_name(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:oneflow.OpNameSet.op_name)
  op_name_.Mutable(index)->assign(value);
}
inline void OpNameSet::set_op_name(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:oneflow.OpNameSet.op_name)
  op_name_.Mutable(index)->assign(std::move(value));
}
inline void OpNameSet::set_op_name(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  op_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:oneflow.OpNameSet.op_name)
}
inline void OpNameSet::set_op_name(int index, const char* value, size_t size) {
  op_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:oneflow.OpNameSet.op_name)
}
inline std::string* OpNameSet::add_op_name() {
  // @@protoc_insertion_point(field_add_mutable:oneflow.OpNameSet.op_name)
  return op_name_.Add();
}
inline void OpNameSet::add_op_name(const std::string& value) {
  op_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:oneflow.OpNameSet.op_name)
}
inline void OpNameSet::add_op_name(std::string&& value) {
  op_name_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:oneflow.OpNameSet.op_name)
}
inline void OpNameSet::add_op_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  op_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:oneflow.OpNameSet.op_name)
}
inline void OpNameSet::add_op_name(const char* value, size_t size) {
  op_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:oneflow.OpNameSet.op_name)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
OpNameSet::op_name() const {
  // @@protoc_insertion_point(field_list:oneflow.OpNameSet.op_name)
  return op_name_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
OpNameSet::mutable_op_name() {
  // @@protoc_insertion_point(field_mutable_list:oneflow.OpNameSet.op_name)
  return &op_name_;
}

// -------------------------------------------------------------------

// PlacementGroup

// required .oneflow.OpNameSet op_set = 1;
inline bool PlacementGroup::has_op_set() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlacementGroup::clear_op_set() {
  if (op_set_ != nullptr) op_set_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::oneflow::OpNameSet& PlacementGroup::op_set() const {
  const ::oneflow::OpNameSet* p = op_set_;
  // @@protoc_insertion_point(field_get:oneflow.PlacementGroup.op_set)
  return p != nullptr ? *p : *reinterpret_cast<const ::oneflow::OpNameSet*>(
      &::oneflow::_OpNameSet_default_instance_);
}
inline ::oneflow::OpNameSet* PlacementGroup::release_op_set() {
  // @@protoc_insertion_point(field_release:oneflow.PlacementGroup.op_set)
  _has_bits_[0] &= ~0x00000001u;
  ::oneflow::OpNameSet* temp = op_set_;
  op_set_ = nullptr;
  return temp;
}
inline ::oneflow::OpNameSet* PlacementGroup::mutable_op_set() {
  _has_bits_[0] |= 0x00000001u;
  if (op_set_ == nullptr) {
    auto* p = CreateMaybeMessage<::oneflow::OpNameSet>(GetArenaNoVirtual());
    op_set_ = p;
  }
  // @@protoc_insertion_point(field_mutable:oneflow.PlacementGroup.op_set)
  return op_set_;
}
inline void PlacementGroup::set_allocated_op_set(::oneflow::OpNameSet* op_set) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete op_set_;
  }
  if (op_set) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      op_set = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, op_set, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  op_set_ = op_set;
  // @@protoc_insertion_point(field_set_allocated:oneflow.PlacementGroup.op_set)
}

// required .oneflow.ParallelConf parallel_conf = 2;
inline bool PlacementGroup::has_parallel_conf() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlacementGroup::clear_parallel_conf() {
  if (parallel_conf_ != nullptr) parallel_conf_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::oneflow::ParallelConf& PlacementGroup::parallel_conf() const {
  const ::oneflow::ParallelConf* p = parallel_conf_;
  // @@protoc_insertion_point(field_get:oneflow.PlacementGroup.parallel_conf)
  return p != nullptr ? *p : *reinterpret_cast<const ::oneflow::ParallelConf*>(
      &::oneflow::_ParallelConf_default_instance_);
}
inline ::oneflow::ParallelConf* PlacementGroup::release_parallel_conf() {
  // @@protoc_insertion_point(field_release:oneflow.PlacementGroup.parallel_conf)
  _has_bits_[0] &= ~0x00000002u;
  ::oneflow::ParallelConf* temp = parallel_conf_;
  parallel_conf_ = nullptr;
  return temp;
}
inline ::oneflow::ParallelConf* PlacementGroup::mutable_parallel_conf() {
  _has_bits_[0] |= 0x00000002u;
  if (parallel_conf_ == nullptr) {
    auto* p = CreateMaybeMessage<::oneflow::ParallelConf>(GetArenaNoVirtual());
    parallel_conf_ = p;
  }
  // @@protoc_insertion_point(field_mutable:oneflow.PlacementGroup.parallel_conf)
  return parallel_conf_;
}
inline void PlacementGroup::set_allocated_parallel_conf(::oneflow::ParallelConf* parallel_conf) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete parallel_conf_;
  }
  if (parallel_conf) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      parallel_conf = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, parallel_conf, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  parallel_conf_ = parallel_conf;
  // @@protoc_insertion_point(field_set_allocated:oneflow.PlacementGroup.parallel_conf)
}

// -------------------------------------------------------------------

// BlobPlacementGroup

// repeated .oneflow.LogicalBlobId lbi = 1;
inline int BlobPlacementGroup::lbi_size() const {
  return lbi_.size();
}
inline ::oneflow::LogicalBlobId* BlobPlacementGroup::mutable_lbi(int index) {
  // @@protoc_insertion_point(field_mutable:oneflow.BlobPlacementGroup.lbi)
  return lbi_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oneflow::LogicalBlobId >*
BlobPlacementGroup::mutable_lbi() {
  // @@protoc_insertion_point(field_mutable_list:oneflow.BlobPlacementGroup.lbi)
  return &lbi_;
}
inline const ::oneflow::LogicalBlobId& BlobPlacementGroup::lbi(int index) const {
  // @@protoc_insertion_point(field_get:oneflow.BlobPlacementGroup.lbi)
  return lbi_.Get(index);
}
inline ::oneflow::LogicalBlobId* BlobPlacementGroup::add_lbi() {
  // @@protoc_insertion_point(field_add:oneflow.BlobPlacementGroup.lbi)
  return lbi_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oneflow::LogicalBlobId >&
BlobPlacementGroup::lbi() const {
  // @@protoc_insertion_point(field_list:oneflow.BlobPlacementGroup.lbi)
  return lbi_;
}

// required .oneflow.ParallelConf parallel_conf = 2;
inline bool BlobPlacementGroup::has_parallel_conf() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BlobPlacementGroup::clear_parallel_conf() {
  if (parallel_conf_ != nullptr) parallel_conf_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::oneflow::ParallelConf& BlobPlacementGroup::parallel_conf() const {
  const ::oneflow::ParallelConf* p = parallel_conf_;
  // @@protoc_insertion_point(field_get:oneflow.BlobPlacementGroup.parallel_conf)
  return p != nullptr ? *p : *reinterpret_cast<const ::oneflow::ParallelConf*>(
      &::oneflow::_ParallelConf_default_instance_);
}
inline ::oneflow::ParallelConf* BlobPlacementGroup::release_parallel_conf() {
  // @@protoc_insertion_point(field_release:oneflow.BlobPlacementGroup.parallel_conf)
  _has_bits_[0] &= ~0x00000001u;
  ::oneflow::ParallelConf* temp = parallel_conf_;
  parallel_conf_ = nullptr;
  return temp;
}
inline ::oneflow::ParallelConf* BlobPlacementGroup::mutable_parallel_conf() {
  _has_bits_[0] |= 0x00000001u;
  if (parallel_conf_ == nullptr) {
    auto* p = CreateMaybeMessage<::oneflow::ParallelConf>(GetArenaNoVirtual());
    parallel_conf_ = p;
  }
  // @@protoc_insertion_point(field_mutable:oneflow.BlobPlacementGroup.parallel_conf)
  return parallel_conf_;
}
inline void BlobPlacementGroup::set_allocated_parallel_conf(::oneflow::ParallelConf* parallel_conf) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete parallel_conf_;
  }
  if (parallel_conf) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      parallel_conf = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, parallel_conf, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  parallel_conf_ = parallel_conf;
  // @@protoc_insertion_point(field_set_allocated:oneflow.BlobPlacementGroup.parallel_conf)
}

// -------------------------------------------------------------------

// Placement

// repeated .oneflow.PlacementGroup placement_group = 1;
inline int Placement::placement_group_size() const {
  return placement_group_.size();
}
inline void Placement::clear_placement_group() {
  placement_group_.Clear();
}
inline ::oneflow::PlacementGroup* Placement::mutable_placement_group(int index) {
  // @@protoc_insertion_point(field_mutable:oneflow.Placement.placement_group)
  return placement_group_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oneflow::PlacementGroup >*
Placement::mutable_placement_group() {
  // @@protoc_insertion_point(field_mutable_list:oneflow.Placement.placement_group)
  return &placement_group_;
}
inline const ::oneflow::PlacementGroup& Placement::placement_group(int index) const {
  // @@protoc_insertion_point(field_get:oneflow.Placement.placement_group)
  return placement_group_.Get(index);
}
inline ::oneflow::PlacementGroup* Placement::add_placement_group() {
  // @@protoc_insertion_point(field_add:oneflow.Placement.placement_group)
  return placement_group_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oneflow::PlacementGroup >&
Placement::placement_group() const {
  // @@protoc_insertion_point(field_list:oneflow.Placement.placement_group)
  return placement_group_;
}

// repeated .oneflow.BlobPlacementGroup blob_placement_group = 2;
inline int Placement::blob_placement_group_size() const {
  return blob_placement_group_.size();
}
inline void Placement::clear_blob_placement_group() {
  blob_placement_group_.Clear();
}
inline ::oneflow::BlobPlacementGroup* Placement::mutable_blob_placement_group(int index) {
  // @@protoc_insertion_point(field_mutable:oneflow.Placement.blob_placement_group)
  return blob_placement_group_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oneflow::BlobPlacementGroup >*
Placement::mutable_blob_placement_group() {
  // @@protoc_insertion_point(field_mutable_list:oneflow.Placement.blob_placement_group)
  return &blob_placement_group_;
}
inline const ::oneflow::BlobPlacementGroup& Placement::blob_placement_group(int index) const {
  // @@protoc_insertion_point(field_get:oneflow.Placement.blob_placement_group)
  return blob_placement_group_.Get(index);
}
inline ::oneflow::BlobPlacementGroup* Placement::add_blob_placement_group() {
  // @@protoc_insertion_point(field_add:oneflow.Placement.blob_placement_group)
  return blob_placement_group_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oneflow::BlobPlacementGroup >&
Placement::blob_placement_group() const {
  // @@protoc_insertion_point(field_list:oneflow.Placement.blob_placement_group)
  return blob_placement_group_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace oneflow

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_oneflow_2fcore_2fjob_2fplacement_2eproto
