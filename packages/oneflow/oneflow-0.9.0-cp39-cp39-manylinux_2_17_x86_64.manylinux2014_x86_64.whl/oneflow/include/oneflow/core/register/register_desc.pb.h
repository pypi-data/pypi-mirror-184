// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: oneflow/core/register/register_desc.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_oneflow_2fcore_2fregister_2fregister_5fdesc_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_oneflow_2fcore_2fregister_2fregister_5fdesc_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "oneflow/core/register/blob_desc.pb.h"
#include "oneflow/core/register/logical_blob_id.pb.h"
#include "oneflow/core/memory/memory_case.pb.h"
#include "oneflow/core/common/shape.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_oneflow_2fcore_2fregister_2fregister_5fdesc_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_oneflow_2fcore_2fregister_2fregister_5fdesc_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_oneflow_2fcore_2fregister_2fregister_5fdesc_2eproto;
namespace oneflow {
class CtrlRegstDesc;
class CtrlRegstDescDefaultTypeInternal;
extern CtrlRegstDescDefaultTypeInternal _CtrlRegstDesc_default_instance_;
class DataRegstDesc;
class DataRegstDescDefaultTypeInternal;
extern DataRegstDescDefaultTypeInternal _DataRegstDesc_default_instance_;
class LbiBlobDescPair;
class LbiBlobDescPairDefaultTypeInternal;
extern LbiBlobDescPairDefaultTypeInternal _LbiBlobDescPair_default_instance_;
class RegstDescProto;
class RegstDescProtoDefaultTypeInternal;
extern RegstDescProtoDefaultTypeInternal _RegstDescProto_default_instance_;
class RegstDescTypeProto;
class RegstDescTypeProtoDefaultTypeInternal;
extern RegstDescTypeProtoDefaultTypeInternal _RegstDescTypeProto_default_instance_;
}  // namespace oneflow
PROTOBUF_NAMESPACE_OPEN
template<> ::oneflow::CtrlRegstDesc* Arena::CreateMaybeMessage<::oneflow::CtrlRegstDesc>(Arena*);
template<> ::oneflow::DataRegstDesc* Arena::CreateMaybeMessage<::oneflow::DataRegstDesc>(Arena*);
template<> ::oneflow::LbiBlobDescPair* Arena::CreateMaybeMessage<::oneflow::LbiBlobDescPair>(Arena*);
template<> ::oneflow::RegstDescProto* Arena::CreateMaybeMessage<::oneflow::RegstDescProto>(Arena*);
template<> ::oneflow::RegstDescTypeProto* Arena::CreateMaybeMessage<::oneflow::RegstDescTypeProto>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace oneflow {

// ===================================================================

class LbiBlobDescPair :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:oneflow.LbiBlobDescPair) */ {
 public:
  LbiBlobDescPair();
  virtual ~LbiBlobDescPair();

  LbiBlobDescPair(const LbiBlobDescPair& from);
  LbiBlobDescPair(LbiBlobDescPair&& from) noexcept
    : LbiBlobDescPair() {
    *this = ::std::move(from);
  }

  inline LbiBlobDescPair& operator=(const LbiBlobDescPair& from) {
    CopyFrom(from);
    return *this;
  }
  inline LbiBlobDescPair& operator=(LbiBlobDescPair&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LbiBlobDescPair& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LbiBlobDescPair* internal_default_instance() {
    return reinterpret_cast<const LbiBlobDescPair*>(
               &_LbiBlobDescPair_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(LbiBlobDescPair& a, LbiBlobDescPair& b) {
    a.Swap(&b);
  }
  inline void Swap(LbiBlobDescPair* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LbiBlobDescPair* New() const final {
    return CreateMaybeMessage<LbiBlobDescPair>(nullptr);
  }

  LbiBlobDescPair* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LbiBlobDescPair>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LbiBlobDescPair& from);
  void MergeFrom(const LbiBlobDescPair& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LbiBlobDescPair* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "oneflow.LbiBlobDescPair";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_oneflow_2fcore_2fregister_2fregister_5fdesc_2eproto);
    return ::descriptor_table_oneflow_2fcore_2fregister_2fregister_5fdesc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLbiFieldNumber = 1,
    kBlobDescFieldNumber = 2,
  };
  // required .oneflow.LogicalBlobId lbi = 1;
  bool has_lbi() const;
  void clear_lbi();
  const ::oneflow::LogicalBlobId& lbi() const;
  ::oneflow::LogicalBlobId* release_lbi();
  ::oneflow::LogicalBlobId* mutable_lbi();
  void set_allocated_lbi(::oneflow::LogicalBlobId* lbi);

  // required .oneflow.BlobDescProto blob_desc = 2;
  bool has_blob_desc() const;
  void clear_blob_desc();
  const ::oneflow::BlobDescProto& blob_desc() const;
  ::oneflow::BlobDescProto* release_blob_desc();
  ::oneflow::BlobDescProto* mutable_blob_desc();
  void set_allocated_blob_desc(::oneflow::BlobDescProto* blob_desc);

  // @@protoc_insertion_point(class_scope:oneflow.LbiBlobDescPair)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::oneflow::LogicalBlobId* lbi_;
  ::oneflow::BlobDescProto* blob_desc_;
  friend struct ::TableStruct_oneflow_2fcore_2fregister_2fregister_5fdesc_2eproto;
};
// -------------------------------------------------------------------

class DataRegstDesc :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:oneflow.DataRegstDesc) */ {
 public:
  DataRegstDesc();
  virtual ~DataRegstDesc();

  DataRegstDesc(const DataRegstDesc& from);
  DataRegstDesc(DataRegstDesc&& from) noexcept
    : DataRegstDesc() {
    *this = ::std::move(from);
  }

  inline DataRegstDesc& operator=(const DataRegstDesc& from) {
    CopyFrom(from);
    return *this;
  }
  inline DataRegstDesc& operator=(DataRegstDesc&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DataRegstDesc& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DataRegstDesc* internal_default_instance() {
    return reinterpret_cast<const DataRegstDesc*>(
               &_DataRegstDesc_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DataRegstDesc& a, DataRegstDesc& b) {
    a.Swap(&b);
  }
  inline void Swap(DataRegstDesc* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DataRegstDesc* New() const final {
    return CreateMaybeMessage<DataRegstDesc>(nullptr);
  }

  DataRegstDesc* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DataRegstDesc>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DataRegstDesc& from);
  void MergeFrom(const DataRegstDesc& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DataRegstDesc* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "oneflow.DataRegstDesc";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_oneflow_2fcore_2fregister_2fregister_5fdesc_2eproto);
    return ::descriptor_table_oneflow_2fcore_2fregister_2fregister_5fdesc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLbi2BlobDescFieldNumber = 1,
    kTimeShapeFieldNumber = 3,
  };
  // repeated .oneflow.LbiBlobDescPair lbi2blob_desc = 1;
  int lbi2blob_desc_size() const;
  void clear_lbi2blob_desc();
  ::oneflow::LbiBlobDescPair* mutable_lbi2blob_desc(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oneflow::LbiBlobDescPair >*
      mutable_lbi2blob_desc();
  const ::oneflow::LbiBlobDescPair& lbi2blob_desc(int index) const;
  ::oneflow::LbiBlobDescPair* add_lbi2blob_desc();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oneflow::LbiBlobDescPair >&
      lbi2blob_desc() const;

  // required .oneflow.ShapeProto time_shape = 3;
  bool has_time_shape() const;
  void clear_time_shape();
  const ::oneflow::ShapeProto& time_shape() const;
  ::oneflow::ShapeProto* release_time_shape();
  ::oneflow::ShapeProto* mutable_time_shape();
  void set_allocated_time_shape(::oneflow::ShapeProto* time_shape);

  // @@protoc_insertion_point(class_scope:oneflow.DataRegstDesc)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oneflow::LbiBlobDescPair > lbi2blob_desc_;
  ::oneflow::ShapeProto* time_shape_;
  friend struct ::TableStruct_oneflow_2fcore_2fregister_2fregister_5fdesc_2eproto;
};
// -------------------------------------------------------------------

class CtrlRegstDesc :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:oneflow.CtrlRegstDesc) */ {
 public:
  CtrlRegstDesc();
  virtual ~CtrlRegstDesc();

  CtrlRegstDesc(const CtrlRegstDesc& from);
  CtrlRegstDesc(CtrlRegstDesc&& from) noexcept
    : CtrlRegstDesc() {
    *this = ::std::move(from);
  }

  inline CtrlRegstDesc& operator=(const CtrlRegstDesc& from) {
    CopyFrom(from);
    return *this;
  }
  inline CtrlRegstDesc& operator=(CtrlRegstDesc&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CtrlRegstDesc& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CtrlRegstDesc* internal_default_instance() {
    return reinterpret_cast<const CtrlRegstDesc*>(
               &_CtrlRegstDesc_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CtrlRegstDesc& a, CtrlRegstDesc& b) {
    a.Swap(&b);
  }
  inline void Swap(CtrlRegstDesc* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CtrlRegstDesc* New() const final {
    return CreateMaybeMessage<CtrlRegstDesc>(nullptr);
  }

  CtrlRegstDesc* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CtrlRegstDesc>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CtrlRegstDesc& from);
  void MergeFrom(const CtrlRegstDesc& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CtrlRegstDesc* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "oneflow.CtrlRegstDesc";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_oneflow_2fcore_2fregister_2fregister_5fdesc_2eproto);
    return ::descriptor_table_oneflow_2fcore_2fregister_2fregister_5fdesc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:oneflow.CtrlRegstDesc)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_oneflow_2fcore_2fregister_2fregister_5fdesc_2eproto;
};
// -------------------------------------------------------------------

class RegstDescTypeProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:oneflow.RegstDescTypeProto) */ {
 public:
  RegstDescTypeProto();
  virtual ~RegstDescTypeProto();

  RegstDescTypeProto(const RegstDescTypeProto& from);
  RegstDescTypeProto(RegstDescTypeProto&& from) noexcept
    : RegstDescTypeProto() {
    *this = ::std::move(from);
  }

  inline RegstDescTypeProto& operator=(const RegstDescTypeProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegstDescTypeProto& operator=(RegstDescTypeProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RegstDescTypeProto& default_instance();

  enum TypeCase {
    kDataRegstDesc = 1,
    kCtrlRegstDesc = 3,
    TYPE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RegstDescTypeProto* internal_default_instance() {
    return reinterpret_cast<const RegstDescTypeProto*>(
               &_RegstDescTypeProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(RegstDescTypeProto& a, RegstDescTypeProto& b) {
    a.Swap(&b);
  }
  inline void Swap(RegstDescTypeProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RegstDescTypeProto* New() const final {
    return CreateMaybeMessage<RegstDescTypeProto>(nullptr);
  }

  RegstDescTypeProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RegstDescTypeProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RegstDescTypeProto& from);
  void MergeFrom(const RegstDescTypeProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegstDescTypeProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "oneflow.RegstDescTypeProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_oneflow_2fcore_2fregister_2fregister_5fdesc_2eproto);
    return ::descriptor_table_oneflow_2fcore_2fregister_2fregister_5fdesc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataRegstDescFieldNumber = 1,
    kCtrlRegstDescFieldNumber = 3,
  };
  // optional .oneflow.DataRegstDesc data_regst_desc = 1;
  bool has_data_regst_desc() const;
  void clear_data_regst_desc();
  const ::oneflow::DataRegstDesc& data_regst_desc() const;
  ::oneflow::DataRegstDesc* release_data_regst_desc();
  ::oneflow::DataRegstDesc* mutable_data_regst_desc();
  void set_allocated_data_regst_desc(::oneflow::DataRegstDesc* data_regst_desc);

  // optional .oneflow.CtrlRegstDesc ctrl_regst_desc = 3;
  bool has_ctrl_regst_desc() const;
  void clear_ctrl_regst_desc();
  const ::oneflow::CtrlRegstDesc& ctrl_regst_desc() const;
  ::oneflow::CtrlRegstDesc* release_ctrl_regst_desc();
  ::oneflow::CtrlRegstDesc* mutable_ctrl_regst_desc();
  void set_allocated_ctrl_regst_desc(::oneflow::CtrlRegstDesc* ctrl_regst_desc);

  void clear_type();
  TypeCase type_case() const;
  // @@protoc_insertion_point(class_scope:oneflow.RegstDescTypeProto)
 private:
  class _Internal;
  void set_has_data_regst_desc();
  void set_has_ctrl_regst_desc();

  inline bool has_type() const;
  inline void clear_has_type();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  union TypeUnion {
    TypeUnion() {}
    ::oneflow::DataRegstDesc* data_regst_desc_;
    ::oneflow::CtrlRegstDesc* ctrl_regst_desc_;
  } type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_oneflow_2fcore_2fregister_2fregister_5fdesc_2eproto;
};
// -------------------------------------------------------------------

class RegstDescProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:oneflow.RegstDescProto) */ {
 public:
  RegstDescProto();
  virtual ~RegstDescProto();

  RegstDescProto(const RegstDescProto& from);
  RegstDescProto(RegstDescProto&& from) noexcept
    : RegstDescProto() {
    *this = ::std::move(from);
  }

  inline RegstDescProto& operator=(const RegstDescProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegstDescProto& operator=(RegstDescProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RegstDescProto& default_instance();

  enum InplaceInfoTypeCase {
    kHintInplaceConsumedRegstDescId = 14,
    kForceInplaceConsumedRegstDescId = 15,
    INPLACE_INFO_TYPE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RegstDescProto* internal_default_instance() {
    return reinterpret_cast<const RegstDescProto*>(
               &_RegstDescProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(RegstDescProto& a, RegstDescProto& b) {
    a.Swap(&b);
  }
  inline void Swap(RegstDescProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RegstDescProto* New() const final {
    return CreateMaybeMessage<RegstDescProto>(nullptr);
  }

  RegstDescProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RegstDescProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RegstDescProto& from);
  void MergeFrom(const RegstDescProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegstDescProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "oneflow.RegstDescProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_oneflow_2fcore_2fregister_2fregister_5fdesc_2eproto);
    return ::descriptor_table_oneflow_2fcore_2fregister_2fregister_5fdesc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConsumerTaskIdFieldNumber = 3,
    kVariableOpNameFieldNumber = 16,
    kMemCaseFieldNumber = 7,
    kRegstDescTypeFieldNumber = 8,
    kRegstDescIdFieldNumber = 1,
    kProducerTaskIdFieldNumber = 2,
    kMinRegisterNumFieldNumber = 4,
    kMaxRegisterNumFieldNumber = 5,
    kRegisterNumFieldNumber = 6,
    kEnableReuseMemFieldNumber = 9,
    kMemBlockIdFieldNumber = 10,
    kMemBlockOffsetFieldNumber = 11,
    kSeparatedHeaderMemBlockIdFieldNumber = 12,
    kInplaceConsumedRegstDescIdFieldNumber = 13,
    kMemBlockTotalActorCountFieldNumber = 20,
    kAllocBeforeActorFieldNumber = 21,
    kFreeAfterActorFieldNumber = 22,
    kHintInplaceConsumedRegstDescIdFieldNumber = 14,
    kForceInplaceConsumedRegstDescIdFieldNumber = 15,
  };
  // repeated int64 consumer_task_id = 3;
  int consumer_task_id_size() const;
  void clear_consumer_task_id();
  ::PROTOBUF_NAMESPACE_ID::int64 consumer_task_id(int index) const;
  void set_consumer_task_id(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_consumer_task_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      consumer_task_id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_consumer_task_id();

  // optional string variable_op_name = 16 [default = ""];
  bool has_variable_op_name() const;
  void clear_variable_op_name();
  const std::string& variable_op_name() const;
  void set_variable_op_name(const std::string& value);
  void set_variable_op_name(std::string&& value);
  void set_variable_op_name(const char* value);
  void set_variable_op_name(const char* value, size_t size);
  std::string* mutable_variable_op_name();
  std::string* release_variable_op_name();
  void set_allocated_variable_op_name(std::string* variable_op_name);

  // required .oneflow.MemoryCase mem_case = 7;
  bool has_mem_case() const;
  void clear_mem_case();
  const ::oneflow::MemoryCase& mem_case() const;
  ::oneflow::MemoryCase* release_mem_case();
  ::oneflow::MemoryCase* mutable_mem_case();
  void set_allocated_mem_case(::oneflow::MemoryCase* mem_case);

  // required .oneflow.RegstDescTypeProto regst_desc_type = 8;
  bool has_regst_desc_type() const;
  void clear_regst_desc_type();
  const ::oneflow::RegstDescTypeProto& regst_desc_type() const;
  ::oneflow::RegstDescTypeProto* release_regst_desc_type();
  ::oneflow::RegstDescTypeProto* mutable_regst_desc_type();
  void set_allocated_regst_desc_type(::oneflow::RegstDescTypeProto* regst_desc_type);

  // required int64 regst_desc_id = 1;
  bool has_regst_desc_id() const;
  void clear_regst_desc_id();
  ::PROTOBUF_NAMESPACE_ID::int64 regst_desc_id() const;
  void set_regst_desc_id(::PROTOBUF_NAMESPACE_ID::int64 value);

  // required int64 producer_task_id = 2;
  bool has_producer_task_id() const;
  void clear_producer_task_id();
  ::PROTOBUF_NAMESPACE_ID::int64 producer_task_id() const;
  void set_producer_task_id(::PROTOBUF_NAMESPACE_ID::int64 value);

  // required int32 min_register_num = 4;
  bool has_min_register_num() const;
  void clear_min_register_num();
  ::PROTOBUF_NAMESPACE_ID::int32 min_register_num() const;
  void set_min_register_num(::PROTOBUF_NAMESPACE_ID::int32 value);

  // required int32 max_register_num = 5;
  bool has_max_register_num() const;
  void clear_max_register_num();
  ::PROTOBUF_NAMESPACE_ID::int32 max_register_num() const;
  void set_max_register_num(::PROTOBUF_NAMESPACE_ID::int32 value);

  // required int32 register_num = 6;
  bool has_register_num() const;
  void clear_register_num();
  ::PROTOBUF_NAMESPACE_ID::int32 register_num() const;
  void set_register_num(::PROTOBUF_NAMESPACE_ID::int32 value);

  // required bool enable_reuse_mem = 9;
  bool has_enable_reuse_mem() const;
  void clear_enable_reuse_mem();
  bool enable_reuse_mem() const;
  void set_enable_reuse_mem(bool value);

  // required int64 mem_block_id = 10;
  bool has_mem_block_id() const;
  void clear_mem_block_id();
  ::PROTOBUF_NAMESPACE_ID::int64 mem_block_id() const;
  void set_mem_block_id(::PROTOBUF_NAMESPACE_ID::int64 value);

  // required int64 mem_block_offset = 11;
  bool has_mem_block_offset() const;
  void clear_mem_block_offset();
  ::PROTOBUF_NAMESPACE_ID::int64 mem_block_offset() const;
  void set_mem_block_offset(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 separated_header_mem_block_id = 12 [default = -1];
  bool has_separated_header_mem_block_id() const;
  void clear_separated_header_mem_block_id();
  ::PROTOBUF_NAMESPACE_ID::int64 separated_header_mem_block_id() const;
  void set_separated_header_mem_block_id(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 inplace_consumed_regst_desc_id = 13 [default = -1];
  bool has_inplace_consumed_regst_desc_id() const;
  void clear_inplace_consumed_regst_desc_id();
  ::PROTOBUF_NAMESPACE_ID::int64 inplace_consumed_regst_desc_id() const;
  void set_inplace_consumed_regst_desc_id(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 mem_block_total_actor_count = 20 [default = -1];
  bool has_mem_block_total_actor_count() const;
  void clear_mem_block_total_actor_count();
  ::PROTOBUF_NAMESPACE_ID::int64 mem_block_total_actor_count() const;
  void set_mem_block_total_actor_count(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 alloc_before_actor = 21 [default = -1];
  bool has_alloc_before_actor() const;
  void clear_alloc_before_actor();
  ::PROTOBUF_NAMESPACE_ID::int64 alloc_before_actor() const;
  void set_alloc_before_actor(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 free_after_actor = 22 [default = -1];
  bool has_free_after_actor() const;
  void clear_free_after_actor();
  ::PROTOBUF_NAMESPACE_ID::int64 free_after_actor() const;
  void set_free_after_actor(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 hint_inplace_consumed_regst_desc_id = 14 [default = -1];
  bool has_hint_inplace_consumed_regst_desc_id() const;
  void clear_hint_inplace_consumed_regst_desc_id();
  ::PROTOBUF_NAMESPACE_ID::int64 hint_inplace_consumed_regst_desc_id() const;
  void set_hint_inplace_consumed_regst_desc_id(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 force_inplace_consumed_regst_desc_id = 15 [default = -1];
  bool has_force_inplace_consumed_regst_desc_id() const;
  void clear_force_inplace_consumed_regst_desc_id();
  ::PROTOBUF_NAMESPACE_ID::int64 force_inplace_consumed_regst_desc_id() const;
  void set_force_inplace_consumed_regst_desc_id(::PROTOBUF_NAMESPACE_ID::int64 value);

  void clear_inplace_info_type();
  InplaceInfoTypeCase inplace_info_type_case() const;
  // @@protoc_insertion_point(class_scope:oneflow.RegstDescProto)
 private:
  class _Internal;
  void set_has_hint_inplace_consumed_regst_desc_id();
  void set_has_force_inplace_consumed_regst_desc_id();

  inline bool has_inplace_info_type() const;
  inline void clear_has_inplace_info_type();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > consumer_task_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr variable_op_name_;
  ::oneflow::MemoryCase* mem_case_;
  ::oneflow::RegstDescTypeProto* regst_desc_type_;
  ::PROTOBUF_NAMESPACE_ID::int64 regst_desc_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 producer_task_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 min_register_num_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_register_num_;
  ::PROTOBUF_NAMESPACE_ID::int32 register_num_;
  bool enable_reuse_mem_;
  ::PROTOBUF_NAMESPACE_ID::int64 mem_block_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 mem_block_offset_;
  ::PROTOBUF_NAMESPACE_ID::int64 separated_header_mem_block_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 inplace_consumed_regst_desc_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 mem_block_total_actor_count_;
  ::PROTOBUF_NAMESPACE_ID::int64 alloc_before_actor_;
  ::PROTOBUF_NAMESPACE_ID::int64 free_after_actor_;
  union InplaceInfoTypeUnion {
    InplaceInfoTypeUnion() {}
    ::PROTOBUF_NAMESPACE_ID::int64 hint_inplace_consumed_regst_desc_id_;
    ::PROTOBUF_NAMESPACE_ID::int64 force_inplace_consumed_regst_desc_id_;
  } inplace_info_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_oneflow_2fcore_2fregister_2fregister_5fdesc_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LbiBlobDescPair

// required .oneflow.LogicalBlobId lbi = 1;
inline bool LbiBlobDescPair::has_lbi() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::oneflow::LogicalBlobId& LbiBlobDescPair::lbi() const {
  const ::oneflow::LogicalBlobId* p = lbi_;
  // @@protoc_insertion_point(field_get:oneflow.LbiBlobDescPair.lbi)
  return p != nullptr ? *p : *reinterpret_cast<const ::oneflow::LogicalBlobId*>(
      &::oneflow::_LogicalBlobId_default_instance_);
}
inline ::oneflow::LogicalBlobId* LbiBlobDescPair::release_lbi() {
  // @@protoc_insertion_point(field_release:oneflow.LbiBlobDescPair.lbi)
  _has_bits_[0] &= ~0x00000001u;
  ::oneflow::LogicalBlobId* temp = lbi_;
  lbi_ = nullptr;
  return temp;
}
inline ::oneflow::LogicalBlobId* LbiBlobDescPair::mutable_lbi() {
  _has_bits_[0] |= 0x00000001u;
  if (lbi_ == nullptr) {
    auto* p = CreateMaybeMessage<::oneflow::LogicalBlobId>(GetArenaNoVirtual());
    lbi_ = p;
  }
  // @@protoc_insertion_point(field_mutable:oneflow.LbiBlobDescPair.lbi)
  return lbi_;
}
inline void LbiBlobDescPair::set_allocated_lbi(::oneflow::LogicalBlobId* lbi) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(lbi_);
  }
  if (lbi) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      lbi = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lbi, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  lbi_ = lbi;
  // @@protoc_insertion_point(field_set_allocated:oneflow.LbiBlobDescPair.lbi)
}

// required .oneflow.BlobDescProto blob_desc = 2;
inline bool LbiBlobDescPair::has_blob_desc() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::oneflow::BlobDescProto& LbiBlobDescPair::blob_desc() const {
  const ::oneflow::BlobDescProto* p = blob_desc_;
  // @@protoc_insertion_point(field_get:oneflow.LbiBlobDescPair.blob_desc)
  return p != nullptr ? *p : *reinterpret_cast<const ::oneflow::BlobDescProto*>(
      &::oneflow::_BlobDescProto_default_instance_);
}
inline ::oneflow::BlobDescProto* LbiBlobDescPair::release_blob_desc() {
  // @@protoc_insertion_point(field_release:oneflow.LbiBlobDescPair.blob_desc)
  _has_bits_[0] &= ~0x00000002u;
  ::oneflow::BlobDescProto* temp = blob_desc_;
  blob_desc_ = nullptr;
  return temp;
}
inline ::oneflow::BlobDescProto* LbiBlobDescPair::mutable_blob_desc() {
  _has_bits_[0] |= 0x00000002u;
  if (blob_desc_ == nullptr) {
    auto* p = CreateMaybeMessage<::oneflow::BlobDescProto>(GetArenaNoVirtual());
    blob_desc_ = p;
  }
  // @@protoc_insertion_point(field_mutable:oneflow.LbiBlobDescPair.blob_desc)
  return blob_desc_;
}
inline void LbiBlobDescPair::set_allocated_blob_desc(::oneflow::BlobDescProto* blob_desc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(blob_desc_);
  }
  if (blob_desc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      blob_desc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, blob_desc, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  blob_desc_ = blob_desc;
  // @@protoc_insertion_point(field_set_allocated:oneflow.LbiBlobDescPair.blob_desc)
}

// -------------------------------------------------------------------

// DataRegstDesc

// repeated .oneflow.LbiBlobDescPair lbi2blob_desc = 1;
inline int DataRegstDesc::lbi2blob_desc_size() const {
  return lbi2blob_desc_.size();
}
inline void DataRegstDesc::clear_lbi2blob_desc() {
  lbi2blob_desc_.Clear();
}
inline ::oneflow::LbiBlobDescPair* DataRegstDesc::mutable_lbi2blob_desc(int index) {
  // @@protoc_insertion_point(field_mutable:oneflow.DataRegstDesc.lbi2blob_desc)
  return lbi2blob_desc_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oneflow::LbiBlobDescPair >*
DataRegstDesc::mutable_lbi2blob_desc() {
  // @@protoc_insertion_point(field_mutable_list:oneflow.DataRegstDesc.lbi2blob_desc)
  return &lbi2blob_desc_;
}
inline const ::oneflow::LbiBlobDescPair& DataRegstDesc::lbi2blob_desc(int index) const {
  // @@protoc_insertion_point(field_get:oneflow.DataRegstDesc.lbi2blob_desc)
  return lbi2blob_desc_.Get(index);
}
inline ::oneflow::LbiBlobDescPair* DataRegstDesc::add_lbi2blob_desc() {
  // @@protoc_insertion_point(field_add:oneflow.DataRegstDesc.lbi2blob_desc)
  return lbi2blob_desc_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oneflow::LbiBlobDescPair >&
DataRegstDesc::lbi2blob_desc() const {
  // @@protoc_insertion_point(field_list:oneflow.DataRegstDesc.lbi2blob_desc)
  return lbi2blob_desc_;
}

// required .oneflow.ShapeProto time_shape = 3;
inline bool DataRegstDesc::has_time_shape() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::oneflow::ShapeProto& DataRegstDesc::time_shape() const {
  const ::oneflow::ShapeProto* p = time_shape_;
  // @@protoc_insertion_point(field_get:oneflow.DataRegstDesc.time_shape)
  return p != nullptr ? *p : *reinterpret_cast<const ::oneflow::ShapeProto*>(
      &::oneflow::_ShapeProto_default_instance_);
}
inline ::oneflow::ShapeProto* DataRegstDesc::release_time_shape() {
  // @@protoc_insertion_point(field_release:oneflow.DataRegstDesc.time_shape)
  _has_bits_[0] &= ~0x00000001u;
  ::oneflow::ShapeProto* temp = time_shape_;
  time_shape_ = nullptr;
  return temp;
}
inline ::oneflow::ShapeProto* DataRegstDesc::mutable_time_shape() {
  _has_bits_[0] |= 0x00000001u;
  if (time_shape_ == nullptr) {
    auto* p = CreateMaybeMessage<::oneflow::ShapeProto>(GetArenaNoVirtual());
    time_shape_ = p;
  }
  // @@protoc_insertion_point(field_mutable:oneflow.DataRegstDesc.time_shape)
  return time_shape_;
}
inline void DataRegstDesc::set_allocated_time_shape(::oneflow::ShapeProto* time_shape) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_shape_);
  }
  if (time_shape) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      time_shape = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time_shape, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  time_shape_ = time_shape;
  // @@protoc_insertion_point(field_set_allocated:oneflow.DataRegstDesc.time_shape)
}

// -------------------------------------------------------------------

// CtrlRegstDesc

// -------------------------------------------------------------------

// RegstDescTypeProto

// optional .oneflow.DataRegstDesc data_regst_desc = 1;
inline bool RegstDescTypeProto::has_data_regst_desc() const {
  return type_case() == kDataRegstDesc;
}
inline void RegstDescTypeProto::set_has_data_regst_desc() {
  _oneof_case_[0] = kDataRegstDesc;
}
inline void RegstDescTypeProto::clear_data_regst_desc() {
  if (has_data_regst_desc()) {
    delete type_.data_regst_desc_;
    clear_has_type();
  }
}
inline ::oneflow::DataRegstDesc* RegstDescTypeProto::release_data_regst_desc() {
  // @@protoc_insertion_point(field_release:oneflow.RegstDescTypeProto.data_regst_desc)
  if (has_data_regst_desc()) {
    clear_has_type();
      ::oneflow::DataRegstDesc* temp = type_.data_regst_desc_;
    type_.data_regst_desc_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::oneflow::DataRegstDesc& RegstDescTypeProto::data_regst_desc() const {
  // @@protoc_insertion_point(field_get:oneflow.RegstDescTypeProto.data_regst_desc)
  return has_data_regst_desc()
      ? *type_.data_regst_desc_
      : *reinterpret_cast< ::oneflow::DataRegstDesc*>(&::oneflow::_DataRegstDesc_default_instance_);
}
inline ::oneflow::DataRegstDesc* RegstDescTypeProto::mutable_data_regst_desc() {
  if (!has_data_regst_desc()) {
    clear_type();
    set_has_data_regst_desc();
    type_.data_regst_desc_ = CreateMaybeMessage< ::oneflow::DataRegstDesc >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:oneflow.RegstDescTypeProto.data_regst_desc)
  return type_.data_regst_desc_;
}

// optional .oneflow.CtrlRegstDesc ctrl_regst_desc = 3;
inline bool RegstDescTypeProto::has_ctrl_regst_desc() const {
  return type_case() == kCtrlRegstDesc;
}
inline void RegstDescTypeProto::set_has_ctrl_regst_desc() {
  _oneof_case_[0] = kCtrlRegstDesc;
}
inline void RegstDescTypeProto::clear_ctrl_regst_desc() {
  if (has_ctrl_regst_desc()) {
    delete type_.ctrl_regst_desc_;
    clear_has_type();
  }
}
inline ::oneflow::CtrlRegstDesc* RegstDescTypeProto::release_ctrl_regst_desc() {
  // @@protoc_insertion_point(field_release:oneflow.RegstDescTypeProto.ctrl_regst_desc)
  if (has_ctrl_regst_desc()) {
    clear_has_type();
      ::oneflow::CtrlRegstDesc* temp = type_.ctrl_regst_desc_;
    type_.ctrl_regst_desc_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::oneflow::CtrlRegstDesc& RegstDescTypeProto::ctrl_regst_desc() const {
  // @@protoc_insertion_point(field_get:oneflow.RegstDescTypeProto.ctrl_regst_desc)
  return has_ctrl_regst_desc()
      ? *type_.ctrl_regst_desc_
      : *reinterpret_cast< ::oneflow::CtrlRegstDesc*>(&::oneflow::_CtrlRegstDesc_default_instance_);
}
inline ::oneflow::CtrlRegstDesc* RegstDescTypeProto::mutable_ctrl_regst_desc() {
  if (!has_ctrl_regst_desc()) {
    clear_type();
    set_has_ctrl_regst_desc();
    type_.ctrl_regst_desc_ = CreateMaybeMessage< ::oneflow::CtrlRegstDesc >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:oneflow.RegstDescTypeProto.ctrl_regst_desc)
  return type_.ctrl_regst_desc_;
}

inline bool RegstDescTypeProto::has_type() const {
  return type_case() != TYPE_NOT_SET;
}
inline void RegstDescTypeProto::clear_has_type() {
  _oneof_case_[0] = TYPE_NOT_SET;
}
inline RegstDescTypeProto::TypeCase RegstDescTypeProto::type_case() const {
  return RegstDescTypeProto::TypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// RegstDescProto

// required int64 regst_desc_id = 1;
inline bool RegstDescProto::has_regst_desc_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RegstDescProto::clear_regst_desc_id() {
  regst_desc_id_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RegstDescProto::regst_desc_id() const {
  // @@protoc_insertion_point(field_get:oneflow.RegstDescProto.regst_desc_id)
  return regst_desc_id_;
}
inline void RegstDescProto::set_regst_desc_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000008u;
  regst_desc_id_ = value;
  // @@protoc_insertion_point(field_set:oneflow.RegstDescProto.regst_desc_id)
}

// required int64 producer_task_id = 2;
inline bool RegstDescProto::has_producer_task_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RegstDescProto::clear_producer_task_id() {
  producer_task_id_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RegstDescProto::producer_task_id() const {
  // @@protoc_insertion_point(field_get:oneflow.RegstDescProto.producer_task_id)
  return producer_task_id_;
}
inline void RegstDescProto::set_producer_task_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000010u;
  producer_task_id_ = value;
  // @@protoc_insertion_point(field_set:oneflow.RegstDescProto.producer_task_id)
}

// repeated int64 consumer_task_id = 3;
inline int RegstDescProto::consumer_task_id_size() const {
  return consumer_task_id_.size();
}
inline void RegstDescProto::clear_consumer_task_id() {
  consumer_task_id_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RegstDescProto::consumer_task_id(int index) const {
  // @@protoc_insertion_point(field_get:oneflow.RegstDescProto.consumer_task_id)
  return consumer_task_id_.Get(index);
}
inline void RegstDescProto::set_consumer_task_id(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  consumer_task_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:oneflow.RegstDescProto.consumer_task_id)
}
inline void RegstDescProto::add_consumer_task_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  consumer_task_id_.Add(value);
  // @@protoc_insertion_point(field_add:oneflow.RegstDescProto.consumer_task_id)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
RegstDescProto::consumer_task_id() const {
  // @@protoc_insertion_point(field_list:oneflow.RegstDescProto.consumer_task_id)
  return consumer_task_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
RegstDescProto::mutable_consumer_task_id() {
  // @@protoc_insertion_point(field_mutable_list:oneflow.RegstDescProto.consumer_task_id)
  return &consumer_task_id_;
}

// required int32 min_register_num = 4;
inline bool RegstDescProto::has_min_register_num() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RegstDescProto::clear_min_register_num() {
  min_register_num_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RegstDescProto::min_register_num() const {
  // @@protoc_insertion_point(field_get:oneflow.RegstDescProto.min_register_num)
  return min_register_num_;
}
inline void RegstDescProto::set_min_register_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  min_register_num_ = value;
  // @@protoc_insertion_point(field_set:oneflow.RegstDescProto.min_register_num)
}

// required int32 max_register_num = 5;
inline bool RegstDescProto::has_max_register_num() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RegstDescProto::clear_max_register_num() {
  max_register_num_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RegstDescProto::max_register_num() const {
  // @@protoc_insertion_point(field_get:oneflow.RegstDescProto.max_register_num)
  return max_register_num_;
}
inline void RegstDescProto::set_max_register_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  max_register_num_ = value;
  // @@protoc_insertion_point(field_set:oneflow.RegstDescProto.max_register_num)
}

// required int32 register_num = 6;
inline bool RegstDescProto::has_register_num() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RegstDescProto::clear_register_num() {
  register_num_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RegstDescProto::register_num() const {
  // @@protoc_insertion_point(field_get:oneflow.RegstDescProto.register_num)
  return register_num_;
}
inline void RegstDescProto::set_register_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  register_num_ = value;
  // @@protoc_insertion_point(field_set:oneflow.RegstDescProto.register_num)
}

// required .oneflow.MemoryCase mem_case = 7;
inline bool RegstDescProto::has_mem_case() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::oneflow::MemoryCase& RegstDescProto::mem_case() const {
  const ::oneflow::MemoryCase* p = mem_case_;
  // @@protoc_insertion_point(field_get:oneflow.RegstDescProto.mem_case)
  return p != nullptr ? *p : *reinterpret_cast<const ::oneflow::MemoryCase*>(
      &::oneflow::_MemoryCase_default_instance_);
}
inline ::oneflow::MemoryCase* RegstDescProto::release_mem_case() {
  // @@protoc_insertion_point(field_release:oneflow.RegstDescProto.mem_case)
  _has_bits_[0] &= ~0x00000002u;
  ::oneflow::MemoryCase* temp = mem_case_;
  mem_case_ = nullptr;
  return temp;
}
inline ::oneflow::MemoryCase* RegstDescProto::mutable_mem_case() {
  _has_bits_[0] |= 0x00000002u;
  if (mem_case_ == nullptr) {
    auto* p = CreateMaybeMessage<::oneflow::MemoryCase>(GetArenaNoVirtual());
    mem_case_ = p;
  }
  // @@protoc_insertion_point(field_mutable:oneflow.RegstDescProto.mem_case)
  return mem_case_;
}
inline void RegstDescProto::set_allocated_mem_case(::oneflow::MemoryCase* mem_case) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(mem_case_);
  }
  if (mem_case) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mem_case = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mem_case, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  mem_case_ = mem_case;
  // @@protoc_insertion_point(field_set_allocated:oneflow.RegstDescProto.mem_case)
}

// required .oneflow.RegstDescTypeProto regst_desc_type = 8;
inline bool RegstDescProto::has_regst_desc_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RegstDescProto::clear_regst_desc_type() {
  if (regst_desc_type_ != nullptr) regst_desc_type_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::oneflow::RegstDescTypeProto& RegstDescProto::regst_desc_type() const {
  const ::oneflow::RegstDescTypeProto* p = regst_desc_type_;
  // @@protoc_insertion_point(field_get:oneflow.RegstDescProto.regst_desc_type)
  return p != nullptr ? *p : *reinterpret_cast<const ::oneflow::RegstDescTypeProto*>(
      &::oneflow::_RegstDescTypeProto_default_instance_);
}
inline ::oneflow::RegstDescTypeProto* RegstDescProto::release_regst_desc_type() {
  // @@protoc_insertion_point(field_release:oneflow.RegstDescProto.regst_desc_type)
  _has_bits_[0] &= ~0x00000004u;
  ::oneflow::RegstDescTypeProto* temp = regst_desc_type_;
  regst_desc_type_ = nullptr;
  return temp;
}
inline ::oneflow::RegstDescTypeProto* RegstDescProto::mutable_regst_desc_type() {
  _has_bits_[0] |= 0x00000004u;
  if (regst_desc_type_ == nullptr) {
    auto* p = CreateMaybeMessage<::oneflow::RegstDescTypeProto>(GetArenaNoVirtual());
    regst_desc_type_ = p;
  }
  // @@protoc_insertion_point(field_mutable:oneflow.RegstDescProto.regst_desc_type)
  return regst_desc_type_;
}
inline void RegstDescProto::set_allocated_regst_desc_type(::oneflow::RegstDescTypeProto* regst_desc_type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete regst_desc_type_;
  }
  if (regst_desc_type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      regst_desc_type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, regst_desc_type, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  regst_desc_type_ = regst_desc_type;
  // @@protoc_insertion_point(field_set_allocated:oneflow.RegstDescProto.regst_desc_type)
}

// required bool enable_reuse_mem = 9;
inline bool RegstDescProto::has_enable_reuse_mem() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void RegstDescProto::clear_enable_reuse_mem() {
  enable_reuse_mem_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool RegstDescProto::enable_reuse_mem() const {
  // @@protoc_insertion_point(field_get:oneflow.RegstDescProto.enable_reuse_mem)
  return enable_reuse_mem_;
}
inline void RegstDescProto::set_enable_reuse_mem(bool value) {
  _has_bits_[0] |= 0x00000100u;
  enable_reuse_mem_ = value;
  // @@protoc_insertion_point(field_set:oneflow.RegstDescProto.enable_reuse_mem)
}

// required int64 mem_block_id = 10;
inline bool RegstDescProto::has_mem_block_id() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void RegstDescProto::clear_mem_block_id() {
  mem_block_id_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RegstDescProto::mem_block_id() const {
  // @@protoc_insertion_point(field_get:oneflow.RegstDescProto.mem_block_id)
  return mem_block_id_;
}
inline void RegstDescProto::set_mem_block_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000200u;
  mem_block_id_ = value;
  // @@protoc_insertion_point(field_set:oneflow.RegstDescProto.mem_block_id)
}

// required int64 mem_block_offset = 11;
inline bool RegstDescProto::has_mem_block_offset() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void RegstDescProto::clear_mem_block_offset() {
  mem_block_offset_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RegstDescProto::mem_block_offset() const {
  // @@protoc_insertion_point(field_get:oneflow.RegstDescProto.mem_block_offset)
  return mem_block_offset_;
}
inline void RegstDescProto::set_mem_block_offset(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000400u;
  mem_block_offset_ = value;
  // @@protoc_insertion_point(field_set:oneflow.RegstDescProto.mem_block_offset)
}

// optional int64 separated_header_mem_block_id = 12 [default = -1];
inline bool RegstDescProto::has_separated_header_mem_block_id() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void RegstDescProto::clear_separated_header_mem_block_id() {
  separated_header_mem_block_id_ = PROTOBUF_LONGLONG(-1);
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RegstDescProto::separated_header_mem_block_id() const {
  // @@protoc_insertion_point(field_get:oneflow.RegstDescProto.separated_header_mem_block_id)
  return separated_header_mem_block_id_;
}
inline void RegstDescProto::set_separated_header_mem_block_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000800u;
  separated_header_mem_block_id_ = value;
  // @@protoc_insertion_point(field_set:oneflow.RegstDescProto.separated_header_mem_block_id)
}

// optional int64 inplace_consumed_regst_desc_id = 13 [default = -1];
inline bool RegstDescProto::has_inplace_consumed_regst_desc_id() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void RegstDescProto::clear_inplace_consumed_regst_desc_id() {
  inplace_consumed_regst_desc_id_ = PROTOBUF_LONGLONG(-1);
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RegstDescProto::inplace_consumed_regst_desc_id() const {
  // @@protoc_insertion_point(field_get:oneflow.RegstDescProto.inplace_consumed_regst_desc_id)
  return inplace_consumed_regst_desc_id_;
}
inline void RegstDescProto::set_inplace_consumed_regst_desc_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00001000u;
  inplace_consumed_regst_desc_id_ = value;
  // @@protoc_insertion_point(field_set:oneflow.RegstDescProto.inplace_consumed_regst_desc_id)
}

// optional int64 hint_inplace_consumed_regst_desc_id = 14 [default = -1];
inline bool RegstDescProto::has_hint_inplace_consumed_regst_desc_id() const {
  return inplace_info_type_case() == kHintInplaceConsumedRegstDescId;
}
inline void RegstDescProto::set_has_hint_inplace_consumed_regst_desc_id() {
  _oneof_case_[0] = kHintInplaceConsumedRegstDescId;
}
inline void RegstDescProto::clear_hint_inplace_consumed_regst_desc_id() {
  if (has_hint_inplace_consumed_regst_desc_id()) {
    inplace_info_type_.hint_inplace_consumed_regst_desc_id_ = PROTOBUF_LONGLONG(-1);
    clear_has_inplace_info_type();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RegstDescProto::hint_inplace_consumed_regst_desc_id() const {
  // @@protoc_insertion_point(field_get:oneflow.RegstDescProto.hint_inplace_consumed_regst_desc_id)
  if (has_hint_inplace_consumed_regst_desc_id()) {
    return inplace_info_type_.hint_inplace_consumed_regst_desc_id_;
  }
  return PROTOBUF_LONGLONG(-1);
}
inline void RegstDescProto::set_hint_inplace_consumed_regst_desc_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  if (!has_hint_inplace_consumed_regst_desc_id()) {
    clear_inplace_info_type();
    set_has_hint_inplace_consumed_regst_desc_id();
  }
  inplace_info_type_.hint_inplace_consumed_regst_desc_id_ = value;
  // @@protoc_insertion_point(field_set:oneflow.RegstDescProto.hint_inplace_consumed_regst_desc_id)
}

// optional int64 force_inplace_consumed_regst_desc_id = 15 [default = -1];
inline bool RegstDescProto::has_force_inplace_consumed_regst_desc_id() const {
  return inplace_info_type_case() == kForceInplaceConsumedRegstDescId;
}
inline void RegstDescProto::set_has_force_inplace_consumed_regst_desc_id() {
  _oneof_case_[0] = kForceInplaceConsumedRegstDescId;
}
inline void RegstDescProto::clear_force_inplace_consumed_regst_desc_id() {
  if (has_force_inplace_consumed_regst_desc_id()) {
    inplace_info_type_.force_inplace_consumed_regst_desc_id_ = PROTOBUF_LONGLONG(-1);
    clear_has_inplace_info_type();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RegstDescProto::force_inplace_consumed_regst_desc_id() const {
  // @@protoc_insertion_point(field_get:oneflow.RegstDescProto.force_inplace_consumed_regst_desc_id)
  if (has_force_inplace_consumed_regst_desc_id()) {
    return inplace_info_type_.force_inplace_consumed_regst_desc_id_;
  }
  return PROTOBUF_LONGLONG(-1);
}
inline void RegstDescProto::set_force_inplace_consumed_regst_desc_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  if (!has_force_inplace_consumed_regst_desc_id()) {
    clear_inplace_info_type();
    set_has_force_inplace_consumed_regst_desc_id();
  }
  inplace_info_type_.force_inplace_consumed_regst_desc_id_ = value;
  // @@protoc_insertion_point(field_set:oneflow.RegstDescProto.force_inplace_consumed_regst_desc_id)
}

// optional string variable_op_name = 16 [default = ""];
inline bool RegstDescProto::has_variable_op_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RegstDescProto::clear_variable_op_name() {
  variable_op_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RegstDescProto::variable_op_name() const {
  // @@protoc_insertion_point(field_get:oneflow.RegstDescProto.variable_op_name)
  return variable_op_name_.GetNoArena();
}
inline void RegstDescProto::set_variable_op_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  variable_op_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:oneflow.RegstDescProto.variable_op_name)
}
inline void RegstDescProto::set_variable_op_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  variable_op_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:oneflow.RegstDescProto.variable_op_name)
}
inline void RegstDescProto::set_variable_op_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  variable_op_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:oneflow.RegstDescProto.variable_op_name)
}
inline void RegstDescProto::set_variable_op_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  variable_op_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:oneflow.RegstDescProto.variable_op_name)
}
inline std::string* RegstDescProto::mutable_variable_op_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:oneflow.RegstDescProto.variable_op_name)
  return variable_op_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RegstDescProto::release_variable_op_name() {
  // @@protoc_insertion_point(field_release:oneflow.RegstDescProto.variable_op_name)
  if (!has_variable_op_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return variable_op_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RegstDescProto::set_allocated_variable_op_name(std::string* variable_op_name) {
  if (variable_op_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  variable_op_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), variable_op_name);
  // @@protoc_insertion_point(field_set_allocated:oneflow.RegstDescProto.variable_op_name)
}

// optional int64 mem_block_total_actor_count = 20 [default = -1];
inline bool RegstDescProto::has_mem_block_total_actor_count() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void RegstDescProto::clear_mem_block_total_actor_count() {
  mem_block_total_actor_count_ = PROTOBUF_LONGLONG(-1);
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RegstDescProto::mem_block_total_actor_count() const {
  // @@protoc_insertion_point(field_get:oneflow.RegstDescProto.mem_block_total_actor_count)
  return mem_block_total_actor_count_;
}
inline void RegstDescProto::set_mem_block_total_actor_count(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00002000u;
  mem_block_total_actor_count_ = value;
  // @@protoc_insertion_point(field_set:oneflow.RegstDescProto.mem_block_total_actor_count)
}

// optional int64 alloc_before_actor = 21 [default = -1];
inline bool RegstDescProto::has_alloc_before_actor() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void RegstDescProto::clear_alloc_before_actor() {
  alloc_before_actor_ = PROTOBUF_LONGLONG(-1);
  _has_bits_[0] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RegstDescProto::alloc_before_actor() const {
  // @@protoc_insertion_point(field_get:oneflow.RegstDescProto.alloc_before_actor)
  return alloc_before_actor_;
}
inline void RegstDescProto::set_alloc_before_actor(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00004000u;
  alloc_before_actor_ = value;
  // @@protoc_insertion_point(field_set:oneflow.RegstDescProto.alloc_before_actor)
}

// optional int64 free_after_actor = 22 [default = -1];
inline bool RegstDescProto::has_free_after_actor() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void RegstDescProto::clear_free_after_actor() {
  free_after_actor_ = PROTOBUF_LONGLONG(-1);
  _has_bits_[0] &= ~0x00008000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RegstDescProto::free_after_actor() const {
  // @@protoc_insertion_point(field_get:oneflow.RegstDescProto.free_after_actor)
  return free_after_actor_;
}
inline void RegstDescProto::set_free_after_actor(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00008000u;
  free_after_actor_ = value;
  // @@protoc_insertion_point(field_set:oneflow.RegstDescProto.free_after_actor)
}

inline bool RegstDescProto::has_inplace_info_type() const {
  return inplace_info_type_case() != INPLACE_INFO_TYPE_NOT_SET;
}
inline void RegstDescProto::clear_has_inplace_info_type() {
  _oneof_case_[0] = INPLACE_INFO_TYPE_NOT_SET;
}
inline RegstDescProto::InplaceInfoTypeCase RegstDescProto::inplace_info_type_case() const {
  return RegstDescProto::InplaceInfoTypeCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace oneflow

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_oneflow_2fcore_2fregister_2fregister_5fdesc_2eproto
