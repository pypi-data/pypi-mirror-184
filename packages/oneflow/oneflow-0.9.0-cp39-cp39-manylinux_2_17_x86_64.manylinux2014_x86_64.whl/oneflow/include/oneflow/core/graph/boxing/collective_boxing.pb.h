// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: oneflow/core/graph/boxing/collective_boxing.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_oneflow_2fcore_2fgraph_2fboxing_2fcollective_5fboxing_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_oneflow_2fcore_2fgraph_2fboxing_2fcollective_5fboxing_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "oneflow/core/common/shape.pb.h"
#include "oneflow/core/common/data_type.pb.h"
#include "oneflow/core/common/device_type.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_oneflow_2fcore_2fgraph_2fboxing_2fcollective_5fboxing_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_oneflow_2fcore_2fgraph_2fboxing_2fcollective_5fboxing_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_oneflow_2fcore_2fgraph_2fboxing_2fcollective_5fboxing_2eproto;
namespace oneflow {
namespace boxing {
namespace collective {
class DeviceDesc;
class DeviceDescDefaultTypeInternal;
extern DeviceDescDefaultTypeInternal _DeviceDesc_default_instance_;
class DeviceSet;
class DeviceSetDefaultTypeInternal;
extern DeviceSetDefaultTypeInternal _DeviceSet_default_instance_;
class OpDesc;
class OpDescDefaultTypeInternal;
extern OpDescDefaultTypeInternal _OpDesc_default_instance_;
class RankDesc;
class RankDescDefaultTypeInternal;
extern RankDescDefaultTypeInternal _RankDesc_default_instance_;
class RequestDesc;
class RequestDescDefaultTypeInternal;
extern RequestDescDefaultTypeInternal _RequestDesc_default_instance_;
class RequestSet;
class RequestSetDefaultTypeInternal;
extern RequestSetDefaultTypeInternal _RequestSet_default_instance_;
}  // namespace collective
}  // namespace boxing
}  // namespace oneflow
PROTOBUF_NAMESPACE_OPEN
template<> ::oneflow::boxing::collective::DeviceDesc* Arena::CreateMaybeMessage<::oneflow::boxing::collective::DeviceDesc>(Arena*);
template<> ::oneflow::boxing::collective::DeviceSet* Arena::CreateMaybeMessage<::oneflow::boxing::collective::DeviceSet>(Arena*);
template<> ::oneflow::boxing::collective::OpDesc* Arena::CreateMaybeMessage<::oneflow::boxing::collective::OpDesc>(Arena*);
template<> ::oneflow::boxing::collective::RankDesc* Arena::CreateMaybeMessage<::oneflow::boxing::collective::RankDesc>(Arena*);
template<> ::oneflow::boxing::collective::RequestDesc* Arena::CreateMaybeMessage<::oneflow::boxing::collective::RequestDesc>(Arena*);
template<> ::oneflow::boxing::collective::RequestSet* Arena::CreateMaybeMessage<::oneflow::boxing::collective::RequestSet>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace oneflow {
namespace boxing {
namespace collective {

enum OpType : int {
  kOpTypeInvalid = 0,
  kOpTypeAllReduce = 1,
  kOpTypeReduceScatter = 2,
  kOpTypeAllGather = 3,
  kOpTypeReduce = 4,
  kOpTypeBroadcast = 5,
  kOpTypeAll2All = 6
};
bool OpType_IsValid(int value);
constexpr OpType OpType_MIN = kOpTypeInvalid;
constexpr OpType OpType_MAX = kOpTypeAll2All;
constexpr int OpType_ARRAYSIZE = OpType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OpType_descriptor();
template<typename T>
inline const std::string& OpType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, OpType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function OpType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    OpType_descriptor(), enum_t_value);
}
inline bool OpType_Parse(
    const std::string& name, OpType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<OpType>(
    OpType_descriptor(), name, value);
}
enum ReduceMethod : int {
  kReduceMethodInvalid = 0,
  kReduceMethodSum = 1
};
bool ReduceMethod_IsValid(int value);
constexpr ReduceMethod ReduceMethod_MIN = kReduceMethodInvalid;
constexpr ReduceMethod ReduceMethod_MAX = kReduceMethodSum;
constexpr int ReduceMethod_ARRAYSIZE = ReduceMethod_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ReduceMethod_descriptor();
template<typename T>
inline const std::string& ReduceMethod_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ReduceMethod>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ReduceMethod_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ReduceMethod_descriptor(), enum_t_value);
}
inline bool ReduceMethod_Parse(
    const std::string& name, ReduceMethod* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ReduceMethod>(
    ReduceMethod_descriptor(), name, value);
}
enum Backend : int {
  kBackendInvalid = 0,
  kBackendNCCL = 1
};
bool Backend_IsValid(int value);
constexpr Backend Backend_MIN = kBackendInvalid;
constexpr Backend Backend_MAX = kBackendNCCL;
constexpr int Backend_ARRAYSIZE = Backend_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Backend_descriptor();
template<typename T>
inline const std::string& Backend_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Backend>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Backend_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Backend_descriptor(), enum_t_value);
}
inline bool Backend_Parse(
    const std::string& name, Backend* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Backend>(
    Backend_descriptor(), name, value);
}
// ===================================================================

class DeviceDesc :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:oneflow.boxing.collective.DeviceDesc) */ {
 public:
  DeviceDesc();
  virtual ~DeviceDesc();

  DeviceDesc(const DeviceDesc& from);
  DeviceDesc(DeviceDesc&& from) noexcept
    : DeviceDesc() {
    *this = ::std::move(from);
  }

  inline DeviceDesc& operator=(const DeviceDesc& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceDesc& operator=(DeviceDesc&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeviceDesc& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeviceDesc* internal_default_instance() {
    return reinterpret_cast<const DeviceDesc*>(
               &_DeviceDesc_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DeviceDesc& a, DeviceDesc& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceDesc* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeviceDesc* New() const final {
    return CreateMaybeMessage<DeviceDesc>(nullptr);
  }

  DeviceDesc* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeviceDesc>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeviceDesc& from);
  void MergeFrom(const DeviceDesc& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeviceDesc* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "oneflow.boxing.collective.DeviceDesc";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_oneflow_2fcore_2fgraph_2fboxing_2fcollective_5fboxing_2eproto);
    return ::descriptor_table_oneflow_2fcore_2fgraph_2fboxing_2fcollective_5fboxing_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMachineIdFieldNumber = 1,
    kDeviceIdFieldNumber = 3,
    kDeviceTypeFieldNumber = 2,
  };
  // required int64 machine_id = 1;
  bool has_machine_id() const;
  void clear_machine_id();
  ::PROTOBUF_NAMESPACE_ID::int64 machine_id() const;
  void set_machine_id(::PROTOBUF_NAMESPACE_ID::int64 value);

  // required int64 device_id = 3;
  bool has_device_id() const;
  void clear_device_id();
  ::PROTOBUF_NAMESPACE_ID::int64 device_id() const;
  void set_device_id(::PROTOBUF_NAMESPACE_ID::int64 value);

  // required .oneflow.DeviceType device_type = 2;
  bool has_device_type() const;
  void clear_device_type();
  ::oneflow::DeviceType device_type() const;
  void set_device_type(::oneflow::DeviceType value);

  // @@protoc_insertion_point(class_scope:oneflow.boxing.collective.DeviceDesc)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 machine_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 device_id_;
  int device_type_;
  friend struct ::TableStruct_oneflow_2fcore_2fgraph_2fboxing_2fcollective_5fboxing_2eproto;
};
// -------------------------------------------------------------------

class DeviceSet :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:oneflow.boxing.collective.DeviceSet) */ {
 public:
  DeviceSet();
  virtual ~DeviceSet();

  DeviceSet(const DeviceSet& from);
  DeviceSet(DeviceSet&& from) noexcept
    : DeviceSet() {
    *this = ::std::move(from);
  }

  inline DeviceSet& operator=(const DeviceSet& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceSet& operator=(DeviceSet&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeviceSet& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeviceSet* internal_default_instance() {
    return reinterpret_cast<const DeviceSet*>(
               &_DeviceSet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DeviceSet& a, DeviceSet& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceSet* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeviceSet* New() const final {
    return CreateMaybeMessage<DeviceSet>(nullptr);
  }

  DeviceSet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeviceSet>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeviceSet& from);
  void MergeFrom(const DeviceSet& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeviceSet* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "oneflow.boxing.collective.DeviceSet";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_oneflow_2fcore_2fgraph_2fboxing_2fcollective_5fboxing_2eproto);
    return ::descriptor_table_oneflow_2fcore_2fgraph_2fboxing_2fcollective_5fboxing_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceFieldNumber = 1,
  };
  // repeated .oneflow.boxing.collective.DeviceDesc device = 1;
  int device_size() const;
  void clear_device();
  ::oneflow::boxing::collective::DeviceDesc* mutable_device(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oneflow::boxing::collective::DeviceDesc >*
      mutable_device();
  const ::oneflow::boxing::collective::DeviceDesc& device(int index) const;
  ::oneflow::boxing::collective::DeviceDesc* add_device();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oneflow::boxing::collective::DeviceDesc >&
      device() const;

  // @@protoc_insertion_point(class_scope:oneflow.boxing.collective.DeviceSet)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oneflow::boxing::collective::DeviceDesc > device_;
  friend struct ::TableStruct_oneflow_2fcore_2fgraph_2fboxing_2fcollective_5fboxing_2eproto;
};
// -------------------------------------------------------------------

class OpDesc :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:oneflow.boxing.collective.OpDesc) */ {
 public:
  OpDesc();
  virtual ~OpDesc();

  OpDesc(const OpDesc& from);
  OpDesc(OpDesc&& from) noexcept
    : OpDesc() {
    *this = ::std::move(from);
  }

  inline OpDesc& operator=(const OpDesc& from) {
    CopyFrom(from);
    return *this;
  }
  inline OpDesc& operator=(OpDesc&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OpDesc& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OpDesc* internal_default_instance() {
    return reinterpret_cast<const OpDesc*>(
               &_OpDesc_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(OpDesc& a, OpDesc& b) {
    a.Swap(&b);
  }
  inline void Swap(OpDesc* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OpDesc* New() const final {
    return CreateMaybeMessage<OpDesc>(nullptr);
  }

  OpDesc* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OpDesc>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OpDesc& from);
  void MergeFrom(const OpDesc& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OpDesc* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "oneflow.boxing.collective.OpDesc";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_oneflow_2fcore_2fgraph_2fboxing_2fcollective_5fboxing_2eproto);
    return ::descriptor_table_oneflow_2fcore_2fgraph_2fboxing_2fcollective_5fboxing_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kShapeFieldNumber = 6,
    kOpTypeFieldNumber = 2,
    kReduceMethodFieldNumber = 3,
    kRootFieldNumber = 4,
    kDataTypeFieldNumber = 5,
    kBackendFieldNumber = 8,
    kNumRanksFieldNumber = 7,
  };
  // required string name = 1;
  bool has_name() const;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // required .oneflow.ShapeProto shape = 6;
  bool has_shape() const;
  void clear_shape();
  const ::oneflow::ShapeProto& shape() const;
  ::oneflow::ShapeProto* release_shape();
  ::oneflow::ShapeProto* mutable_shape();
  void set_allocated_shape(::oneflow::ShapeProto* shape);

  // required .oneflow.boxing.collective.OpType op_type = 2;
  bool has_op_type() const;
  void clear_op_type();
  ::oneflow::boxing::collective::OpType op_type() const;
  void set_op_type(::oneflow::boxing::collective::OpType value);

  // optional .oneflow.boxing.collective.ReduceMethod reduce_method = 3;
  bool has_reduce_method() const;
  void clear_reduce_method();
  ::oneflow::boxing::collective::ReduceMethod reduce_method() const;
  void set_reduce_method(::oneflow::boxing::collective::ReduceMethod value);

  // optional int64 root = 4;
  bool has_root() const;
  void clear_root();
  ::PROTOBUF_NAMESPACE_ID::int64 root() const;
  void set_root(::PROTOBUF_NAMESPACE_ID::int64 value);

  // required .oneflow.DataType data_type = 5;
  bool has_data_type() const;
  void clear_data_type();
  ::oneflow::DataType data_type() const;
  void set_data_type(::oneflow::DataType value);

  // required .oneflow.boxing.collective.Backend backend = 8;
  bool has_backend() const;
  void clear_backend();
  ::oneflow::boxing::collective::Backend backend() const;
  void set_backend(::oneflow::boxing::collective::Backend value);

  // required int64 num_ranks = 7;
  bool has_num_ranks() const;
  void clear_num_ranks();
  ::PROTOBUF_NAMESPACE_ID::int64 num_ranks() const;
  void set_num_ranks(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:oneflow.boxing.collective.OpDesc)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::oneflow::ShapeProto* shape_;
  int op_type_;
  int reduce_method_;
  ::PROTOBUF_NAMESPACE_ID::int64 root_;
  int data_type_;
  int backend_;
  ::PROTOBUF_NAMESPACE_ID::int64 num_ranks_;
  friend struct ::TableStruct_oneflow_2fcore_2fgraph_2fboxing_2fcollective_5fboxing_2eproto;
};
// -------------------------------------------------------------------

class RequestDesc :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:oneflow.boxing.collective.RequestDesc) */ {
 public:
  RequestDesc();
  virtual ~RequestDesc();

  RequestDesc(const RequestDesc& from);
  RequestDesc(RequestDesc&& from) noexcept
    : RequestDesc() {
    *this = ::std::move(from);
  }

  inline RequestDesc& operator=(const RequestDesc& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestDesc& operator=(RequestDesc&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RequestDesc& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RequestDesc* internal_default_instance() {
    return reinterpret_cast<const RequestDesc*>(
               &_RequestDesc_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(RequestDesc& a, RequestDesc& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestDesc* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RequestDesc* New() const final {
    return CreateMaybeMessage<RequestDesc>(nullptr);
  }

  RequestDesc* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RequestDesc>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RequestDesc& from);
  void MergeFrom(const RequestDesc& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestDesc* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "oneflow.boxing.collective.RequestDesc";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_oneflow_2fcore_2fgraph_2fboxing_2fcollective_5fboxing_2eproto);
    return ::descriptor_table_oneflow_2fcore_2fgraph_2fboxing_2fcollective_5fboxing_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOpDescFieldNumber = 1,
    kDeviceSetFieldNumber = 2,
    kOrderFieldNumber = 3,
    kDependencyDepthFieldNumber = 4,
  };
  // required .oneflow.boxing.collective.OpDesc op_desc = 1;
  bool has_op_desc() const;
  void clear_op_desc();
  const ::oneflow::boxing::collective::OpDesc& op_desc() const;
  ::oneflow::boxing::collective::OpDesc* release_op_desc();
  ::oneflow::boxing::collective::OpDesc* mutable_op_desc();
  void set_allocated_op_desc(::oneflow::boxing::collective::OpDesc* op_desc);

  // required .oneflow.boxing.collective.DeviceSet device_set = 2;
  bool has_device_set() const;
  void clear_device_set();
  const ::oneflow::boxing::collective::DeviceSet& device_set() const;
  ::oneflow::boxing::collective::DeviceSet* release_device_set();
  ::oneflow::boxing::collective::DeviceSet* mutable_device_set();
  void set_allocated_device_set(::oneflow::boxing::collective::DeviceSet* device_set);

  // required int64 order = 3;
  bool has_order() const;
  void clear_order();
  ::PROTOBUF_NAMESPACE_ID::int64 order() const;
  void set_order(::PROTOBUF_NAMESPACE_ID::int64 value);

  // required int64 dependency_depth = 4;
  bool has_dependency_depth() const;
  void clear_dependency_depth();
  ::PROTOBUF_NAMESPACE_ID::int64 dependency_depth() const;
  void set_dependency_depth(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:oneflow.boxing.collective.RequestDesc)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::oneflow::boxing::collective::OpDesc* op_desc_;
  ::oneflow::boxing::collective::DeviceSet* device_set_;
  ::PROTOBUF_NAMESPACE_ID::int64 order_;
  ::PROTOBUF_NAMESPACE_ID::int64 dependency_depth_;
  friend struct ::TableStruct_oneflow_2fcore_2fgraph_2fboxing_2fcollective_5fboxing_2eproto;
};
// -------------------------------------------------------------------

class RequestSet :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:oneflow.boxing.collective.RequestSet) */ {
 public:
  RequestSet();
  virtual ~RequestSet();

  RequestSet(const RequestSet& from);
  RequestSet(RequestSet&& from) noexcept
    : RequestSet() {
    *this = ::std::move(from);
  }

  inline RequestSet& operator=(const RequestSet& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestSet& operator=(RequestSet&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RequestSet& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RequestSet* internal_default_instance() {
    return reinterpret_cast<const RequestSet*>(
               &_RequestSet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(RequestSet& a, RequestSet& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestSet* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RequestSet* New() const final {
    return CreateMaybeMessage<RequestSet>(nullptr);
  }

  RequestSet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RequestSet>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RequestSet& from);
  void MergeFrom(const RequestSet& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestSet* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "oneflow.boxing.collective.RequestSet";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_oneflow_2fcore_2fgraph_2fboxing_2fcollective_5fboxing_2eproto);
    return ::descriptor_table_oneflow_2fcore_2fgraph_2fboxing_2fcollective_5fboxing_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestFieldNumber = 1,
  };
  // repeated .oneflow.boxing.collective.RequestDesc request = 1;
  int request_size() const;
  void clear_request();
  ::oneflow::boxing::collective::RequestDesc* mutable_request(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oneflow::boxing::collective::RequestDesc >*
      mutable_request();
  const ::oneflow::boxing::collective::RequestDesc& request(int index) const;
  ::oneflow::boxing::collective::RequestDesc* add_request();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oneflow::boxing::collective::RequestDesc >&
      request() const;

  // @@protoc_insertion_point(class_scope:oneflow.boxing.collective.RequestSet)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oneflow::boxing::collective::RequestDesc > request_;
  friend struct ::TableStruct_oneflow_2fcore_2fgraph_2fboxing_2fcollective_5fboxing_2eproto;
};
// -------------------------------------------------------------------

class RankDesc :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:oneflow.boxing.collective.RankDesc) */ {
 public:
  RankDesc();
  virtual ~RankDesc();

  RankDesc(const RankDesc& from);
  RankDesc(RankDesc&& from) noexcept
    : RankDesc() {
    *this = ::std::move(from);
  }

  inline RankDesc& operator=(const RankDesc& from) {
    CopyFrom(from);
    return *this;
  }
  inline RankDesc& operator=(RankDesc&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RankDesc& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RankDesc* internal_default_instance() {
    return reinterpret_cast<const RankDesc*>(
               &_RankDesc_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(RankDesc& a, RankDesc& b) {
    a.Swap(&b);
  }
  inline void Swap(RankDesc* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RankDesc* New() const final {
    return CreateMaybeMessage<RankDesc>(nullptr);
  }

  RankDesc* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RankDesc>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RankDesc& from);
  void MergeFrom(const RankDesc& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RankDesc* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "oneflow.boxing.collective.RankDesc";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_oneflow_2fcore_2fgraph_2fboxing_2fcollective_5fboxing_2eproto);
    return ::descriptor_table_oneflow_2fcore_2fgraph_2fboxing_2fcollective_5fboxing_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOpDescFieldNumber = 1,
    kRankFieldNumber = 2,
  };
  // required .oneflow.boxing.collective.OpDesc op_desc = 1;
  bool has_op_desc() const;
  void clear_op_desc();
  const ::oneflow::boxing::collective::OpDesc& op_desc() const;
  ::oneflow::boxing::collective::OpDesc* release_op_desc();
  ::oneflow::boxing::collective::OpDesc* mutable_op_desc();
  void set_allocated_op_desc(::oneflow::boxing::collective::OpDesc* op_desc);

  // required int64 rank = 2;
  bool has_rank() const;
  void clear_rank();
  ::PROTOBUF_NAMESPACE_ID::int64 rank() const;
  void set_rank(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:oneflow.boxing.collective.RankDesc)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::oneflow::boxing::collective::OpDesc* op_desc_;
  ::PROTOBUF_NAMESPACE_ID::int64 rank_;
  friend struct ::TableStruct_oneflow_2fcore_2fgraph_2fboxing_2fcollective_5fboxing_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DeviceDesc

// required int64 machine_id = 1;
inline bool DeviceDesc::has_machine_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DeviceDesc::clear_machine_id() {
  machine_id_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DeviceDesc::machine_id() const {
  // @@protoc_insertion_point(field_get:oneflow.boxing.collective.DeviceDesc.machine_id)
  return machine_id_;
}
inline void DeviceDesc::set_machine_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  machine_id_ = value;
  // @@protoc_insertion_point(field_set:oneflow.boxing.collective.DeviceDesc.machine_id)
}

// required .oneflow.DeviceType device_type = 2;
inline bool DeviceDesc::has_device_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DeviceDesc::clear_device_type() {
  device_type_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::oneflow::DeviceType DeviceDesc::device_type() const {
  // @@protoc_insertion_point(field_get:oneflow.boxing.collective.DeviceDesc.device_type)
  return static_cast< ::oneflow::DeviceType >(device_type_);
}
inline void DeviceDesc::set_device_type(::oneflow::DeviceType value) {
  assert(::oneflow::DeviceType_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  device_type_ = value;
  // @@protoc_insertion_point(field_set:oneflow.boxing.collective.DeviceDesc.device_type)
}

// required int64 device_id = 3;
inline bool DeviceDesc::has_device_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DeviceDesc::clear_device_id() {
  device_id_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DeviceDesc::device_id() const {
  // @@protoc_insertion_point(field_get:oneflow.boxing.collective.DeviceDesc.device_id)
  return device_id_;
}
inline void DeviceDesc::set_device_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  device_id_ = value;
  // @@protoc_insertion_point(field_set:oneflow.boxing.collective.DeviceDesc.device_id)
}

// -------------------------------------------------------------------

// DeviceSet

// repeated .oneflow.boxing.collective.DeviceDesc device = 1;
inline int DeviceSet::device_size() const {
  return device_.size();
}
inline void DeviceSet::clear_device() {
  device_.Clear();
}
inline ::oneflow::boxing::collective::DeviceDesc* DeviceSet::mutable_device(int index) {
  // @@protoc_insertion_point(field_mutable:oneflow.boxing.collective.DeviceSet.device)
  return device_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oneflow::boxing::collective::DeviceDesc >*
DeviceSet::mutable_device() {
  // @@protoc_insertion_point(field_mutable_list:oneflow.boxing.collective.DeviceSet.device)
  return &device_;
}
inline const ::oneflow::boxing::collective::DeviceDesc& DeviceSet::device(int index) const {
  // @@protoc_insertion_point(field_get:oneflow.boxing.collective.DeviceSet.device)
  return device_.Get(index);
}
inline ::oneflow::boxing::collective::DeviceDesc* DeviceSet::add_device() {
  // @@protoc_insertion_point(field_add:oneflow.boxing.collective.DeviceSet.device)
  return device_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oneflow::boxing::collective::DeviceDesc >&
DeviceSet::device() const {
  // @@protoc_insertion_point(field_list:oneflow.boxing.collective.DeviceSet.device)
  return device_;
}

// -------------------------------------------------------------------

// OpDesc

// required string name = 1;
inline bool OpDesc::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OpDesc::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& OpDesc::name() const {
  // @@protoc_insertion_point(field_get:oneflow.boxing.collective.OpDesc.name)
  return name_.GetNoArena();
}
inline void OpDesc::set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:oneflow.boxing.collective.OpDesc.name)
}
inline void OpDesc::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:oneflow.boxing.collective.OpDesc.name)
}
inline void OpDesc::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:oneflow.boxing.collective.OpDesc.name)
}
inline void OpDesc::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:oneflow.boxing.collective.OpDesc.name)
}
inline std::string* OpDesc::mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:oneflow.boxing.collective.OpDesc.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* OpDesc::release_name() {
  // @@protoc_insertion_point(field_release:oneflow.boxing.collective.OpDesc.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void OpDesc::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:oneflow.boxing.collective.OpDesc.name)
}

// required .oneflow.boxing.collective.OpType op_type = 2;
inline bool OpDesc::has_op_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OpDesc::clear_op_type() {
  op_type_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::oneflow::boxing::collective::OpType OpDesc::op_type() const {
  // @@protoc_insertion_point(field_get:oneflow.boxing.collective.OpDesc.op_type)
  return static_cast< ::oneflow::boxing::collective::OpType >(op_type_);
}
inline void OpDesc::set_op_type(::oneflow::boxing::collective::OpType value) {
  assert(::oneflow::boxing::collective::OpType_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  op_type_ = value;
  // @@protoc_insertion_point(field_set:oneflow.boxing.collective.OpDesc.op_type)
}

// optional .oneflow.boxing.collective.ReduceMethod reduce_method = 3;
inline bool OpDesc::has_reduce_method() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void OpDesc::clear_reduce_method() {
  reduce_method_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::oneflow::boxing::collective::ReduceMethod OpDesc::reduce_method() const {
  // @@protoc_insertion_point(field_get:oneflow.boxing.collective.OpDesc.reduce_method)
  return static_cast< ::oneflow::boxing::collective::ReduceMethod >(reduce_method_);
}
inline void OpDesc::set_reduce_method(::oneflow::boxing::collective::ReduceMethod value) {
  assert(::oneflow::boxing::collective::ReduceMethod_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  reduce_method_ = value;
  // @@protoc_insertion_point(field_set:oneflow.boxing.collective.OpDesc.reduce_method)
}

// optional int64 root = 4;
inline bool OpDesc::has_root() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void OpDesc::clear_root() {
  root_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 OpDesc::root() const {
  // @@protoc_insertion_point(field_get:oneflow.boxing.collective.OpDesc.root)
  return root_;
}
inline void OpDesc::set_root(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000010u;
  root_ = value;
  // @@protoc_insertion_point(field_set:oneflow.boxing.collective.OpDesc.root)
}

// required .oneflow.DataType data_type = 5;
inline bool OpDesc::has_data_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void OpDesc::clear_data_type() {
  data_type_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::oneflow::DataType OpDesc::data_type() const {
  // @@protoc_insertion_point(field_get:oneflow.boxing.collective.OpDesc.data_type)
  return static_cast< ::oneflow::DataType >(data_type_);
}
inline void OpDesc::set_data_type(::oneflow::DataType value) {
  assert(::oneflow::DataType_IsValid(value));
  _has_bits_[0] |= 0x00000020u;
  data_type_ = value;
  // @@protoc_insertion_point(field_set:oneflow.boxing.collective.OpDesc.data_type)
}

// required .oneflow.ShapeProto shape = 6;
inline bool OpDesc::has_shape() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::oneflow::ShapeProto& OpDesc::shape() const {
  const ::oneflow::ShapeProto* p = shape_;
  // @@protoc_insertion_point(field_get:oneflow.boxing.collective.OpDesc.shape)
  return p != nullptr ? *p : *reinterpret_cast<const ::oneflow::ShapeProto*>(
      &::oneflow::_ShapeProto_default_instance_);
}
inline ::oneflow::ShapeProto* OpDesc::release_shape() {
  // @@protoc_insertion_point(field_release:oneflow.boxing.collective.OpDesc.shape)
  _has_bits_[0] &= ~0x00000002u;
  ::oneflow::ShapeProto* temp = shape_;
  shape_ = nullptr;
  return temp;
}
inline ::oneflow::ShapeProto* OpDesc::mutable_shape() {
  _has_bits_[0] |= 0x00000002u;
  if (shape_ == nullptr) {
    auto* p = CreateMaybeMessage<::oneflow::ShapeProto>(GetArenaNoVirtual());
    shape_ = p;
  }
  // @@protoc_insertion_point(field_mutable:oneflow.boxing.collective.OpDesc.shape)
  return shape_;
}
inline void OpDesc::set_allocated_shape(::oneflow::ShapeProto* shape) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(shape_);
  }
  if (shape) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      shape = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, shape, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  shape_ = shape;
  // @@protoc_insertion_point(field_set_allocated:oneflow.boxing.collective.OpDesc.shape)
}

// required int64 num_ranks = 7;
inline bool OpDesc::has_num_ranks() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void OpDesc::clear_num_ranks() {
  num_ranks_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 OpDesc::num_ranks() const {
  // @@protoc_insertion_point(field_get:oneflow.boxing.collective.OpDesc.num_ranks)
  return num_ranks_;
}
inline void OpDesc::set_num_ranks(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000080u;
  num_ranks_ = value;
  // @@protoc_insertion_point(field_set:oneflow.boxing.collective.OpDesc.num_ranks)
}

// required .oneflow.boxing.collective.Backend backend = 8;
inline bool OpDesc::has_backend() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void OpDesc::clear_backend() {
  backend_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::oneflow::boxing::collective::Backend OpDesc::backend() const {
  // @@protoc_insertion_point(field_get:oneflow.boxing.collective.OpDesc.backend)
  return static_cast< ::oneflow::boxing::collective::Backend >(backend_);
}
inline void OpDesc::set_backend(::oneflow::boxing::collective::Backend value) {
  assert(::oneflow::boxing::collective::Backend_IsValid(value));
  _has_bits_[0] |= 0x00000040u;
  backend_ = value;
  // @@protoc_insertion_point(field_set:oneflow.boxing.collective.OpDesc.backend)
}

// -------------------------------------------------------------------

// RequestDesc

// required .oneflow.boxing.collective.OpDesc op_desc = 1;
inline bool RequestDesc::has_op_desc() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RequestDesc::clear_op_desc() {
  if (op_desc_ != nullptr) op_desc_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::oneflow::boxing::collective::OpDesc& RequestDesc::op_desc() const {
  const ::oneflow::boxing::collective::OpDesc* p = op_desc_;
  // @@protoc_insertion_point(field_get:oneflow.boxing.collective.RequestDesc.op_desc)
  return p != nullptr ? *p : *reinterpret_cast<const ::oneflow::boxing::collective::OpDesc*>(
      &::oneflow::boxing::collective::_OpDesc_default_instance_);
}
inline ::oneflow::boxing::collective::OpDesc* RequestDesc::release_op_desc() {
  // @@protoc_insertion_point(field_release:oneflow.boxing.collective.RequestDesc.op_desc)
  _has_bits_[0] &= ~0x00000001u;
  ::oneflow::boxing::collective::OpDesc* temp = op_desc_;
  op_desc_ = nullptr;
  return temp;
}
inline ::oneflow::boxing::collective::OpDesc* RequestDesc::mutable_op_desc() {
  _has_bits_[0] |= 0x00000001u;
  if (op_desc_ == nullptr) {
    auto* p = CreateMaybeMessage<::oneflow::boxing::collective::OpDesc>(GetArenaNoVirtual());
    op_desc_ = p;
  }
  // @@protoc_insertion_point(field_mutable:oneflow.boxing.collective.RequestDesc.op_desc)
  return op_desc_;
}
inline void RequestDesc::set_allocated_op_desc(::oneflow::boxing::collective::OpDesc* op_desc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete op_desc_;
  }
  if (op_desc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      op_desc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, op_desc, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  op_desc_ = op_desc;
  // @@protoc_insertion_point(field_set_allocated:oneflow.boxing.collective.RequestDesc.op_desc)
}

// required .oneflow.boxing.collective.DeviceSet device_set = 2;
inline bool RequestDesc::has_device_set() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RequestDesc::clear_device_set() {
  if (device_set_ != nullptr) device_set_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::oneflow::boxing::collective::DeviceSet& RequestDesc::device_set() const {
  const ::oneflow::boxing::collective::DeviceSet* p = device_set_;
  // @@protoc_insertion_point(field_get:oneflow.boxing.collective.RequestDesc.device_set)
  return p != nullptr ? *p : *reinterpret_cast<const ::oneflow::boxing::collective::DeviceSet*>(
      &::oneflow::boxing::collective::_DeviceSet_default_instance_);
}
inline ::oneflow::boxing::collective::DeviceSet* RequestDesc::release_device_set() {
  // @@protoc_insertion_point(field_release:oneflow.boxing.collective.RequestDesc.device_set)
  _has_bits_[0] &= ~0x00000002u;
  ::oneflow::boxing::collective::DeviceSet* temp = device_set_;
  device_set_ = nullptr;
  return temp;
}
inline ::oneflow::boxing::collective::DeviceSet* RequestDesc::mutable_device_set() {
  _has_bits_[0] |= 0x00000002u;
  if (device_set_ == nullptr) {
    auto* p = CreateMaybeMessage<::oneflow::boxing::collective::DeviceSet>(GetArenaNoVirtual());
    device_set_ = p;
  }
  // @@protoc_insertion_point(field_mutable:oneflow.boxing.collective.RequestDesc.device_set)
  return device_set_;
}
inline void RequestDesc::set_allocated_device_set(::oneflow::boxing::collective::DeviceSet* device_set) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete device_set_;
  }
  if (device_set) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      device_set = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, device_set, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  device_set_ = device_set;
  // @@protoc_insertion_point(field_set_allocated:oneflow.boxing.collective.RequestDesc.device_set)
}

// required int64 order = 3;
inline bool RequestDesc::has_order() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RequestDesc::clear_order() {
  order_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RequestDesc::order() const {
  // @@protoc_insertion_point(field_get:oneflow.boxing.collective.RequestDesc.order)
  return order_;
}
inline void RequestDesc::set_order(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  order_ = value;
  // @@protoc_insertion_point(field_set:oneflow.boxing.collective.RequestDesc.order)
}

// required int64 dependency_depth = 4;
inline bool RequestDesc::has_dependency_depth() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RequestDesc::clear_dependency_depth() {
  dependency_depth_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RequestDesc::dependency_depth() const {
  // @@protoc_insertion_point(field_get:oneflow.boxing.collective.RequestDesc.dependency_depth)
  return dependency_depth_;
}
inline void RequestDesc::set_dependency_depth(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000008u;
  dependency_depth_ = value;
  // @@protoc_insertion_point(field_set:oneflow.boxing.collective.RequestDesc.dependency_depth)
}

// -------------------------------------------------------------------

// RequestSet

// repeated .oneflow.boxing.collective.RequestDesc request = 1;
inline int RequestSet::request_size() const {
  return request_.size();
}
inline void RequestSet::clear_request() {
  request_.Clear();
}
inline ::oneflow::boxing::collective::RequestDesc* RequestSet::mutable_request(int index) {
  // @@protoc_insertion_point(field_mutable:oneflow.boxing.collective.RequestSet.request)
  return request_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oneflow::boxing::collective::RequestDesc >*
RequestSet::mutable_request() {
  // @@protoc_insertion_point(field_mutable_list:oneflow.boxing.collective.RequestSet.request)
  return &request_;
}
inline const ::oneflow::boxing::collective::RequestDesc& RequestSet::request(int index) const {
  // @@protoc_insertion_point(field_get:oneflow.boxing.collective.RequestSet.request)
  return request_.Get(index);
}
inline ::oneflow::boxing::collective::RequestDesc* RequestSet::add_request() {
  // @@protoc_insertion_point(field_add:oneflow.boxing.collective.RequestSet.request)
  return request_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oneflow::boxing::collective::RequestDesc >&
RequestSet::request() const {
  // @@protoc_insertion_point(field_list:oneflow.boxing.collective.RequestSet.request)
  return request_;
}

// -------------------------------------------------------------------

// RankDesc

// required .oneflow.boxing.collective.OpDesc op_desc = 1;
inline bool RankDesc::has_op_desc() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RankDesc::clear_op_desc() {
  if (op_desc_ != nullptr) op_desc_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::oneflow::boxing::collective::OpDesc& RankDesc::op_desc() const {
  const ::oneflow::boxing::collective::OpDesc* p = op_desc_;
  // @@protoc_insertion_point(field_get:oneflow.boxing.collective.RankDesc.op_desc)
  return p != nullptr ? *p : *reinterpret_cast<const ::oneflow::boxing::collective::OpDesc*>(
      &::oneflow::boxing::collective::_OpDesc_default_instance_);
}
inline ::oneflow::boxing::collective::OpDesc* RankDesc::release_op_desc() {
  // @@protoc_insertion_point(field_release:oneflow.boxing.collective.RankDesc.op_desc)
  _has_bits_[0] &= ~0x00000001u;
  ::oneflow::boxing::collective::OpDesc* temp = op_desc_;
  op_desc_ = nullptr;
  return temp;
}
inline ::oneflow::boxing::collective::OpDesc* RankDesc::mutable_op_desc() {
  _has_bits_[0] |= 0x00000001u;
  if (op_desc_ == nullptr) {
    auto* p = CreateMaybeMessage<::oneflow::boxing::collective::OpDesc>(GetArenaNoVirtual());
    op_desc_ = p;
  }
  // @@protoc_insertion_point(field_mutable:oneflow.boxing.collective.RankDesc.op_desc)
  return op_desc_;
}
inline void RankDesc::set_allocated_op_desc(::oneflow::boxing::collective::OpDesc* op_desc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete op_desc_;
  }
  if (op_desc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      op_desc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, op_desc, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  op_desc_ = op_desc;
  // @@protoc_insertion_point(field_set_allocated:oneflow.boxing.collective.RankDesc.op_desc)
}

// required int64 rank = 2;
inline bool RankDesc::has_rank() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RankDesc::clear_rank() {
  rank_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RankDesc::rank() const {
  // @@protoc_insertion_point(field_get:oneflow.boxing.collective.RankDesc.rank)
  return rank_;
}
inline void RankDesc::set_rank(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  rank_ = value;
  // @@protoc_insertion_point(field_set:oneflow.boxing.collective.RankDesc.rank)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace collective
}  // namespace boxing
}  // namespace oneflow

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::oneflow::boxing::collective::OpType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::oneflow::boxing::collective::OpType>() {
  return ::oneflow::boxing::collective::OpType_descriptor();
}
template <> struct is_proto_enum< ::oneflow::boxing::collective::ReduceMethod> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::oneflow::boxing::collective::ReduceMethod>() {
  return ::oneflow::boxing::collective::ReduceMethod_descriptor();
}
template <> struct is_proto_enum< ::oneflow::boxing::collective::Backend> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::oneflow::boxing::collective::Backend>() {
  return ::oneflow::boxing::collective::Backend_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_oneflow_2fcore_2fgraph_2fboxing_2fcollective_5fboxing_2eproto
