// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: oneflow/core/job/distribute_hirarchy.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_oneflow_2fcore_2fjob_2fdistribute_5fhirarchy_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_oneflow_2fcore_2fjob_2fdistribute_5fhirarchy_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "oneflow/core/job/sbp_parallel.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_oneflow_2fcore_2fjob_2fdistribute_5fhirarchy_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_oneflow_2fcore_2fjob_2fdistribute_5fhirarchy_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_oneflow_2fcore_2fjob_2fdistribute_5fhirarchy_2eproto;
namespace oneflow {
class DistributeDim;
class DistributeDimDefaultTypeInternal;
extern DistributeDimDefaultTypeInternal _DistributeDim_default_instance_;
class DistributeHirarchy;
class DistributeHirarchyDefaultTypeInternal;
extern DistributeHirarchyDefaultTypeInternal _DistributeHirarchy_default_instance_;
}  // namespace oneflow
PROTOBUF_NAMESPACE_OPEN
template<> ::oneflow::DistributeDim* Arena::CreateMaybeMessage<::oneflow::DistributeDim>(Arena*);
template<> ::oneflow::DistributeHirarchy* Arena::CreateMaybeMessage<::oneflow::DistributeHirarchy>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace oneflow {

enum DistributeType : int {
  kInvalidDistributeType = 0,
  kSpaceDistribute = 2,
  kTimeDistribute = 3
};
bool DistributeType_IsValid(int value);
constexpr DistributeType DistributeType_MIN = kInvalidDistributeType;
constexpr DistributeType DistributeType_MAX = kTimeDistribute;
constexpr int DistributeType_ARRAYSIZE = DistributeType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DistributeType_descriptor();
template<typename T>
inline const std::string& DistributeType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DistributeType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DistributeType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DistributeType_descriptor(), enum_t_value);
}
inline bool DistributeType_Parse(
    const std::string& name, DistributeType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DistributeType>(
    DistributeType_descriptor(), name, value);
}
// ===================================================================

class DistributeDim :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:oneflow.DistributeDim) */ {
 public:
  DistributeDim();
  virtual ~DistributeDim();

  DistributeDim(const DistributeDim& from);
  DistributeDim(DistributeDim&& from) noexcept
    : DistributeDim() {
    *this = ::std::move(from);
  }

  inline DistributeDim& operator=(const DistributeDim& from) {
    CopyFrom(from);
    return *this;
  }
  inline DistributeDim& operator=(DistributeDim&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DistributeDim& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DistributeDim* internal_default_instance() {
    return reinterpret_cast<const DistributeDim*>(
               &_DistributeDim_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DistributeDim& a, DistributeDim& b) {
    a.Swap(&b);
  }
  inline void Swap(DistributeDim* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DistributeDim* New() const final {
    return CreateMaybeMessage<DistributeDim>(nullptr);
  }

  DistributeDim* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DistributeDim>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DistributeDim& from);
  void MergeFrom(const DistributeDim& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DistributeDim* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "oneflow.DistributeDim";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_oneflow_2fcore_2fjob_2fdistribute_5fhirarchy_2eproto);
    return ::descriptor_table_oneflow_2fcore_2fjob_2fdistribute_5fhirarchy_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSbpParallelFieldNumber = 2,
    kDistributeNumFieldNumber = 3,
    kDistributeTypeFieldNumber = 1,
  };
  // required .oneflow.SbpParallel sbp_parallel = 2;
  bool has_sbp_parallel() const;
  void clear_sbp_parallel();
  const ::oneflow::SbpParallel& sbp_parallel() const;
  ::oneflow::SbpParallel* release_sbp_parallel();
  ::oneflow::SbpParallel* mutable_sbp_parallel();
  void set_allocated_sbp_parallel(::oneflow::SbpParallel* sbp_parallel);

  // required int64 distribute_num = 3;
  bool has_distribute_num() const;
  void clear_distribute_num();
  ::PROTOBUF_NAMESPACE_ID::int64 distribute_num() const;
  void set_distribute_num(::PROTOBUF_NAMESPACE_ID::int64 value);

  // required .oneflow.DistributeType distribute_type = 1;
  bool has_distribute_type() const;
  void clear_distribute_type();
  ::oneflow::DistributeType distribute_type() const;
  void set_distribute_type(::oneflow::DistributeType value);

  // @@protoc_insertion_point(class_scope:oneflow.DistributeDim)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::oneflow::SbpParallel* sbp_parallel_;
  ::PROTOBUF_NAMESPACE_ID::int64 distribute_num_;
  int distribute_type_;
  friend struct ::TableStruct_oneflow_2fcore_2fjob_2fdistribute_5fhirarchy_2eproto;
};
// -------------------------------------------------------------------

class DistributeHirarchy :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:oneflow.DistributeHirarchy) */ {
 public:
  DistributeHirarchy();
  virtual ~DistributeHirarchy();

  DistributeHirarchy(const DistributeHirarchy& from);
  DistributeHirarchy(DistributeHirarchy&& from) noexcept
    : DistributeHirarchy() {
    *this = ::std::move(from);
  }

  inline DistributeHirarchy& operator=(const DistributeHirarchy& from) {
    CopyFrom(from);
    return *this;
  }
  inline DistributeHirarchy& operator=(DistributeHirarchy&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DistributeHirarchy& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DistributeHirarchy* internal_default_instance() {
    return reinterpret_cast<const DistributeHirarchy*>(
               &_DistributeHirarchy_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DistributeHirarchy& a, DistributeHirarchy& b) {
    a.Swap(&b);
  }
  inline void Swap(DistributeHirarchy* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DistributeHirarchy* New() const final {
    return CreateMaybeMessage<DistributeHirarchy>(nullptr);
  }

  DistributeHirarchy* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DistributeHirarchy>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DistributeHirarchy& from);
  void MergeFrom(const DistributeHirarchy& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DistributeHirarchy* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "oneflow.DistributeHirarchy";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_oneflow_2fcore_2fjob_2fdistribute_5fhirarchy_2eproto);
    return ::descriptor_table_oneflow_2fcore_2fjob_2fdistribute_5fhirarchy_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDimFieldNumber = 1,
  };
  // repeated .oneflow.DistributeDim dim = 1;
  int dim_size() const;
  void clear_dim();
  ::oneflow::DistributeDim* mutable_dim(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oneflow::DistributeDim >*
      mutable_dim();
  const ::oneflow::DistributeDim& dim(int index) const;
  ::oneflow::DistributeDim* add_dim();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oneflow::DistributeDim >&
      dim() const;

  // @@protoc_insertion_point(class_scope:oneflow.DistributeHirarchy)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oneflow::DistributeDim > dim_;
  friend struct ::TableStruct_oneflow_2fcore_2fjob_2fdistribute_5fhirarchy_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DistributeDim

// required .oneflow.DistributeType distribute_type = 1;
inline bool DistributeDim::has_distribute_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DistributeDim::clear_distribute_type() {
  distribute_type_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::oneflow::DistributeType DistributeDim::distribute_type() const {
  // @@protoc_insertion_point(field_get:oneflow.DistributeDim.distribute_type)
  return static_cast< ::oneflow::DistributeType >(distribute_type_);
}
inline void DistributeDim::set_distribute_type(::oneflow::DistributeType value) {
  assert(::oneflow::DistributeType_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  distribute_type_ = value;
  // @@protoc_insertion_point(field_set:oneflow.DistributeDim.distribute_type)
}

// required .oneflow.SbpParallel sbp_parallel = 2;
inline bool DistributeDim::has_sbp_parallel() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::oneflow::SbpParallel& DistributeDim::sbp_parallel() const {
  const ::oneflow::SbpParallel* p = sbp_parallel_;
  // @@protoc_insertion_point(field_get:oneflow.DistributeDim.sbp_parallel)
  return p != nullptr ? *p : *reinterpret_cast<const ::oneflow::SbpParallel*>(
      &::oneflow::_SbpParallel_default_instance_);
}
inline ::oneflow::SbpParallel* DistributeDim::release_sbp_parallel() {
  // @@protoc_insertion_point(field_release:oneflow.DistributeDim.sbp_parallel)
  _has_bits_[0] &= ~0x00000001u;
  ::oneflow::SbpParallel* temp = sbp_parallel_;
  sbp_parallel_ = nullptr;
  return temp;
}
inline ::oneflow::SbpParallel* DistributeDim::mutable_sbp_parallel() {
  _has_bits_[0] |= 0x00000001u;
  if (sbp_parallel_ == nullptr) {
    auto* p = CreateMaybeMessage<::oneflow::SbpParallel>(GetArenaNoVirtual());
    sbp_parallel_ = p;
  }
  // @@protoc_insertion_point(field_mutable:oneflow.DistributeDim.sbp_parallel)
  return sbp_parallel_;
}
inline void DistributeDim::set_allocated_sbp_parallel(::oneflow::SbpParallel* sbp_parallel) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(sbp_parallel_);
  }
  if (sbp_parallel) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      sbp_parallel = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sbp_parallel, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  sbp_parallel_ = sbp_parallel;
  // @@protoc_insertion_point(field_set_allocated:oneflow.DistributeDim.sbp_parallel)
}

// required int64 distribute_num = 3;
inline bool DistributeDim::has_distribute_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DistributeDim::clear_distribute_num() {
  distribute_num_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DistributeDim::distribute_num() const {
  // @@protoc_insertion_point(field_get:oneflow.DistributeDim.distribute_num)
  return distribute_num_;
}
inline void DistributeDim::set_distribute_num(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  distribute_num_ = value;
  // @@protoc_insertion_point(field_set:oneflow.DistributeDim.distribute_num)
}

// -------------------------------------------------------------------

// DistributeHirarchy

// repeated .oneflow.DistributeDim dim = 1;
inline int DistributeHirarchy::dim_size() const {
  return dim_.size();
}
inline void DistributeHirarchy::clear_dim() {
  dim_.Clear();
}
inline ::oneflow::DistributeDim* DistributeHirarchy::mutable_dim(int index) {
  // @@protoc_insertion_point(field_mutable:oneflow.DistributeHirarchy.dim)
  return dim_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oneflow::DistributeDim >*
DistributeHirarchy::mutable_dim() {
  // @@protoc_insertion_point(field_mutable_list:oneflow.DistributeHirarchy.dim)
  return &dim_;
}
inline const ::oneflow::DistributeDim& DistributeHirarchy::dim(int index) const {
  // @@protoc_insertion_point(field_get:oneflow.DistributeHirarchy.dim)
  return dim_.Get(index);
}
inline ::oneflow::DistributeDim* DistributeHirarchy::add_dim() {
  // @@protoc_insertion_point(field_add:oneflow.DistributeHirarchy.dim)
  return dim_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oneflow::DistributeDim >&
DistributeHirarchy::dim() const {
  // @@protoc_insertion_point(field_list:oneflow.DistributeHirarchy.dim)
  return dim_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace oneflow

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::oneflow::DistributeType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::oneflow::DistributeType>() {
  return ::oneflow::DistributeType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_oneflow_2fcore_2fjob_2fdistribute_5fhirarchy_2eproto
