// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: oneflow/core/job/resource.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_oneflow_2fcore_2fjob_2fresource_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_oneflow_2fcore_2fjob_2fresource_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "oneflow/core/common/device_type.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_oneflow_2fcore_2fjob_2fresource_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_oneflow_2fcore_2fjob_2fresource_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_oneflow_2fcore_2fjob_2fresource_2eproto;
namespace oneflow {
class CollectiveBoxingConf;
class CollectiveBoxingConfDefaultTypeInternal;
extern CollectiveBoxingConfDefaultTypeInternal _CollectiveBoxingConf_default_instance_;
class CudnnConfig;
class CudnnConfigDefaultTypeInternal;
extern CudnnConfigDefaultTypeInternal _CudnnConfig_default_instance_;
class Resource;
class ResourceDefaultTypeInternal;
extern ResourceDefaultTypeInternal _Resource_default_instance_;
}  // namespace oneflow
PROTOBUF_NAMESPACE_OPEN
template<> ::oneflow::CollectiveBoxingConf* Arena::CreateMaybeMessage<::oneflow::CollectiveBoxingConf>(Arena*);
template<> ::oneflow::CudnnConfig* Arena::CreateMaybeMessage<::oneflow::CudnnConfig>(Arena*);
template<> ::oneflow::Resource* Arena::CreateMaybeMessage<::oneflow::Resource>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace oneflow {

// ===================================================================

class CollectiveBoxingConf :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:oneflow.CollectiveBoxingConf) */ {
 public:
  CollectiveBoxingConf();
  virtual ~CollectiveBoxingConf();

  CollectiveBoxingConf(const CollectiveBoxingConf& from);
  CollectiveBoxingConf(CollectiveBoxingConf&& from) noexcept
    : CollectiveBoxingConf() {
    *this = ::std::move(from);
  }

  inline CollectiveBoxingConf& operator=(const CollectiveBoxingConf& from) {
    CopyFrom(from);
    return *this;
  }
  inline CollectiveBoxingConf& operator=(CollectiveBoxingConf&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CollectiveBoxingConf& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CollectiveBoxingConf* internal_default_instance() {
    return reinterpret_cast<const CollectiveBoxingConf*>(
               &_CollectiveBoxingConf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CollectiveBoxingConf& a, CollectiveBoxingConf& b) {
    a.Swap(&b);
  }
  inline void Swap(CollectiveBoxingConf* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CollectiveBoxingConf* New() const final {
    return CreateMaybeMessage<CollectiveBoxingConf>(nullptr);
  }

  CollectiveBoxingConf* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CollectiveBoxingConf>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CollectiveBoxingConf& from);
  void MergeFrom(const CollectiveBoxingConf& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CollectiveBoxingConf* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "oneflow.CollectiveBoxingConf";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_oneflow_2fcore_2fjob_2fresource_2eproto);
    return ::descriptor_table_oneflow_2fcore_2fjob_2fresource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNcclFusionReduceScatterFieldNumber = 104,
    kNcclFusionAllGatherFieldNumber = 105,
    kNcclFusionAllReduceUseBufferFieldNumber = 108,
    kNcclEnableAllToAllFieldNumber = 110,
    kNcclEnableMixedFusionFieldNumber = 111,
    kEnableFusionFieldNumber = 1,
    kNcclFusionAllReduceFieldNumber = 103,
    kNcclFusionReduceFieldNumber = 106,
    kNcclFusionBroadcastFieldNumber = 107,
    kNumCallbackThreadsFieldNumber = 2,
    kNcclNumStreamsFieldNumber = 101,
    kNcclFusionThresholdMbFieldNumber = 102,
    kNcclFusionMaxOpsFieldNumber = 109,
  };
  // optional bool nccl_fusion_reduce_scatter = 104 [default = false];
  bool has_nccl_fusion_reduce_scatter() const;
  void clear_nccl_fusion_reduce_scatter();
  bool nccl_fusion_reduce_scatter() const;
  void set_nccl_fusion_reduce_scatter(bool value);

  // optional bool nccl_fusion_all_gather = 105 [default = false];
  bool has_nccl_fusion_all_gather() const;
  void clear_nccl_fusion_all_gather();
  bool nccl_fusion_all_gather() const;
  void set_nccl_fusion_all_gather(bool value);

  // optional bool nccl_fusion_all_reduce_use_buffer = 108 [default = false];
  bool has_nccl_fusion_all_reduce_use_buffer() const;
  void clear_nccl_fusion_all_reduce_use_buffer();
  bool nccl_fusion_all_reduce_use_buffer() const;
  void set_nccl_fusion_all_reduce_use_buffer(bool value);

  // optional bool nccl_enable_all_to_all = 110 [default = false];
  bool has_nccl_enable_all_to_all() const;
  void clear_nccl_enable_all_to_all();
  bool nccl_enable_all_to_all() const;
  void set_nccl_enable_all_to_all(bool value);

  // optional bool nccl_enable_mixed_fusion = 111 [default = false];
  bool has_nccl_enable_mixed_fusion() const;
  void clear_nccl_enable_mixed_fusion();
  bool nccl_enable_mixed_fusion() const;
  void set_nccl_enable_mixed_fusion(bool value);

  // optional bool enable_fusion = 1 [default = true];
  bool has_enable_fusion() const;
  void clear_enable_fusion();
  bool enable_fusion() const;
  void set_enable_fusion(bool value);

  // optional bool nccl_fusion_all_reduce = 103 [default = true];
  bool has_nccl_fusion_all_reduce() const;
  void clear_nccl_fusion_all_reduce();
  bool nccl_fusion_all_reduce() const;
  void set_nccl_fusion_all_reduce(bool value);

  // optional bool nccl_fusion_reduce = 106 [default = true];
  bool has_nccl_fusion_reduce() const;
  void clear_nccl_fusion_reduce();
  bool nccl_fusion_reduce() const;
  void set_nccl_fusion_reduce(bool value);

  // optional bool nccl_fusion_broadcast = 107 [default = true];
  bool has_nccl_fusion_broadcast() const;
  void clear_nccl_fusion_broadcast();
  bool nccl_fusion_broadcast() const;
  void set_nccl_fusion_broadcast(bool value);

  // optional int64 num_callback_threads = 2 [default = 4];
  bool has_num_callback_threads() const;
  void clear_num_callback_threads();
  ::PROTOBUF_NAMESPACE_ID::int64 num_callback_threads() const;
  void set_num_callback_threads(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 nccl_num_streams = 101 [default = 1];
  bool has_nccl_num_streams() const;
  void clear_nccl_num_streams();
  ::PROTOBUF_NAMESPACE_ID::int64 nccl_num_streams() const;
  void set_nccl_num_streams(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 nccl_fusion_threshold_mb = 102 [default = 16];
  bool has_nccl_fusion_threshold_mb() const;
  void clear_nccl_fusion_threshold_mb();
  ::PROTOBUF_NAMESPACE_ID::int64 nccl_fusion_threshold_mb() const;
  void set_nccl_fusion_threshold_mb(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 nccl_fusion_max_ops = 109 [default = 64];
  bool has_nccl_fusion_max_ops() const;
  void clear_nccl_fusion_max_ops();
  ::PROTOBUF_NAMESPACE_ID::int64 nccl_fusion_max_ops() const;
  void set_nccl_fusion_max_ops(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:oneflow.CollectiveBoxingConf)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool nccl_fusion_reduce_scatter_;
  bool nccl_fusion_all_gather_;
  bool nccl_fusion_all_reduce_use_buffer_;
  bool nccl_enable_all_to_all_;
  bool nccl_enable_mixed_fusion_;
  bool enable_fusion_;
  bool nccl_fusion_all_reduce_;
  bool nccl_fusion_reduce_;
  bool nccl_fusion_broadcast_;
  ::PROTOBUF_NAMESPACE_ID::int64 num_callback_threads_;
  ::PROTOBUF_NAMESPACE_ID::int64 nccl_num_streams_;
  ::PROTOBUF_NAMESPACE_ID::int64 nccl_fusion_threshold_mb_;
  ::PROTOBUF_NAMESPACE_ID::int64 nccl_fusion_max_ops_;
  friend struct ::TableStruct_oneflow_2fcore_2fjob_2fresource_2eproto;
};
// -------------------------------------------------------------------

class CudnnConfig :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:oneflow.CudnnConfig) */ {
 public:
  CudnnConfig();
  virtual ~CudnnConfig();

  CudnnConfig(const CudnnConfig& from);
  CudnnConfig(CudnnConfig&& from) noexcept
    : CudnnConfig() {
    *this = ::std::move(from);
  }

  inline CudnnConfig& operator=(const CudnnConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline CudnnConfig& operator=(CudnnConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CudnnConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CudnnConfig* internal_default_instance() {
    return reinterpret_cast<const CudnnConfig*>(
               &_CudnnConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CudnnConfig& a, CudnnConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(CudnnConfig* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CudnnConfig* New() const final {
    return CreateMaybeMessage<CudnnConfig>(nullptr);
  }

  CudnnConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CudnnConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CudnnConfig& from);
  void MergeFrom(const CudnnConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CudnnConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "oneflow.CudnnConfig";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_oneflow_2fcore_2fjob_2fresource_2eproto);
    return ::descriptor_table_oneflow_2fcore_2fjob_2fresource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCudnnConvForceFwdAlgoFieldNumber = 3,
    kCudnnConvForceBwdDataAlgoFieldNumber = 4,
    kCudnnConvForceBwdFilterAlgoFieldNumber = 5,
    kCudnnConvUseDeterministicAlgoOnlyFieldNumber = 7,
    kEnableCudnnFusedNormalizationAddReluFieldNumber = 8,
    kEnableCudnnFieldNumber = 1,
    kCudnnConvHeuristicSearchAlgoFieldNumber = 6,
    kCudnnConvEnablePseudoHalfFieldNumber = 9,
    kCudnnBufLimitMbyteFieldNumber = 2,
  };
  // optional int32 cudnn_conv_force_fwd_algo = 3;
  bool has_cudnn_conv_force_fwd_algo() const;
  void clear_cudnn_conv_force_fwd_algo();
  ::PROTOBUF_NAMESPACE_ID::int32 cudnn_conv_force_fwd_algo() const;
  void set_cudnn_conv_force_fwd_algo(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 cudnn_conv_force_bwd_data_algo = 4;
  bool has_cudnn_conv_force_bwd_data_algo() const;
  void clear_cudnn_conv_force_bwd_data_algo();
  ::PROTOBUF_NAMESPACE_ID::int32 cudnn_conv_force_bwd_data_algo() const;
  void set_cudnn_conv_force_bwd_data_algo(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 cudnn_conv_force_bwd_filter_algo = 5;
  bool has_cudnn_conv_force_bwd_filter_algo() const;
  void clear_cudnn_conv_force_bwd_filter_algo();
  ::PROTOBUF_NAMESPACE_ID::int32 cudnn_conv_force_bwd_filter_algo() const;
  void set_cudnn_conv_force_bwd_filter_algo(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional bool cudnn_conv_use_deterministic_algo_only = 7 [default = false];
  bool has_cudnn_conv_use_deterministic_algo_only() const;
  void clear_cudnn_conv_use_deterministic_algo_only();
  bool cudnn_conv_use_deterministic_algo_only() const;
  void set_cudnn_conv_use_deterministic_algo_only(bool value);

  // optional bool enable_cudnn_fused_normalization_add_relu = 8;
  bool has_enable_cudnn_fused_normalization_add_relu() const;
  void clear_enable_cudnn_fused_normalization_add_relu();
  bool enable_cudnn_fused_normalization_add_relu() const;
  void set_enable_cudnn_fused_normalization_add_relu(bool value);

  // optional bool enable_cudnn = 1 [default = true];
  bool has_enable_cudnn() const;
  void clear_enable_cudnn();
  bool enable_cudnn() const;
  void set_enable_cudnn(bool value);

  // optional bool cudnn_conv_heuristic_search_algo = 6 [default = true];
  bool has_cudnn_conv_heuristic_search_algo() const;
  void clear_cudnn_conv_heuristic_search_algo();
  bool cudnn_conv_heuristic_search_algo() const;
  void set_cudnn_conv_heuristic_search_algo(bool value);

  // optional bool cudnn_conv_enable_pseudo_half = 9 [default = true];
  bool has_cudnn_conv_enable_pseudo_half() const;
  void clear_cudnn_conv_enable_pseudo_half();
  bool cudnn_conv_enable_pseudo_half() const;
  void set_cudnn_conv_enable_pseudo_half(bool value);

  // optional int64 cudnn_buf_limit_mbyte = 2 [default = 1024];
  bool has_cudnn_buf_limit_mbyte() const;
  void clear_cudnn_buf_limit_mbyte();
  ::PROTOBUF_NAMESPACE_ID::int64 cudnn_buf_limit_mbyte() const;
  void set_cudnn_buf_limit_mbyte(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:oneflow.CudnnConfig)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 cudnn_conv_force_fwd_algo_;
  ::PROTOBUF_NAMESPACE_ID::int32 cudnn_conv_force_bwd_data_algo_;
  ::PROTOBUF_NAMESPACE_ID::int32 cudnn_conv_force_bwd_filter_algo_;
  bool cudnn_conv_use_deterministic_algo_only_;
  bool enable_cudnn_fused_normalization_add_relu_;
  bool enable_cudnn_;
  bool cudnn_conv_heuristic_search_algo_;
  bool cudnn_conv_enable_pseudo_half_;
  ::PROTOBUF_NAMESPACE_ID::int64 cudnn_buf_limit_mbyte_;
  friend struct ::TableStruct_oneflow_2fcore_2fjob_2fresource_2eproto;
};
// -------------------------------------------------------------------

class Resource :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:oneflow.Resource) */ {
 public:
  Resource();
  virtual ~Resource();

  Resource(const Resource& from);
  Resource(Resource&& from) noexcept
    : Resource() {
    *this = ::std::move(from);
  }

  inline Resource& operator=(const Resource& from) {
    CopyFrom(from);
    return *this;
  }
  inline Resource& operator=(Resource&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Resource& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Resource* internal_default_instance() {
    return reinterpret_cast<const Resource*>(
               &_Resource_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Resource& a, Resource& b) {
    a.Swap(&b);
  }
  inline void Swap(Resource* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Resource* New() const final {
    return CreateMaybeMessage<Resource>(nullptr);
  }

  Resource* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Resource>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Resource& from);
  void MergeFrom(const Resource& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Resource* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "oneflow.Resource";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_oneflow_2fcore_2fjob_2fresource_2eproto);
    return ::descriptor_table_oneflow_2fcore_2fjob_2fresource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCollectiveBoxingConfFieldNumber = 19,
    kCudnnConfFieldNumber = 32,
    kMachineNumFieldNumber = 1,
    kCpuDeviceNumFieldNumber = 5,
    kEnableLegacyModelIoV2FieldNumber = 34,
    kComputeThreadPoolSizeFieldNumber = 15,
    kEnableDebugModeFieldNumber = 18,
    kEnableMemChainMergeFieldNumber = 21,
    kNcclUseComputeStreamFieldNumber = 30,
    kDisableGroupBoxingByDstParallelFieldNumber = 31,
    kEnableThreadLocalCacheFieldNumber = 16,
    kEnableTensorFloat32ComputeFieldNumber = 20,
    kEnableLegacyModelIoFieldNumber = 33,
    kCommNetWorkerNumFieldNumber = 6,
    kMaxMdsaveWorkerNumFieldNumber = 7,
    kReservedHostMemMbyteFieldNumber = 12,
    kReservedDeviceMemMbyteFieldNumber = 13,
    kThreadLocalCacheMaxSizeFieldNumber = 17,
  };
  // optional .oneflow.CollectiveBoxingConf collective_boxing_conf = 19;
  bool has_collective_boxing_conf() const;
  void clear_collective_boxing_conf();
  const ::oneflow::CollectiveBoxingConf& collective_boxing_conf() const;
  ::oneflow::CollectiveBoxingConf* release_collective_boxing_conf();
  ::oneflow::CollectiveBoxingConf* mutable_collective_boxing_conf();
  void set_allocated_collective_boxing_conf(::oneflow::CollectiveBoxingConf* collective_boxing_conf);

  // optional .oneflow.CudnnConfig cudnn_conf = 32;
  bool has_cudnn_conf() const;
  void clear_cudnn_conf();
  const ::oneflow::CudnnConfig& cudnn_conf() const;
  ::oneflow::CudnnConfig* release_cudnn_conf();
  ::oneflow::CudnnConfig* mutable_cudnn_conf();
  void set_allocated_cudnn_conf(::oneflow::CudnnConfig* cudnn_conf);

  // optional int32 machine_num = 1 [default = 0];
  bool has_machine_num() const;
  void clear_machine_num();
  ::PROTOBUF_NAMESPACE_ID::int32 machine_num() const;
  void set_machine_num(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 cpu_device_num = 5 [default = 0];
  bool has_cpu_device_num() const;
  void clear_cpu_device_num();
  ::PROTOBUF_NAMESPACE_ID::int32 cpu_device_num() const;
  void set_cpu_device_num(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional bool enable_legacy_model_io_v2 = 34 [default = false];
  bool has_enable_legacy_model_io_v2() const;
  void clear_enable_legacy_model_io_v2();
  bool enable_legacy_model_io_v2() const;
  void set_enable_legacy_model_io_v2(bool value);

  // optional int32 compute_thread_pool_size = 15;
  bool has_compute_thread_pool_size() const;
  void clear_compute_thread_pool_size();
  ::PROTOBUF_NAMESPACE_ID::int32 compute_thread_pool_size() const;
  void set_compute_thread_pool_size(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional bool enable_debug_mode = 18 [default = false];
  bool has_enable_debug_mode() const;
  void clear_enable_debug_mode();
  bool enable_debug_mode() const;
  void set_enable_debug_mode(bool value);

  // optional bool enable_mem_chain_merge = 21 [default = false];
  bool has_enable_mem_chain_merge() const;
  void clear_enable_mem_chain_merge();
  bool enable_mem_chain_merge() const;
  void set_enable_mem_chain_merge(bool value);

  // optional bool nccl_use_compute_stream = 30 [default = false];
  bool has_nccl_use_compute_stream() const;
  void clear_nccl_use_compute_stream();
  bool nccl_use_compute_stream() const;
  void set_nccl_use_compute_stream(bool value);

  // optional bool disable_group_boxing_by_dst_parallel = 31 [default = false];
  bool has_disable_group_boxing_by_dst_parallel() const;
  void clear_disable_group_boxing_by_dst_parallel();
  bool disable_group_boxing_by_dst_parallel() const;
  void set_disable_group_boxing_by_dst_parallel(bool value);

  // optional bool enable_thread_local_cache = 16 [default = true];
  bool has_enable_thread_local_cache() const;
  void clear_enable_thread_local_cache();
  bool enable_thread_local_cache() const;
  void set_enable_thread_local_cache(bool value);

  // optional bool enable_tensor_float_32_compute = 20 [default = true];
  bool has_enable_tensor_float_32_compute() const;
  void clear_enable_tensor_float_32_compute();
  bool enable_tensor_float_32_compute() const;
  void set_enable_tensor_float_32_compute(bool value);

  // optional bool enable_legacy_model_io = 33 [default = true];
  bool has_enable_legacy_model_io() const;
  void clear_enable_legacy_model_io();
  bool enable_legacy_model_io() const;
  void set_enable_legacy_model_io(bool value);

  // optional int32 comm_net_worker_num = 6 [default = 4];
  bool has_comm_net_worker_num() const;
  void clear_comm_net_worker_num();
  ::PROTOBUF_NAMESPACE_ID::int32 comm_net_worker_num() const;
  void set_comm_net_worker_num(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 max_mdsave_worker_num = 7 [default = 64];
  bool has_max_mdsave_worker_num() const;
  void clear_max_mdsave_worker_num();
  ::PROTOBUF_NAMESPACE_ID::int32 max_mdsave_worker_num() const;
  void set_max_mdsave_worker_num(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional uint64 reserved_host_mem_mbyte = 12 [default = 500];
  bool has_reserved_host_mem_mbyte() const;
  void clear_reserved_host_mem_mbyte();
  ::PROTOBUF_NAMESPACE_ID::uint64 reserved_host_mem_mbyte() const;
  void set_reserved_host_mem_mbyte(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 reserved_device_mem_mbyte = 13 [default = 500];
  bool has_reserved_device_mem_mbyte() const;
  void clear_reserved_device_mem_mbyte();
  ::PROTOBUF_NAMESPACE_ID::uint64 reserved_device_mem_mbyte() const;
  void set_reserved_device_mem_mbyte(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional int64 thread_local_cache_max_size = 17 [default = 67108864];
  bool has_thread_local_cache_max_size() const;
  void clear_thread_local_cache_max_size();
  ::PROTOBUF_NAMESPACE_ID::int64 thread_local_cache_max_size() const;
  void set_thread_local_cache_max_size(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:oneflow.Resource)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::oneflow::CollectiveBoxingConf* collective_boxing_conf_;
  ::oneflow::CudnnConfig* cudnn_conf_;
  ::PROTOBUF_NAMESPACE_ID::int32 machine_num_;
  ::PROTOBUF_NAMESPACE_ID::int32 cpu_device_num_;
  bool enable_legacy_model_io_v2_;
  ::PROTOBUF_NAMESPACE_ID::int32 compute_thread_pool_size_;
  bool enable_debug_mode_;
  bool enable_mem_chain_merge_;
  bool nccl_use_compute_stream_;
  bool disable_group_boxing_by_dst_parallel_;
  bool enable_thread_local_cache_;
  bool enable_tensor_float_32_compute_;
  bool enable_legacy_model_io_;
  ::PROTOBUF_NAMESPACE_ID::int32 comm_net_worker_num_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_mdsave_worker_num_;
  ::PROTOBUF_NAMESPACE_ID::uint64 reserved_host_mem_mbyte_;
  ::PROTOBUF_NAMESPACE_ID::uint64 reserved_device_mem_mbyte_;
  ::PROTOBUF_NAMESPACE_ID::int64 thread_local_cache_max_size_;
  friend struct ::TableStruct_oneflow_2fcore_2fjob_2fresource_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CollectiveBoxingConf

// optional bool enable_fusion = 1 [default = true];
inline bool CollectiveBoxingConf::has_enable_fusion() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CollectiveBoxingConf::clear_enable_fusion() {
  enable_fusion_ = true;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool CollectiveBoxingConf::enable_fusion() const {
  // @@protoc_insertion_point(field_get:oneflow.CollectiveBoxingConf.enable_fusion)
  return enable_fusion_;
}
inline void CollectiveBoxingConf::set_enable_fusion(bool value) {
  _has_bits_[0] |= 0x00000020u;
  enable_fusion_ = value;
  // @@protoc_insertion_point(field_set:oneflow.CollectiveBoxingConf.enable_fusion)
}

// optional int64 num_callback_threads = 2 [default = 4];
inline bool CollectiveBoxingConf::has_num_callback_threads() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CollectiveBoxingConf::clear_num_callback_threads() {
  num_callback_threads_ = PROTOBUF_LONGLONG(4);
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CollectiveBoxingConf::num_callback_threads() const {
  // @@protoc_insertion_point(field_get:oneflow.CollectiveBoxingConf.num_callback_threads)
  return num_callback_threads_;
}
inline void CollectiveBoxingConf::set_num_callback_threads(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000200u;
  num_callback_threads_ = value;
  // @@protoc_insertion_point(field_set:oneflow.CollectiveBoxingConf.num_callback_threads)
}

// optional int64 nccl_num_streams = 101 [default = 1];
inline bool CollectiveBoxingConf::has_nccl_num_streams() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CollectiveBoxingConf::clear_nccl_num_streams() {
  nccl_num_streams_ = PROTOBUF_LONGLONG(1);
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CollectiveBoxingConf::nccl_num_streams() const {
  // @@protoc_insertion_point(field_get:oneflow.CollectiveBoxingConf.nccl_num_streams)
  return nccl_num_streams_;
}
inline void CollectiveBoxingConf::set_nccl_num_streams(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000400u;
  nccl_num_streams_ = value;
  // @@protoc_insertion_point(field_set:oneflow.CollectiveBoxingConf.nccl_num_streams)
}

// optional int64 nccl_fusion_threshold_mb = 102 [default = 16];
inline bool CollectiveBoxingConf::has_nccl_fusion_threshold_mb() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CollectiveBoxingConf::clear_nccl_fusion_threshold_mb() {
  nccl_fusion_threshold_mb_ = PROTOBUF_LONGLONG(16);
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CollectiveBoxingConf::nccl_fusion_threshold_mb() const {
  // @@protoc_insertion_point(field_get:oneflow.CollectiveBoxingConf.nccl_fusion_threshold_mb)
  return nccl_fusion_threshold_mb_;
}
inline void CollectiveBoxingConf::set_nccl_fusion_threshold_mb(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000800u;
  nccl_fusion_threshold_mb_ = value;
  // @@protoc_insertion_point(field_set:oneflow.CollectiveBoxingConf.nccl_fusion_threshold_mb)
}

// optional bool nccl_fusion_all_reduce = 103 [default = true];
inline bool CollectiveBoxingConf::has_nccl_fusion_all_reduce() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CollectiveBoxingConf::clear_nccl_fusion_all_reduce() {
  nccl_fusion_all_reduce_ = true;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool CollectiveBoxingConf::nccl_fusion_all_reduce() const {
  // @@protoc_insertion_point(field_get:oneflow.CollectiveBoxingConf.nccl_fusion_all_reduce)
  return nccl_fusion_all_reduce_;
}
inline void CollectiveBoxingConf::set_nccl_fusion_all_reduce(bool value) {
  _has_bits_[0] |= 0x00000040u;
  nccl_fusion_all_reduce_ = value;
  // @@protoc_insertion_point(field_set:oneflow.CollectiveBoxingConf.nccl_fusion_all_reduce)
}

// optional bool nccl_fusion_reduce_scatter = 104 [default = false];
inline bool CollectiveBoxingConf::has_nccl_fusion_reduce_scatter() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CollectiveBoxingConf::clear_nccl_fusion_reduce_scatter() {
  nccl_fusion_reduce_scatter_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool CollectiveBoxingConf::nccl_fusion_reduce_scatter() const {
  // @@protoc_insertion_point(field_get:oneflow.CollectiveBoxingConf.nccl_fusion_reduce_scatter)
  return nccl_fusion_reduce_scatter_;
}
inline void CollectiveBoxingConf::set_nccl_fusion_reduce_scatter(bool value) {
  _has_bits_[0] |= 0x00000001u;
  nccl_fusion_reduce_scatter_ = value;
  // @@protoc_insertion_point(field_set:oneflow.CollectiveBoxingConf.nccl_fusion_reduce_scatter)
}

// optional bool nccl_fusion_all_gather = 105 [default = false];
inline bool CollectiveBoxingConf::has_nccl_fusion_all_gather() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CollectiveBoxingConf::clear_nccl_fusion_all_gather() {
  nccl_fusion_all_gather_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool CollectiveBoxingConf::nccl_fusion_all_gather() const {
  // @@protoc_insertion_point(field_get:oneflow.CollectiveBoxingConf.nccl_fusion_all_gather)
  return nccl_fusion_all_gather_;
}
inline void CollectiveBoxingConf::set_nccl_fusion_all_gather(bool value) {
  _has_bits_[0] |= 0x00000002u;
  nccl_fusion_all_gather_ = value;
  // @@protoc_insertion_point(field_set:oneflow.CollectiveBoxingConf.nccl_fusion_all_gather)
}

// optional bool nccl_fusion_reduce = 106 [default = true];
inline bool CollectiveBoxingConf::has_nccl_fusion_reduce() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CollectiveBoxingConf::clear_nccl_fusion_reduce() {
  nccl_fusion_reduce_ = true;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool CollectiveBoxingConf::nccl_fusion_reduce() const {
  // @@protoc_insertion_point(field_get:oneflow.CollectiveBoxingConf.nccl_fusion_reduce)
  return nccl_fusion_reduce_;
}
inline void CollectiveBoxingConf::set_nccl_fusion_reduce(bool value) {
  _has_bits_[0] |= 0x00000080u;
  nccl_fusion_reduce_ = value;
  // @@protoc_insertion_point(field_set:oneflow.CollectiveBoxingConf.nccl_fusion_reduce)
}

// optional bool nccl_fusion_broadcast = 107 [default = true];
inline bool CollectiveBoxingConf::has_nccl_fusion_broadcast() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CollectiveBoxingConf::clear_nccl_fusion_broadcast() {
  nccl_fusion_broadcast_ = true;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool CollectiveBoxingConf::nccl_fusion_broadcast() const {
  // @@protoc_insertion_point(field_get:oneflow.CollectiveBoxingConf.nccl_fusion_broadcast)
  return nccl_fusion_broadcast_;
}
inline void CollectiveBoxingConf::set_nccl_fusion_broadcast(bool value) {
  _has_bits_[0] |= 0x00000100u;
  nccl_fusion_broadcast_ = value;
  // @@protoc_insertion_point(field_set:oneflow.CollectiveBoxingConf.nccl_fusion_broadcast)
}

// optional bool nccl_fusion_all_reduce_use_buffer = 108 [default = false];
inline bool CollectiveBoxingConf::has_nccl_fusion_all_reduce_use_buffer() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CollectiveBoxingConf::clear_nccl_fusion_all_reduce_use_buffer() {
  nccl_fusion_all_reduce_use_buffer_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool CollectiveBoxingConf::nccl_fusion_all_reduce_use_buffer() const {
  // @@protoc_insertion_point(field_get:oneflow.CollectiveBoxingConf.nccl_fusion_all_reduce_use_buffer)
  return nccl_fusion_all_reduce_use_buffer_;
}
inline void CollectiveBoxingConf::set_nccl_fusion_all_reduce_use_buffer(bool value) {
  _has_bits_[0] |= 0x00000004u;
  nccl_fusion_all_reduce_use_buffer_ = value;
  // @@protoc_insertion_point(field_set:oneflow.CollectiveBoxingConf.nccl_fusion_all_reduce_use_buffer)
}

// optional int64 nccl_fusion_max_ops = 109 [default = 64];
inline bool CollectiveBoxingConf::has_nccl_fusion_max_ops() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CollectiveBoxingConf::clear_nccl_fusion_max_ops() {
  nccl_fusion_max_ops_ = PROTOBUF_LONGLONG(64);
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CollectiveBoxingConf::nccl_fusion_max_ops() const {
  // @@protoc_insertion_point(field_get:oneflow.CollectiveBoxingConf.nccl_fusion_max_ops)
  return nccl_fusion_max_ops_;
}
inline void CollectiveBoxingConf::set_nccl_fusion_max_ops(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00001000u;
  nccl_fusion_max_ops_ = value;
  // @@protoc_insertion_point(field_set:oneflow.CollectiveBoxingConf.nccl_fusion_max_ops)
}

// optional bool nccl_enable_all_to_all = 110 [default = false];
inline bool CollectiveBoxingConf::has_nccl_enable_all_to_all() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CollectiveBoxingConf::clear_nccl_enable_all_to_all() {
  nccl_enable_all_to_all_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool CollectiveBoxingConf::nccl_enable_all_to_all() const {
  // @@protoc_insertion_point(field_get:oneflow.CollectiveBoxingConf.nccl_enable_all_to_all)
  return nccl_enable_all_to_all_;
}
inline void CollectiveBoxingConf::set_nccl_enable_all_to_all(bool value) {
  _has_bits_[0] |= 0x00000008u;
  nccl_enable_all_to_all_ = value;
  // @@protoc_insertion_point(field_set:oneflow.CollectiveBoxingConf.nccl_enable_all_to_all)
}

// optional bool nccl_enable_mixed_fusion = 111 [default = false];
inline bool CollectiveBoxingConf::has_nccl_enable_mixed_fusion() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CollectiveBoxingConf::clear_nccl_enable_mixed_fusion() {
  nccl_enable_mixed_fusion_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool CollectiveBoxingConf::nccl_enable_mixed_fusion() const {
  // @@protoc_insertion_point(field_get:oneflow.CollectiveBoxingConf.nccl_enable_mixed_fusion)
  return nccl_enable_mixed_fusion_;
}
inline void CollectiveBoxingConf::set_nccl_enable_mixed_fusion(bool value) {
  _has_bits_[0] |= 0x00000010u;
  nccl_enable_mixed_fusion_ = value;
  // @@protoc_insertion_point(field_set:oneflow.CollectiveBoxingConf.nccl_enable_mixed_fusion)
}

// -------------------------------------------------------------------

// CudnnConfig

// optional bool enable_cudnn = 1 [default = true];
inline bool CudnnConfig::has_enable_cudnn() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CudnnConfig::clear_enable_cudnn() {
  enable_cudnn_ = true;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool CudnnConfig::enable_cudnn() const {
  // @@protoc_insertion_point(field_get:oneflow.CudnnConfig.enable_cudnn)
  return enable_cudnn_;
}
inline void CudnnConfig::set_enable_cudnn(bool value) {
  _has_bits_[0] |= 0x00000020u;
  enable_cudnn_ = value;
  // @@protoc_insertion_point(field_set:oneflow.CudnnConfig.enable_cudnn)
}

// optional int64 cudnn_buf_limit_mbyte = 2 [default = 1024];
inline bool CudnnConfig::has_cudnn_buf_limit_mbyte() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CudnnConfig::clear_cudnn_buf_limit_mbyte() {
  cudnn_buf_limit_mbyte_ = PROTOBUF_LONGLONG(1024);
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CudnnConfig::cudnn_buf_limit_mbyte() const {
  // @@protoc_insertion_point(field_get:oneflow.CudnnConfig.cudnn_buf_limit_mbyte)
  return cudnn_buf_limit_mbyte_;
}
inline void CudnnConfig::set_cudnn_buf_limit_mbyte(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000100u;
  cudnn_buf_limit_mbyte_ = value;
  // @@protoc_insertion_point(field_set:oneflow.CudnnConfig.cudnn_buf_limit_mbyte)
}

// optional int32 cudnn_conv_force_fwd_algo = 3;
inline bool CudnnConfig::has_cudnn_conv_force_fwd_algo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CudnnConfig::clear_cudnn_conv_force_fwd_algo() {
  cudnn_conv_force_fwd_algo_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CudnnConfig::cudnn_conv_force_fwd_algo() const {
  // @@protoc_insertion_point(field_get:oneflow.CudnnConfig.cudnn_conv_force_fwd_algo)
  return cudnn_conv_force_fwd_algo_;
}
inline void CudnnConfig::set_cudnn_conv_force_fwd_algo(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  cudnn_conv_force_fwd_algo_ = value;
  // @@protoc_insertion_point(field_set:oneflow.CudnnConfig.cudnn_conv_force_fwd_algo)
}

// optional int32 cudnn_conv_force_bwd_data_algo = 4;
inline bool CudnnConfig::has_cudnn_conv_force_bwd_data_algo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CudnnConfig::clear_cudnn_conv_force_bwd_data_algo() {
  cudnn_conv_force_bwd_data_algo_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CudnnConfig::cudnn_conv_force_bwd_data_algo() const {
  // @@protoc_insertion_point(field_get:oneflow.CudnnConfig.cudnn_conv_force_bwd_data_algo)
  return cudnn_conv_force_bwd_data_algo_;
}
inline void CudnnConfig::set_cudnn_conv_force_bwd_data_algo(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  cudnn_conv_force_bwd_data_algo_ = value;
  // @@protoc_insertion_point(field_set:oneflow.CudnnConfig.cudnn_conv_force_bwd_data_algo)
}

// optional int32 cudnn_conv_force_bwd_filter_algo = 5;
inline bool CudnnConfig::has_cudnn_conv_force_bwd_filter_algo() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CudnnConfig::clear_cudnn_conv_force_bwd_filter_algo() {
  cudnn_conv_force_bwd_filter_algo_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CudnnConfig::cudnn_conv_force_bwd_filter_algo() const {
  // @@protoc_insertion_point(field_get:oneflow.CudnnConfig.cudnn_conv_force_bwd_filter_algo)
  return cudnn_conv_force_bwd_filter_algo_;
}
inline void CudnnConfig::set_cudnn_conv_force_bwd_filter_algo(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  cudnn_conv_force_bwd_filter_algo_ = value;
  // @@protoc_insertion_point(field_set:oneflow.CudnnConfig.cudnn_conv_force_bwd_filter_algo)
}

// optional bool cudnn_conv_heuristic_search_algo = 6 [default = true];
inline bool CudnnConfig::has_cudnn_conv_heuristic_search_algo() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CudnnConfig::clear_cudnn_conv_heuristic_search_algo() {
  cudnn_conv_heuristic_search_algo_ = true;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool CudnnConfig::cudnn_conv_heuristic_search_algo() const {
  // @@protoc_insertion_point(field_get:oneflow.CudnnConfig.cudnn_conv_heuristic_search_algo)
  return cudnn_conv_heuristic_search_algo_;
}
inline void CudnnConfig::set_cudnn_conv_heuristic_search_algo(bool value) {
  _has_bits_[0] |= 0x00000040u;
  cudnn_conv_heuristic_search_algo_ = value;
  // @@protoc_insertion_point(field_set:oneflow.CudnnConfig.cudnn_conv_heuristic_search_algo)
}

// optional bool cudnn_conv_use_deterministic_algo_only = 7 [default = false];
inline bool CudnnConfig::has_cudnn_conv_use_deterministic_algo_only() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CudnnConfig::clear_cudnn_conv_use_deterministic_algo_only() {
  cudnn_conv_use_deterministic_algo_only_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool CudnnConfig::cudnn_conv_use_deterministic_algo_only() const {
  // @@protoc_insertion_point(field_get:oneflow.CudnnConfig.cudnn_conv_use_deterministic_algo_only)
  return cudnn_conv_use_deterministic_algo_only_;
}
inline void CudnnConfig::set_cudnn_conv_use_deterministic_algo_only(bool value) {
  _has_bits_[0] |= 0x00000008u;
  cudnn_conv_use_deterministic_algo_only_ = value;
  // @@protoc_insertion_point(field_set:oneflow.CudnnConfig.cudnn_conv_use_deterministic_algo_only)
}

// optional bool enable_cudnn_fused_normalization_add_relu = 8;
inline bool CudnnConfig::has_enable_cudnn_fused_normalization_add_relu() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CudnnConfig::clear_enable_cudnn_fused_normalization_add_relu() {
  enable_cudnn_fused_normalization_add_relu_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool CudnnConfig::enable_cudnn_fused_normalization_add_relu() const {
  // @@protoc_insertion_point(field_get:oneflow.CudnnConfig.enable_cudnn_fused_normalization_add_relu)
  return enable_cudnn_fused_normalization_add_relu_;
}
inline void CudnnConfig::set_enable_cudnn_fused_normalization_add_relu(bool value) {
  _has_bits_[0] |= 0x00000010u;
  enable_cudnn_fused_normalization_add_relu_ = value;
  // @@protoc_insertion_point(field_set:oneflow.CudnnConfig.enable_cudnn_fused_normalization_add_relu)
}

// optional bool cudnn_conv_enable_pseudo_half = 9 [default = true];
inline bool CudnnConfig::has_cudnn_conv_enable_pseudo_half() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CudnnConfig::clear_cudnn_conv_enable_pseudo_half() {
  cudnn_conv_enable_pseudo_half_ = true;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool CudnnConfig::cudnn_conv_enable_pseudo_half() const {
  // @@protoc_insertion_point(field_get:oneflow.CudnnConfig.cudnn_conv_enable_pseudo_half)
  return cudnn_conv_enable_pseudo_half_;
}
inline void CudnnConfig::set_cudnn_conv_enable_pseudo_half(bool value) {
  _has_bits_[0] |= 0x00000080u;
  cudnn_conv_enable_pseudo_half_ = value;
  // @@protoc_insertion_point(field_set:oneflow.CudnnConfig.cudnn_conv_enable_pseudo_half)
}

// -------------------------------------------------------------------

// Resource

// optional int32 machine_num = 1 [default = 0];
inline bool Resource::has_machine_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Resource::clear_machine_num() {
  machine_num_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Resource::machine_num() const {
  // @@protoc_insertion_point(field_get:oneflow.Resource.machine_num)
  return machine_num_;
}
inline void Resource::set_machine_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  machine_num_ = value;
  // @@protoc_insertion_point(field_set:oneflow.Resource.machine_num)
}

// optional int32 cpu_device_num = 5 [default = 0];
inline bool Resource::has_cpu_device_num() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Resource::clear_cpu_device_num() {
  cpu_device_num_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Resource::cpu_device_num() const {
  // @@protoc_insertion_point(field_get:oneflow.Resource.cpu_device_num)
  return cpu_device_num_;
}
inline void Resource::set_cpu_device_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  cpu_device_num_ = value;
  // @@protoc_insertion_point(field_set:oneflow.Resource.cpu_device_num)
}

// optional int32 comm_net_worker_num = 6 [default = 4];
inline bool Resource::has_comm_net_worker_num() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Resource::clear_comm_net_worker_num() {
  comm_net_worker_num_ = 4;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Resource::comm_net_worker_num() const {
  // @@protoc_insertion_point(field_get:oneflow.Resource.comm_net_worker_num)
  return comm_net_worker_num_;
}
inline void Resource::set_comm_net_worker_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00002000u;
  comm_net_worker_num_ = value;
  // @@protoc_insertion_point(field_set:oneflow.Resource.comm_net_worker_num)
}

// optional int32 max_mdsave_worker_num = 7 [default = 64];
inline bool Resource::has_max_mdsave_worker_num() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Resource::clear_max_mdsave_worker_num() {
  max_mdsave_worker_num_ = 64;
  _has_bits_[0] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Resource::max_mdsave_worker_num() const {
  // @@protoc_insertion_point(field_get:oneflow.Resource.max_mdsave_worker_num)
  return max_mdsave_worker_num_;
}
inline void Resource::set_max_mdsave_worker_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00004000u;
  max_mdsave_worker_num_ = value;
  // @@protoc_insertion_point(field_set:oneflow.Resource.max_mdsave_worker_num)
}

// optional uint64 reserved_host_mem_mbyte = 12 [default = 500];
inline bool Resource::has_reserved_host_mem_mbyte() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Resource::clear_reserved_host_mem_mbyte() {
  reserved_host_mem_mbyte_ = PROTOBUF_ULONGLONG(500);
  _has_bits_[0] &= ~0x00008000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Resource::reserved_host_mem_mbyte() const {
  // @@protoc_insertion_point(field_get:oneflow.Resource.reserved_host_mem_mbyte)
  return reserved_host_mem_mbyte_;
}
inline void Resource::set_reserved_host_mem_mbyte(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00008000u;
  reserved_host_mem_mbyte_ = value;
  // @@protoc_insertion_point(field_set:oneflow.Resource.reserved_host_mem_mbyte)
}

// optional uint64 reserved_device_mem_mbyte = 13 [default = 500];
inline bool Resource::has_reserved_device_mem_mbyte() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void Resource::clear_reserved_device_mem_mbyte() {
  reserved_device_mem_mbyte_ = PROTOBUF_ULONGLONG(500);
  _has_bits_[0] &= ~0x00010000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Resource::reserved_device_mem_mbyte() const {
  // @@protoc_insertion_point(field_get:oneflow.Resource.reserved_device_mem_mbyte)
  return reserved_device_mem_mbyte_;
}
inline void Resource::set_reserved_device_mem_mbyte(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00010000u;
  reserved_device_mem_mbyte_ = value;
  // @@protoc_insertion_point(field_set:oneflow.Resource.reserved_device_mem_mbyte)
}

// optional int32 compute_thread_pool_size = 15;
inline bool Resource::has_compute_thread_pool_size() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Resource::clear_compute_thread_pool_size() {
  compute_thread_pool_size_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Resource::compute_thread_pool_size() const {
  // @@protoc_insertion_point(field_get:oneflow.Resource.compute_thread_pool_size)
  return compute_thread_pool_size_;
}
inline void Resource::set_compute_thread_pool_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  compute_thread_pool_size_ = value;
  // @@protoc_insertion_point(field_set:oneflow.Resource.compute_thread_pool_size)
}

// optional bool enable_thread_local_cache = 16 [default = true];
inline bool Resource::has_enable_thread_local_cache() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Resource::clear_enable_thread_local_cache() {
  enable_thread_local_cache_ = true;
  _has_bits_[0] &= ~0x00000400u;
}
inline bool Resource::enable_thread_local_cache() const {
  // @@protoc_insertion_point(field_get:oneflow.Resource.enable_thread_local_cache)
  return enable_thread_local_cache_;
}
inline void Resource::set_enable_thread_local_cache(bool value) {
  _has_bits_[0] |= 0x00000400u;
  enable_thread_local_cache_ = value;
  // @@protoc_insertion_point(field_set:oneflow.Resource.enable_thread_local_cache)
}

// optional int64 thread_local_cache_max_size = 17 [default = 67108864];
inline bool Resource::has_thread_local_cache_max_size() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void Resource::clear_thread_local_cache_max_size() {
  thread_local_cache_max_size_ = PROTOBUF_LONGLONG(67108864);
  _has_bits_[0] &= ~0x00020000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Resource::thread_local_cache_max_size() const {
  // @@protoc_insertion_point(field_get:oneflow.Resource.thread_local_cache_max_size)
  return thread_local_cache_max_size_;
}
inline void Resource::set_thread_local_cache_max_size(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00020000u;
  thread_local_cache_max_size_ = value;
  // @@protoc_insertion_point(field_set:oneflow.Resource.thread_local_cache_max_size)
}

// optional bool enable_debug_mode = 18 [default = false];
inline bool Resource::has_enable_debug_mode() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Resource::clear_enable_debug_mode() {
  enable_debug_mode_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool Resource::enable_debug_mode() const {
  // @@protoc_insertion_point(field_get:oneflow.Resource.enable_debug_mode)
  return enable_debug_mode_;
}
inline void Resource::set_enable_debug_mode(bool value) {
  _has_bits_[0] |= 0x00000040u;
  enable_debug_mode_ = value;
  // @@protoc_insertion_point(field_set:oneflow.Resource.enable_debug_mode)
}

// optional bool enable_tensor_float_32_compute = 20 [default = true];
inline bool Resource::has_enable_tensor_float_32_compute() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Resource::clear_enable_tensor_float_32_compute() {
  enable_tensor_float_32_compute_ = true;
  _has_bits_[0] &= ~0x00000800u;
}
inline bool Resource::enable_tensor_float_32_compute() const {
  // @@protoc_insertion_point(field_get:oneflow.Resource.enable_tensor_float_32_compute)
  return enable_tensor_float_32_compute_;
}
inline void Resource::set_enable_tensor_float_32_compute(bool value) {
  _has_bits_[0] |= 0x00000800u;
  enable_tensor_float_32_compute_ = value;
  // @@protoc_insertion_point(field_set:oneflow.Resource.enable_tensor_float_32_compute)
}

// optional bool enable_mem_chain_merge = 21 [default = false];
inline bool Resource::has_enable_mem_chain_merge() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Resource::clear_enable_mem_chain_merge() {
  enable_mem_chain_merge_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool Resource::enable_mem_chain_merge() const {
  // @@protoc_insertion_point(field_get:oneflow.Resource.enable_mem_chain_merge)
  return enable_mem_chain_merge_;
}
inline void Resource::set_enable_mem_chain_merge(bool value) {
  _has_bits_[0] |= 0x00000080u;
  enable_mem_chain_merge_ = value;
  // @@protoc_insertion_point(field_set:oneflow.Resource.enable_mem_chain_merge)
}

// optional .oneflow.CollectiveBoxingConf collective_boxing_conf = 19;
inline bool Resource::has_collective_boxing_conf() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Resource::clear_collective_boxing_conf() {
  if (collective_boxing_conf_ != nullptr) collective_boxing_conf_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::oneflow::CollectiveBoxingConf& Resource::collective_boxing_conf() const {
  const ::oneflow::CollectiveBoxingConf* p = collective_boxing_conf_;
  // @@protoc_insertion_point(field_get:oneflow.Resource.collective_boxing_conf)
  return p != nullptr ? *p : *reinterpret_cast<const ::oneflow::CollectiveBoxingConf*>(
      &::oneflow::_CollectiveBoxingConf_default_instance_);
}
inline ::oneflow::CollectiveBoxingConf* Resource::release_collective_boxing_conf() {
  // @@protoc_insertion_point(field_release:oneflow.Resource.collective_boxing_conf)
  _has_bits_[0] &= ~0x00000001u;
  ::oneflow::CollectiveBoxingConf* temp = collective_boxing_conf_;
  collective_boxing_conf_ = nullptr;
  return temp;
}
inline ::oneflow::CollectiveBoxingConf* Resource::mutable_collective_boxing_conf() {
  _has_bits_[0] |= 0x00000001u;
  if (collective_boxing_conf_ == nullptr) {
    auto* p = CreateMaybeMessage<::oneflow::CollectiveBoxingConf>(GetArenaNoVirtual());
    collective_boxing_conf_ = p;
  }
  // @@protoc_insertion_point(field_mutable:oneflow.Resource.collective_boxing_conf)
  return collective_boxing_conf_;
}
inline void Resource::set_allocated_collective_boxing_conf(::oneflow::CollectiveBoxingConf* collective_boxing_conf) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete collective_boxing_conf_;
  }
  if (collective_boxing_conf) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      collective_boxing_conf = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, collective_boxing_conf, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  collective_boxing_conf_ = collective_boxing_conf;
  // @@protoc_insertion_point(field_set_allocated:oneflow.Resource.collective_boxing_conf)
}

// optional bool nccl_use_compute_stream = 30 [default = false];
inline bool Resource::has_nccl_use_compute_stream() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Resource::clear_nccl_use_compute_stream() {
  nccl_use_compute_stream_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool Resource::nccl_use_compute_stream() const {
  // @@protoc_insertion_point(field_get:oneflow.Resource.nccl_use_compute_stream)
  return nccl_use_compute_stream_;
}
inline void Resource::set_nccl_use_compute_stream(bool value) {
  _has_bits_[0] |= 0x00000100u;
  nccl_use_compute_stream_ = value;
  // @@protoc_insertion_point(field_set:oneflow.Resource.nccl_use_compute_stream)
}

// optional bool disable_group_boxing_by_dst_parallel = 31 [default = false];
inline bool Resource::has_disable_group_boxing_by_dst_parallel() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Resource::clear_disable_group_boxing_by_dst_parallel() {
  disable_group_boxing_by_dst_parallel_ = false;
  _has_bits_[0] &= ~0x00000200u;
}
inline bool Resource::disable_group_boxing_by_dst_parallel() const {
  // @@protoc_insertion_point(field_get:oneflow.Resource.disable_group_boxing_by_dst_parallel)
  return disable_group_boxing_by_dst_parallel_;
}
inline void Resource::set_disable_group_boxing_by_dst_parallel(bool value) {
  _has_bits_[0] |= 0x00000200u;
  disable_group_boxing_by_dst_parallel_ = value;
  // @@protoc_insertion_point(field_set:oneflow.Resource.disable_group_boxing_by_dst_parallel)
}

// optional .oneflow.CudnnConfig cudnn_conf = 32;
inline bool Resource::has_cudnn_conf() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Resource::clear_cudnn_conf() {
  if (cudnn_conf_ != nullptr) cudnn_conf_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::oneflow::CudnnConfig& Resource::cudnn_conf() const {
  const ::oneflow::CudnnConfig* p = cudnn_conf_;
  // @@protoc_insertion_point(field_get:oneflow.Resource.cudnn_conf)
  return p != nullptr ? *p : *reinterpret_cast<const ::oneflow::CudnnConfig*>(
      &::oneflow::_CudnnConfig_default_instance_);
}
inline ::oneflow::CudnnConfig* Resource::release_cudnn_conf() {
  // @@protoc_insertion_point(field_release:oneflow.Resource.cudnn_conf)
  _has_bits_[0] &= ~0x00000002u;
  ::oneflow::CudnnConfig* temp = cudnn_conf_;
  cudnn_conf_ = nullptr;
  return temp;
}
inline ::oneflow::CudnnConfig* Resource::mutable_cudnn_conf() {
  _has_bits_[0] |= 0x00000002u;
  if (cudnn_conf_ == nullptr) {
    auto* p = CreateMaybeMessage<::oneflow::CudnnConfig>(GetArenaNoVirtual());
    cudnn_conf_ = p;
  }
  // @@protoc_insertion_point(field_mutable:oneflow.Resource.cudnn_conf)
  return cudnn_conf_;
}
inline void Resource::set_allocated_cudnn_conf(::oneflow::CudnnConfig* cudnn_conf) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete cudnn_conf_;
  }
  if (cudnn_conf) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      cudnn_conf = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cudnn_conf, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  cudnn_conf_ = cudnn_conf;
  // @@protoc_insertion_point(field_set_allocated:oneflow.Resource.cudnn_conf)
}

// optional bool enable_legacy_model_io = 33 [default = true];
inline bool Resource::has_enable_legacy_model_io() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Resource::clear_enable_legacy_model_io() {
  enable_legacy_model_io_ = true;
  _has_bits_[0] &= ~0x00001000u;
}
inline bool Resource::enable_legacy_model_io() const {
  // @@protoc_insertion_point(field_get:oneflow.Resource.enable_legacy_model_io)
  return enable_legacy_model_io_;
}
inline void Resource::set_enable_legacy_model_io(bool value) {
  _has_bits_[0] |= 0x00001000u;
  enable_legacy_model_io_ = value;
  // @@protoc_insertion_point(field_set:oneflow.Resource.enable_legacy_model_io)
}

// optional bool enable_legacy_model_io_v2 = 34 [default = false];
inline bool Resource::has_enable_legacy_model_io_v2() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Resource::clear_enable_legacy_model_io_v2() {
  enable_legacy_model_io_v2_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool Resource::enable_legacy_model_io_v2() const {
  // @@protoc_insertion_point(field_get:oneflow.Resource.enable_legacy_model_io_v2)
  return enable_legacy_model_io_v2_;
}
inline void Resource::set_enable_legacy_model_io_v2(bool value) {
  _has_bits_[0] |= 0x00000010u;
  enable_legacy_model_io_v2_ = value;
  // @@protoc_insertion_point(field_set:oneflow.Resource.enable_legacy_model_io_v2)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace oneflow

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_oneflow_2fcore_2fjob_2fresource_2eproto
