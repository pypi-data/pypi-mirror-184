// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: oneflow/core/job/cluster_instruction.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_oneflow_2fcore_2fjob_2fcluster_5finstruction_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_oneflow_2fcore_2fjob_2fcluster_5finstruction_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_oneflow_2fcore_2fjob_2fcluster_5finstruction_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_oneflow_2fcore_2fjob_2fcluster_5finstruction_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_oneflow_2fcore_2fjob_2fcluster_5finstruction_2eproto;
namespace oneflow {
class ClusterCtrlAbort;
class ClusterCtrlAbortDefaultTypeInternal;
extern ClusterCtrlAbortDefaultTypeInternal _ClusterCtrlAbort_default_instance_;
class ClusterCtrlHalt;
class ClusterCtrlHaltDefaultTypeInternal;
extern ClusterCtrlHaltDefaultTypeInternal _ClusterCtrlHalt_default_instance_;
class ClusterCtrlSessionStart;
class ClusterCtrlSessionStartDefaultTypeInternal;
extern ClusterCtrlSessionStartDefaultTypeInternal _ClusterCtrlSessionStart_default_instance_;
class ClusterInstructionProto;
class ClusterInstructionProtoDefaultTypeInternal;
extern ClusterInstructionProtoDefaultTypeInternal _ClusterInstructionProto_default_instance_;
}  // namespace oneflow
PROTOBUF_NAMESPACE_OPEN
template<> ::oneflow::ClusterCtrlAbort* Arena::CreateMaybeMessage<::oneflow::ClusterCtrlAbort>(Arena*);
template<> ::oneflow::ClusterCtrlHalt* Arena::CreateMaybeMessage<::oneflow::ClusterCtrlHalt>(Arena*);
template<> ::oneflow::ClusterCtrlSessionStart* Arena::CreateMaybeMessage<::oneflow::ClusterCtrlSessionStart>(Arena*);
template<> ::oneflow::ClusterInstructionProto* Arena::CreateMaybeMessage<::oneflow::ClusterInstructionProto>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace oneflow {

// ===================================================================

class ClusterCtrlSessionStart :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:oneflow.ClusterCtrlSessionStart) */ {
 public:
  ClusterCtrlSessionStart();
  virtual ~ClusterCtrlSessionStart();

  ClusterCtrlSessionStart(const ClusterCtrlSessionStart& from);
  ClusterCtrlSessionStart(ClusterCtrlSessionStart&& from) noexcept
    : ClusterCtrlSessionStart() {
    *this = ::std::move(from);
  }

  inline ClusterCtrlSessionStart& operator=(const ClusterCtrlSessionStart& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClusterCtrlSessionStart& operator=(ClusterCtrlSessionStart&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClusterCtrlSessionStart& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClusterCtrlSessionStart* internal_default_instance() {
    return reinterpret_cast<const ClusterCtrlSessionStart*>(
               &_ClusterCtrlSessionStart_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ClusterCtrlSessionStart& a, ClusterCtrlSessionStart& b) {
    a.Swap(&b);
  }
  inline void Swap(ClusterCtrlSessionStart* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClusterCtrlSessionStart* New() const final {
    return CreateMaybeMessage<ClusterCtrlSessionStart>(nullptr);
  }

  ClusterCtrlSessionStart* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClusterCtrlSessionStart>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClusterCtrlSessionStart& from);
  void MergeFrom(const ClusterCtrlSessionStart& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClusterCtrlSessionStart* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "oneflow.ClusterCtrlSessionStart";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_oneflow_2fcore_2fjob_2fcluster_5finstruction_2eproto);
    return ::descriptor_table_oneflow_2fcore_2fjob_2fcluster_5finstruction_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:oneflow.ClusterCtrlSessionStart)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_oneflow_2fcore_2fjob_2fcluster_5finstruction_2eproto;
};
// -------------------------------------------------------------------

class ClusterCtrlHalt :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:oneflow.ClusterCtrlHalt) */ {
 public:
  ClusterCtrlHalt();
  virtual ~ClusterCtrlHalt();

  ClusterCtrlHalt(const ClusterCtrlHalt& from);
  ClusterCtrlHalt(ClusterCtrlHalt&& from) noexcept
    : ClusterCtrlHalt() {
    *this = ::std::move(from);
  }

  inline ClusterCtrlHalt& operator=(const ClusterCtrlHalt& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClusterCtrlHalt& operator=(ClusterCtrlHalt&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClusterCtrlHalt& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClusterCtrlHalt* internal_default_instance() {
    return reinterpret_cast<const ClusterCtrlHalt*>(
               &_ClusterCtrlHalt_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ClusterCtrlHalt& a, ClusterCtrlHalt& b) {
    a.Swap(&b);
  }
  inline void Swap(ClusterCtrlHalt* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClusterCtrlHalt* New() const final {
    return CreateMaybeMessage<ClusterCtrlHalt>(nullptr);
  }

  ClusterCtrlHalt* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClusterCtrlHalt>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClusterCtrlHalt& from);
  void MergeFrom(const ClusterCtrlHalt& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClusterCtrlHalt* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "oneflow.ClusterCtrlHalt";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_oneflow_2fcore_2fjob_2fcluster_5finstruction_2eproto);
    return ::descriptor_table_oneflow_2fcore_2fjob_2fcluster_5finstruction_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:oneflow.ClusterCtrlHalt)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_oneflow_2fcore_2fjob_2fcluster_5finstruction_2eproto;
};
// -------------------------------------------------------------------

class ClusterCtrlAbort :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:oneflow.ClusterCtrlAbort) */ {
 public:
  ClusterCtrlAbort();
  virtual ~ClusterCtrlAbort();

  ClusterCtrlAbort(const ClusterCtrlAbort& from);
  ClusterCtrlAbort(ClusterCtrlAbort&& from) noexcept
    : ClusterCtrlAbort() {
    *this = ::std::move(from);
  }

  inline ClusterCtrlAbort& operator=(const ClusterCtrlAbort& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClusterCtrlAbort& operator=(ClusterCtrlAbort&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClusterCtrlAbort& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClusterCtrlAbort* internal_default_instance() {
    return reinterpret_cast<const ClusterCtrlAbort*>(
               &_ClusterCtrlAbort_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ClusterCtrlAbort& a, ClusterCtrlAbort& b) {
    a.Swap(&b);
  }
  inline void Swap(ClusterCtrlAbort* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClusterCtrlAbort* New() const final {
    return CreateMaybeMessage<ClusterCtrlAbort>(nullptr);
  }

  ClusterCtrlAbort* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClusterCtrlAbort>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClusterCtrlAbort& from);
  void MergeFrom(const ClusterCtrlAbort& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClusterCtrlAbort* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "oneflow.ClusterCtrlAbort";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_oneflow_2fcore_2fjob_2fcluster_5finstruction_2eproto);
    return ::descriptor_table_oneflow_2fcore_2fjob_2fcluster_5finstruction_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:oneflow.ClusterCtrlAbort)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_oneflow_2fcore_2fjob_2fcluster_5finstruction_2eproto;
};
// -------------------------------------------------------------------

class ClusterInstructionProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:oneflow.ClusterInstructionProto) */ {
 public:
  ClusterInstructionProto();
  virtual ~ClusterInstructionProto();

  ClusterInstructionProto(const ClusterInstructionProto& from);
  ClusterInstructionProto(ClusterInstructionProto&& from) noexcept
    : ClusterInstructionProto() {
    *this = ::std::move(from);
  }

  inline ClusterInstructionProto& operator=(const ClusterInstructionProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClusterInstructionProto& operator=(ClusterInstructionProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClusterInstructionProto& default_instance();

  enum InstructionTypeCase {
    kClusterCtrlSessionStart = 1,
    kClusterCtrlHalt = 2,
    kClusterCtrlAbort = 5,
    INSTRUCTION_TYPE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClusterInstructionProto* internal_default_instance() {
    return reinterpret_cast<const ClusterInstructionProto*>(
               &_ClusterInstructionProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ClusterInstructionProto& a, ClusterInstructionProto& b) {
    a.Swap(&b);
  }
  inline void Swap(ClusterInstructionProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClusterInstructionProto* New() const final {
    return CreateMaybeMessage<ClusterInstructionProto>(nullptr);
  }

  ClusterInstructionProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClusterInstructionProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClusterInstructionProto& from);
  void MergeFrom(const ClusterInstructionProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClusterInstructionProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "oneflow.ClusterInstructionProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_oneflow_2fcore_2fjob_2fcluster_5finstruction_2eproto);
    return ::descriptor_table_oneflow_2fcore_2fjob_2fcluster_5finstruction_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClusterCtrlSessionStartFieldNumber = 1,
    kClusterCtrlHaltFieldNumber = 2,
    kClusterCtrlAbortFieldNumber = 5,
  };
  // optional .oneflow.ClusterCtrlSessionStart cluster_ctrl_session_start = 1;
  bool has_cluster_ctrl_session_start() const;
  void clear_cluster_ctrl_session_start();
  const ::oneflow::ClusterCtrlSessionStart& cluster_ctrl_session_start() const;
  ::oneflow::ClusterCtrlSessionStart* release_cluster_ctrl_session_start();
  ::oneflow::ClusterCtrlSessionStart* mutable_cluster_ctrl_session_start();
  void set_allocated_cluster_ctrl_session_start(::oneflow::ClusterCtrlSessionStart* cluster_ctrl_session_start);

  // optional .oneflow.ClusterCtrlHalt cluster_ctrl_halt = 2;
  bool has_cluster_ctrl_halt() const;
  void clear_cluster_ctrl_halt();
  const ::oneflow::ClusterCtrlHalt& cluster_ctrl_halt() const;
  ::oneflow::ClusterCtrlHalt* release_cluster_ctrl_halt();
  ::oneflow::ClusterCtrlHalt* mutable_cluster_ctrl_halt();
  void set_allocated_cluster_ctrl_halt(::oneflow::ClusterCtrlHalt* cluster_ctrl_halt);

  // optional .oneflow.ClusterCtrlAbort cluster_ctrl_abort = 5;
  bool has_cluster_ctrl_abort() const;
  void clear_cluster_ctrl_abort();
  const ::oneflow::ClusterCtrlAbort& cluster_ctrl_abort() const;
  ::oneflow::ClusterCtrlAbort* release_cluster_ctrl_abort();
  ::oneflow::ClusterCtrlAbort* mutable_cluster_ctrl_abort();
  void set_allocated_cluster_ctrl_abort(::oneflow::ClusterCtrlAbort* cluster_ctrl_abort);

  void clear_instruction_type();
  InstructionTypeCase instruction_type_case() const;
  // @@protoc_insertion_point(class_scope:oneflow.ClusterInstructionProto)
 private:
  class _Internal;
  void set_has_cluster_ctrl_session_start();
  void set_has_cluster_ctrl_halt();
  void set_has_cluster_ctrl_abort();

  inline bool has_instruction_type() const;
  inline void clear_has_instruction_type();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  union InstructionTypeUnion {
    InstructionTypeUnion() {}
    ::oneflow::ClusterCtrlSessionStart* cluster_ctrl_session_start_;
    ::oneflow::ClusterCtrlHalt* cluster_ctrl_halt_;
    ::oneflow::ClusterCtrlAbort* cluster_ctrl_abort_;
  } instruction_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_oneflow_2fcore_2fjob_2fcluster_5finstruction_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ClusterCtrlSessionStart

// -------------------------------------------------------------------

// ClusterCtrlHalt

// -------------------------------------------------------------------

// ClusterCtrlAbort

// -------------------------------------------------------------------

// ClusterInstructionProto

// optional .oneflow.ClusterCtrlSessionStart cluster_ctrl_session_start = 1;
inline bool ClusterInstructionProto::has_cluster_ctrl_session_start() const {
  return instruction_type_case() == kClusterCtrlSessionStart;
}
inline void ClusterInstructionProto::set_has_cluster_ctrl_session_start() {
  _oneof_case_[0] = kClusterCtrlSessionStart;
}
inline void ClusterInstructionProto::clear_cluster_ctrl_session_start() {
  if (has_cluster_ctrl_session_start()) {
    delete instruction_type_.cluster_ctrl_session_start_;
    clear_has_instruction_type();
  }
}
inline ::oneflow::ClusterCtrlSessionStart* ClusterInstructionProto::release_cluster_ctrl_session_start() {
  // @@protoc_insertion_point(field_release:oneflow.ClusterInstructionProto.cluster_ctrl_session_start)
  if (has_cluster_ctrl_session_start()) {
    clear_has_instruction_type();
      ::oneflow::ClusterCtrlSessionStart* temp = instruction_type_.cluster_ctrl_session_start_;
    instruction_type_.cluster_ctrl_session_start_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::oneflow::ClusterCtrlSessionStart& ClusterInstructionProto::cluster_ctrl_session_start() const {
  // @@protoc_insertion_point(field_get:oneflow.ClusterInstructionProto.cluster_ctrl_session_start)
  return has_cluster_ctrl_session_start()
      ? *instruction_type_.cluster_ctrl_session_start_
      : *reinterpret_cast< ::oneflow::ClusterCtrlSessionStart*>(&::oneflow::_ClusterCtrlSessionStart_default_instance_);
}
inline ::oneflow::ClusterCtrlSessionStart* ClusterInstructionProto::mutable_cluster_ctrl_session_start() {
  if (!has_cluster_ctrl_session_start()) {
    clear_instruction_type();
    set_has_cluster_ctrl_session_start();
    instruction_type_.cluster_ctrl_session_start_ = CreateMaybeMessage< ::oneflow::ClusterCtrlSessionStart >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:oneflow.ClusterInstructionProto.cluster_ctrl_session_start)
  return instruction_type_.cluster_ctrl_session_start_;
}

// optional .oneflow.ClusterCtrlHalt cluster_ctrl_halt = 2;
inline bool ClusterInstructionProto::has_cluster_ctrl_halt() const {
  return instruction_type_case() == kClusterCtrlHalt;
}
inline void ClusterInstructionProto::set_has_cluster_ctrl_halt() {
  _oneof_case_[0] = kClusterCtrlHalt;
}
inline void ClusterInstructionProto::clear_cluster_ctrl_halt() {
  if (has_cluster_ctrl_halt()) {
    delete instruction_type_.cluster_ctrl_halt_;
    clear_has_instruction_type();
  }
}
inline ::oneflow::ClusterCtrlHalt* ClusterInstructionProto::release_cluster_ctrl_halt() {
  // @@protoc_insertion_point(field_release:oneflow.ClusterInstructionProto.cluster_ctrl_halt)
  if (has_cluster_ctrl_halt()) {
    clear_has_instruction_type();
      ::oneflow::ClusterCtrlHalt* temp = instruction_type_.cluster_ctrl_halt_;
    instruction_type_.cluster_ctrl_halt_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::oneflow::ClusterCtrlHalt& ClusterInstructionProto::cluster_ctrl_halt() const {
  // @@protoc_insertion_point(field_get:oneflow.ClusterInstructionProto.cluster_ctrl_halt)
  return has_cluster_ctrl_halt()
      ? *instruction_type_.cluster_ctrl_halt_
      : *reinterpret_cast< ::oneflow::ClusterCtrlHalt*>(&::oneflow::_ClusterCtrlHalt_default_instance_);
}
inline ::oneflow::ClusterCtrlHalt* ClusterInstructionProto::mutable_cluster_ctrl_halt() {
  if (!has_cluster_ctrl_halt()) {
    clear_instruction_type();
    set_has_cluster_ctrl_halt();
    instruction_type_.cluster_ctrl_halt_ = CreateMaybeMessage< ::oneflow::ClusterCtrlHalt >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:oneflow.ClusterInstructionProto.cluster_ctrl_halt)
  return instruction_type_.cluster_ctrl_halt_;
}

// optional .oneflow.ClusterCtrlAbort cluster_ctrl_abort = 5;
inline bool ClusterInstructionProto::has_cluster_ctrl_abort() const {
  return instruction_type_case() == kClusterCtrlAbort;
}
inline void ClusterInstructionProto::set_has_cluster_ctrl_abort() {
  _oneof_case_[0] = kClusterCtrlAbort;
}
inline void ClusterInstructionProto::clear_cluster_ctrl_abort() {
  if (has_cluster_ctrl_abort()) {
    delete instruction_type_.cluster_ctrl_abort_;
    clear_has_instruction_type();
  }
}
inline ::oneflow::ClusterCtrlAbort* ClusterInstructionProto::release_cluster_ctrl_abort() {
  // @@protoc_insertion_point(field_release:oneflow.ClusterInstructionProto.cluster_ctrl_abort)
  if (has_cluster_ctrl_abort()) {
    clear_has_instruction_type();
      ::oneflow::ClusterCtrlAbort* temp = instruction_type_.cluster_ctrl_abort_;
    instruction_type_.cluster_ctrl_abort_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::oneflow::ClusterCtrlAbort& ClusterInstructionProto::cluster_ctrl_abort() const {
  // @@protoc_insertion_point(field_get:oneflow.ClusterInstructionProto.cluster_ctrl_abort)
  return has_cluster_ctrl_abort()
      ? *instruction_type_.cluster_ctrl_abort_
      : *reinterpret_cast< ::oneflow::ClusterCtrlAbort*>(&::oneflow::_ClusterCtrlAbort_default_instance_);
}
inline ::oneflow::ClusterCtrlAbort* ClusterInstructionProto::mutable_cluster_ctrl_abort() {
  if (!has_cluster_ctrl_abort()) {
    clear_instruction_type();
    set_has_cluster_ctrl_abort();
    instruction_type_.cluster_ctrl_abort_ = CreateMaybeMessage< ::oneflow::ClusterCtrlAbort >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:oneflow.ClusterInstructionProto.cluster_ctrl_abort)
  return instruction_type_.cluster_ctrl_abort_;
}

inline bool ClusterInstructionProto::has_instruction_type() const {
  return instruction_type_case() != INSTRUCTION_TYPE_NOT_SET;
}
inline void ClusterInstructionProto::clear_has_instruction_type() {
  _oneof_case_[0] = INSTRUCTION_TYPE_NOT_SET;
}
inline ClusterInstructionProto::InstructionTypeCase ClusterInstructionProto::instruction_type_case() const {
  return ClusterInstructionProto::InstructionTypeCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace oneflow

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_oneflow_2fcore_2fjob_2fcluster_5finstruction_2eproto
