// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: oneflow/core/job/regularizer_conf.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_oneflow_2fcore_2fjob_2fregularizer_5fconf_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_oneflow_2fcore_2fjob_2fregularizer_5fconf_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_oneflow_2fcore_2fjob_2fregularizer_5fconf_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_oneflow_2fcore_2fjob_2fregularizer_5fconf_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_oneflow_2fcore_2fjob_2fregularizer_5fconf_2eproto;
namespace oneflow {
class L1L2RegularizerConf;
class L1L2RegularizerConfDefaultTypeInternal;
extern L1L2RegularizerConfDefaultTypeInternal _L1L2RegularizerConf_default_instance_;
class RegularizerConf;
class RegularizerConfDefaultTypeInternal;
extern RegularizerConfDefaultTypeInternal _RegularizerConf_default_instance_;
}  // namespace oneflow
PROTOBUF_NAMESPACE_OPEN
template<> ::oneflow::L1L2RegularizerConf* Arena::CreateMaybeMessage<::oneflow::L1L2RegularizerConf>(Arena*);
template<> ::oneflow::RegularizerConf* Arena::CreateMaybeMessage<::oneflow::RegularizerConf>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace oneflow {

// ===================================================================

class L1L2RegularizerConf :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:oneflow.L1L2RegularizerConf) */ {
 public:
  L1L2RegularizerConf();
  virtual ~L1L2RegularizerConf();

  L1L2RegularizerConf(const L1L2RegularizerConf& from);
  L1L2RegularizerConf(L1L2RegularizerConf&& from) noexcept
    : L1L2RegularizerConf() {
    *this = ::std::move(from);
  }

  inline L1L2RegularizerConf& operator=(const L1L2RegularizerConf& from) {
    CopyFrom(from);
    return *this;
  }
  inline L1L2RegularizerConf& operator=(L1L2RegularizerConf&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const L1L2RegularizerConf& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const L1L2RegularizerConf* internal_default_instance() {
    return reinterpret_cast<const L1L2RegularizerConf*>(
               &_L1L2RegularizerConf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(L1L2RegularizerConf& a, L1L2RegularizerConf& b) {
    a.Swap(&b);
  }
  inline void Swap(L1L2RegularizerConf* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline L1L2RegularizerConf* New() const final {
    return CreateMaybeMessage<L1L2RegularizerConf>(nullptr);
  }

  L1L2RegularizerConf* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<L1L2RegularizerConf>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const L1L2RegularizerConf& from);
  void MergeFrom(const L1L2RegularizerConf& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(L1L2RegularizerConf* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "oneflow.L1L2RegularizerConf";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_oneflow_2fcore_2fjob_2fregularizer_5fconf_2eproto);
    return ::descriptor_table_oneflow_2fcore_2fjob_2fregularizer_5fconf_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kL1FieldNumber = 1,
    kL2FieldNumber = 2,
  };
  // optional float l1 = 1 [default = 0];
  bool has_l1() const;
  void clear_l1();
  float l1() const;
  void set_l1(float value);

  // optional float l2 = 2 [default = 0];
  bool has_l2() const;
  void clear_l2();
  float l2() const;
  void set_l2(float value);

  // @@protoc_insertion_point(class_scope:oneflow.L1L2RegularizerConf)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float l1_;
  float l2_;
  friend struct ::TableStruct_oneflow_2fcore_2fjob_2fregularizer_5fconf_2eproto;
};
// -------------------------------------------------------------------

class RegularizerConf :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:oneflow.RegularizerConf) */ {
 public:
  RegularizerConf();
  virtual ~RegularizerConf();

  RegularizerConf(const RegularizerConf& from);
  RegularizerConf(RegularizerConf&& from) noexcept
    : RegularizerConf() {
    *this = ::std::move(from);
  }

  inline RegularizerConf& operator=(const RegularizerConf& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegularizerConf& operator=(RegularizerConf&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RegularizerConf& default_instance();

  enum TypeCase {
    kL1L2Conf = 1,
    TYPE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RegularizerConf* internal_default_instance() {
    return reinterpret_cast<const RegularizerConf*>(
               &_RegularizerConf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RegularizerConf& a, RegularizerConf& b) {
    a.Swap(&b);
  }
  inline void Swap(RegularizerConf* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RegularizerConf* New() const final {
    return CreateMaybeMessage<RegularizerConf>(nullptr);
  }

  RegularizerConf* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RegularizerConf>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RegularizerConf& from);
  void MergeFrom(const RegularizerConf& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegularizerConf* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "oneflow.RegularizerConf";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_oneflow_2fcore_2fjob_2fregularizer_5fconf_2eproto);
    return ::descriptor_table_oneflow_2fcore_2fjob_2fregularizer_5fconf_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kL1L2ConfFieldNumber = 1,
  };
  // optional .oneflow.L1L2RegularizerConf l1_l2_conf = 1;
  bool has_l1_l2_conf() const;
  void clear_l1_l2_conf();
  const ::oneflow::L1L2RegularizerConf& l1_l2_conf() const;
  ::oneflow::L1L2RegularizerConf* release_l1_l2_conf();
  ::oneflow::L1L2RegularizerConf* mutable_l1_l2_conf();
  void set_allocated_l1_l2_conf(::oneflow::L1L2RegularizerConf* l1_l2_conf);

  void clear_type();
  TypeCase type_case() const;
  // @@protoc_insertion_point(class_scope:oneflow.RegularizerConf)
 private:
  class _Internal;
  void set_has_l1_l2_conf();

  inline bool has_type() const;
  inline void clear_has_type();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  union TypeUnion {
    TypeUnion() {}
    ::oneflow::L1L2RegularizerConf* l1_l2_conf_;
  } type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_oneflow_2fcore_2fjob_2fregularizer_5fconf_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// L1L2RegularizerConf

// optional float l1 = 1 [default = 0];
inline bool L1L2RegularizerConf::has_l1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void L1L2RegularizerConf::clear_l1() {
  l1_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float L1L2RegularizerConf::l1() const {
  // @@protoc_insertion_point(field_get:oneflow.L1L2RegularizerConf.l1)
  return l1_;
}
inline void L1L2RegularizerConf::set_l1(float value) {
  _has_bits_[0] |= 0x00000001u;
  l1_ = value;
  // @@protoc_insertion_point(field_set:oneflow.L1L2RegularizerConf.l1)
}

// optional float l2 = 2 [default = 0];
inline bool L1L2RegularizerConf::has_l2() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void L1L2RegularizerConf::clear_l2() {
  l2_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float L1L2RegularizerConf::l2() const {
  // @@protoc_insertion_point(field_get:oneflow.L1L2RegularizerConf.l2)
  return l2_;
}
inline void L1L2RegularizerConf::set_l2(float value) {
  _has_bits_[0] |= 0x00000002u;
  l2_ = value;
  // @@protoc_insertion_point(field_set:oneflow.L1L2RegularizerConf.l2)
}

// -------------------------------------------------------------------

// RegularizerConf

// optional .oneflow.L1L2RegularizerConf l1_l2_conf = 1;
inline bool RegularizerConf::has_l1_l2_conf() const {
  return type_case() == kL1L2Conf;
}
inline void RegularizerConf::set_has_l1_l2_conf() {
  _oneof_case_[0] = kL1L2Conf;
}
inline void RegularizerConf::clear_l1_l2_conf() {
  if (has_l1_l2_conf()) {
    delete type_.l1_l2_conf_;
    clear_has_type();
  }
}
inline ::oneflow::L1L2RegularizerConf* RegularizerConf::release_l1_l2_conf() {
  // @@protoc_insertion_point(field_release:oneflow.RegularizerConf.l1_l2_conf)
  if (has_l1_l2_conf()) {
    clear_has_type();
      ::oneflow::L1L2RegularizerConf* temp = type_.l1_l2_conf_;
    type_.l1_l2_conf_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::oneflow::L1L2RegularizerConf& RegularizerConf::l1_l2_conf() const {
  // @@protoc_insertion_point(field_get:oneflow.RegularizerConf.l1_l2_conf)
  return has_l1_l2_conf()
      ? *type_.l1_l2_conf_
      : *reinterpret_cast< ::oneflow::L1L2RegularizerConf*>(&::oneflow::_L1L2RegularizerConf_default_instance_);
}
inline ::oneflow::L1L2RegularizerConf* RegularizerConf::mutable_l1_l2_conf() {
  if (!has_l1_l2_conf()) {
    clear_type();
    set_has_l1_l2_conf();
    type_.l1_l2_conf_ = CreateMaybeMessage< ::oneflow::L1L2RegularizerConf >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:oneflow.RegularizerConf.l1_l2_conf)
  return type_.l1_l2_conf_;
}

inline bool RegularizerConf::has_type() const {
  return type_case() != TYPE_NOT_SET;
}
inline void RegularizerConf::clear_has_type() {
  _oneof_case_[0] = TYPE_NOT_SET;
}
inline RegularizerConf::TypeCase RegularizerConf::type_case() const {
  return RegularizerConf::TypeCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace oneflow

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_oneflow_2fcore_2fjob_2fregularizer_5fconf_2eproto
