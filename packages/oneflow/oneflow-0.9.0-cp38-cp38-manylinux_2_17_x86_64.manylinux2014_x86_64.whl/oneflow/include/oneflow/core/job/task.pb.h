// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: oneflow/core/job/task.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_oneflow_2fcore_2fjob_2ftask_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_oneflow_2fcore_2fjob_2ftask_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "oneflow/core/graph/exec_sequence.pb.h"
#include "oneflow/core/register/register_desc.pb.h"
#include "oneflow/core/job/placement.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_oneflow_2fcore_2fjob_2ftask_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_oneflow_2fcore_2fjob_2ftask_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_oneflow_2fcore_2fjob_2ftask_2eproto;
namespace oneflow {
class RegstDescIdSet;
class RegstDescIdSetDefaultTypeInternal;
extern RegstDescIdSetDefaultTypeInternal _RegstDescIdSet_default_instance_;
class TaskProto;
class TaskProtoDefaultTypeInternal;
extern TaskProtoDefaultTypeInternal _TaskProto_default_instance_;
class TaskProto_ConsumedRegstDescIdEntry_DoNotUse;
class TaskProto_ConsumedRegstDescIdEntry_DoNotUseDefaultTypeInternal;
extern TaskProto_ConsumedRegstDescIdEntry_DoNotUseDefaultTypeInternal _TaskProto_ConsumedRegstDescIdEntry_DoNotUse_default_instance_;
class TaskProto_ProducedRegstDescEntry_DoNotUse;
class TaskProto_ProducedRegstDescEntry_DoNotUseDefaultTypeInternal;
extern TaskProto_ProducedRegstDescEntry_DoNotUseDefaultTypeInternal _TaskProto_ProducedRegstDescEntry_DoNotUse_default_instance_;
class TaskSetInfo;
class TaskSetInfoDefaultTypeInternal;
extern TaskSetInfoDefaultTypeInternal _TaskSetInfo_default_instance_;
}  // namespace oneflow
PROTOBUF_NAMESPACE_OPEN
template<> ::oneflow::RegstDescIdSet* Arena::CreateMaybeMessage<::oneflow::RegstDescIdSet>(Arena*);
template<> ::oneflow::TaskProto* Arena::CreateMaybeMessage<::oneflow::TaskProto>(Arena*);
template<> ::oneflow::TaskProto_ConsumedRegstDescIdEntry_DoNotUse* Arena::CreateMaybeMessage<::oneflow::TaskProto_ConsumedRegstDescIdEntry_DoNotUse>(Arena*);
template<> ::oneflow::TaskProto_ProducedRegstDescEntry_DoNotUse* Arena::CreateMaybeMessage<::oneflow::TaskProto_ProducedRegstDescEntry_DoNotUse>(Arena*);
template<> ::oneflow::TaskSetInfo* Arena::CreateMaybeMessage<::oneflow::TaskSetInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace oneflow {

enum TaskType : int {
  kInvalid = 0,
  kNormalForward = 1,
  kCopyHd = 12,
  kCopyCommNet = 13,
  kDeviceTick = 27,
  kPack = 30,
  kUnpack = 31,
  kRepeat = 32,
  kAcc = 33,
  kAccCtrlTick = 34,
  kSrcSubsetTick = 38,
  kDstSubsetTick = 39,
  kSourceTick = 40,
  kTick = 41,
  kAccTick = 42,
  kCase = 43,
  kEsac = 44,
  kWaitAndSendIds = 45,
  kReentrantLock = 46,
  kCallbackNotify = 47,
  kDistributeConcat = 55,
  kDistributeSplit = 56,
  kSliceBoxing = 57,
  kCollectiveBoxingGeneric = 58,
  kBoxingIdentity = 59,
  kDecodeH2D = 60,
  kCollectiveBoxingPack = 61,
  kCollectiveBoxingUnpack = 62,
  kSspVariableProxy = 63,
  kBoxingZeros = 64,
  kCriticalSectionWaitTick = 65,
  kNcclSendRecvBoxing = 66
};
bool TaskType_IsValid(int value);
constexpr TaskType TaskType_MIN = kInvalid;
constexpr TaskType TaskType_MAX = kNcclSendRecvBoxing;
constexpr int TaskType_ARRAYSIZE = TaskType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TaskType_descriptor();
template<typename T>
inline const std::string& TaskType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TaskType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TaskType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TaskType_descriptor(), enum_t_value);
}
inline bool TaskType_Parse(
    const std::string& name, TaskType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TaskType>(
    TaskType_descriptor(), name, value);
}
// ===================================================================

class RegstDescIdSet :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:oneflow.RegstDescIdSet) */ {
 public:
  RegstDescIdSet();
  virtual ~RegstDescIdSet();

  RegstDescIdSet(const RegstDescIdSet& from);
  RegstDescIdSet(RegstDescIdSet&& from) noexcept
    : RegstDescIdSet() {
    *this = ::std::move(from);
  }

  inline RegstDescIdSet& operator=(const RegstDescIdSet& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegstDescIdSet& operator=(RegstDescIdSet&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RegstDescIdSet& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RegstDescIdSet* internal_default_instance() {
    return reinterpret_cast<const RegstDescIdSet*>(
               &_RegstDescIdSet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RegstDescIdSet& a, RegstDescIdSet& b) {
    a.Swap(&b);
  }
  inline void Swap(RegstDescIdSet* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RegstDescIdSet* New() const final {
    return CreateMaybeMessage<RegstDescIdSet>(nullptr);
  }

  RegstDescIdSet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RegstDescIdSet>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RegstDescIdSet& from);
  void MergeFrom(const RegstDescIdSet& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegstDescIdSet* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "oneflow.RegstDescIdSet";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_oneflow_2fcore_2fjob_2ftask_2eproto);
    return ::descriptor_table_oneflow_2fcore_2fjob_2ftask_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRegstDescIdFieldNumber = 1,
  };
  // repeated int64 regst_desc_id = 1;
  int regst_desc_id_size() const;
  void clear_regst_desc_id();
  ::PROTOBUF_NAMESPACE_ID::int64 regst_desc_id(int index) const;
  void set_regst_desc_id(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_regst_desc_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      regst_desc_id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_regst_desc_id();

  // @@protoc_insertion_point(class_scope:oneflow.RegstDescIdSet)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > regst_desc_id_;
  friend struct ::TableStruct_oneflow_2fcore_2fjob_2ftask_2eproto;
};
// -------------------------------------------------------------------

class TaskSetInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:oneflow.TaskSetInfo) */ {
 public:
  TaskSetInfo();
  virtual ~TaskSetInfo();

  TaskSetInfo(const TaskSetInfo& from);
  TaskSetInfo(TaskSetInfo&& from) noexcept
    : TaskSetInfo() {
    *this = ::std::move(from);
  }

  inline TaskSetInfo& operator=(const TaskSetInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline TaskSetInfo& operator=(TaskSetInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TaskSetInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TaskSetInfo* internal_default_instance() {
    return reinterpret_cast<const TaskSetInfo*>(
               &_TaskSetInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TaskSetInfo& a, TaskSetInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(TaskSetInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TaskSetInfo* New() const final {
    return CreateMaybeMessage<TaskSetInfo>(nullptr);
  }

  TaskSetInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TaskSetInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TaskSetInfo& from);
  void MergeFrom(const TaskSetInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TaskSetInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "oneflow.TaskSetInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_oneflow_2fcore_2fjob_2ftask_2eproto);
    return ::descriptor_table_oneflow_2fcore_2fjob_2ftask_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChainIdFieldNumber = 4,
    kOrderInGraphFieldNumber = 5,
  };
  // required int64 chain_id = 4;
  bool has_chain_id() const;
  void clear_chain_id();
  ::PROTOBUF_NAMESPACE_ID::int64 chain_id() const;
  void set_chain_id(::PROTOBUF_NAMESPACE_ID::int64 value);

  // required int64 order_in_graph = 5;
  bool has_order_in_graph() const;
  void clear_order_in_graph();
  ::PROTOBUF_NAMESPACE_ID::int64 order_in_graph() const;
  void set_order_in_graph(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:oneflow.TaskSetInfo)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 chain_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 order_in_graph_;
  friend struct ::TableStruct_oneflow_2fcore_2fjob_2ftask_2eproto;
};
// -------------------------------------------------------------------

class TaskProto_ProducedRegstDescEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<TaskProto_ProducedRegstDescEntry_DoNotUse, 
    std::string, ::oneflow::RegstDescProto,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<TaskProto_ProducedRegstDescEntry_DoNotUse, 
    std::string, ::oneflow::RegstDescProto,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  TaskProto_ProducedRegstDescEntry_DoNotUse();
  TaskProto_ProducedRegstDescEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const TaskProto_ProducedRegstDescEntry_DoNotUse& other);
  static const TaskProto_ProducedRegstDescEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const TaskProto_ProducedRegstDescEntry_DoNotUse*>(&_TaskProto_ProducedRegstDescEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
#ifndef NDEBUG
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
       s->data(), s->size(), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "oneflow.TaskProto.ProducedRegstDescEntry.key");
#endif
    return true;
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_oneflow_2fcore_2fjob_2ftask_2eproto);
    return ::descriptor_table_oneflow_2fcore_2fjob_2ftask_2eproto.file_level_metadata[2];
  }

  public:
};

// -------------------------------------------------------------------

class TaskProto_ConsumedRegstDescIdEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<TaskProto_ConsumedRegstDescIdEntry_DoNotUse, 
    std::string, ::oneflow::RegstDescIdSet,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<TaskProto_ConsumedRegstDescIdEntry_DoNotUse, 
    std::string, ::oneflow::RegstDescIdSet,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  TaskProto_ConsumedRegstDescIdEntry_DoNotUse();
  TaskProto_ConsumedRegstDescIdEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const TaskProto_ConsumedRegstDescIdEntry_DoNotUse& other);
  static const TaskProto_ConsumedRegstDescIdEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const TaskProto_ConsumedRegstDescIdEntry_DoNotUse*>(&_TaskProto_ConsumedRegstDescIdEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
#ifndef NDEBUG
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
       s->data(), s->size(), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "oneflow.TaskProto.ConsumedRegstDescIdEntry.key");
#endif
    return true;
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_oneflow_2fcore_2fjob_2ftask_2eproto);
    return ::descriptor_table_oneflow_2fcore_2fjob_2ftask_2eproto.file_level_metadata[3];
  }

  public:
};

// -------------------------------------------------------------------

class TaskProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:oneflow.TaskProto) */ {
 public:
  TaskProto();
  virtual ~TaskProto();

  TaskProto(const TaskProto& from);
  TaskProto(TaskProto&& from) noexcept
    : TaskProto() {
    *this = ::std::move(from);
  }

  inline TaskProto& operator=(const TaskProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline TaskProto& operator=(TaskProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TaskProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TaskProto* internal_default_instance() {
    return reinterpret_cast<const TaskProto*>(
               &_TaskProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(TaskProto& a, TaskProto& b) {
    a.Swap(&b);
  }
  inline void Swap(TaskProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TaskProto* New() const final {
    return CreateMaybeMessage<TaskProto>(nullptr);
  }

  TaskProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TaskProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TaskProto& from);
  void MergeFrom(const TaskProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TaskProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "oneflow.TaskProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_oneflow_2fcore_2fjob_2ftask_2eproto);
    return ::descriptor_table_oneflow_2fcore_2fjob_2ftask_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kProducedRegstDescFieldNumber = 8,
    kConsumedRegstDescIdFieldNumber = 9,
    kTaskSetInfoFieldNumber = 6,
    kExecSequenceFieldNumber = 7,
    kParallelCtxFieldNumber = 1000,
    kMachineIdFieldNumber = 2,
    kThrdIdFieldNumber = 3,
    kTaskIdFieldNumber = 4,
    kJobIdFieldNumber = 5,
    kTaskTypeFieldNumber = 1,
    kAllRegisterNumEqOneHintFieldNumber = 10,
  };
  // map<string, .oneflow.RegstDescProto> produced_regst_desc = 8;
  int produced_regst_desc_size() const;
  void clear_produced_regst_desc();
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::oneflow::RegstDescProto >&
      produced_regst_desc() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::oneflow::RegstDescProto >*
      mutable_produced_regst_desc();

  // map<string, .oneflow.RegstDescIdSet> consumed_regst_desc_id = 9;
  int consumed_regst_desc_id_size() const;
  void clear_consumed_regst_desc_id();
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::oneflow::RegstDescIdSet >&
      consumed_regst_desc_id() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::oneflow::RegstDescIdSet >*
      mutable_consumed_regst_desc_id();

  // required .oneflow.TaskSetInfo task_set_info = 6;
  bool has_task_set_info() const;
  void clear_task_set_info();
  const ::oneflow::TaskSetInfo& task_set_info() const;
  ::oneflow::TaskSetInfo* release_task_set_info();
  ::oneflow::TaskSetInfo* mutable_task_set_info();
  void set_allocated_task_set_info(::oneflow::TaskSetInfo* task_set_info);

  // required .oneflow.ExecSequence exec_sequence = 7;
  bool has_exec_sequence() const;
  void clear_exec_sequence();
  const ::oneflow::ExecSequence& exec_sequence() const;
  ::oneflow::ExecSequence* release_exec_sequence();
  ::oneflow::ExecSequence* mutable_exec_sequence();
  void set_allocated_exec_sequence(::oneflow::ExecSequence* exec_sequence);

  // optional .oneflow.ParallelContext parallel_ctx = 1000;
  bool has_parallel_ctx() const;
  void clear_parallel_ctx();
  const ::oneflow::ParallelContext& parallel_ctx() const;
  ::oneflow::ParallelContext* release_parallel_ctx();
  ::oneflow::ParallelContext* mutable_parallel_ctx();
  void set_allocated_parallel_ctx(::oneflow::ParallelContext* parallel_ctx);

  // required int64 machine_id = 2;
  bool has_machine_id() const;
  void clear_machine_id();
  ::PROTOBUF_NAMESPACE_ID::int64 machine_id() const;
  void set_machine_id(::PROTOBUF_NAMESPACE_ID::int64 value);

  // required int64 thrd_id = 3;
  bool has_thrd_id() const;
  void clear_thrd_id();
  ::PROTOBUF_NAMESPACE_ID::int64 thrd_id() const;
  void set_thrd_id(::PROTOBUF_NAMESPACE_ID::int64 value);

  // required int64 task_id = 4;
  bool has_task_id() const;
  void clear_task_id();
  ::PROTOBUF_NAMESPACE_ID::int64 task_id() const;
  void set_task_id(::PROTOBUF_NAMESPACE_ID::int64 value);

  // required int64 job_id = 5;
  bool has_job_id() const;
  void clear_job_id();
  ::PROTOBUF_NAMESPACE_ID::int64 job_id() const;
  void set_job_id(::PROTOBUF_NAMESPACE_ID::int64 value);

  // required .oneflow.TaskType task_type = 1;
  bool has_task_type() const;
  void clear_task_type();
  ::oneflow::TaskType task_type() const;
  void set_task_type(::oneflow::TaskType value);

  // optional bool all_register_num_eq_one_hint = 10 [default = false];
  bool has_all_register_num_eq_one_hint() const;
  void clear_all_register_num_eq_one_hint();
  bool all_register_num_eq_one_hint() const;
  void set_all_register_num_eq_one_hint(bool value);

  // @@protoc_insertion_point(class_scope:oneflow.TaskProto)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      TaskProto_ProducedRegstDescEntry_DoNotUse,
      std::string, ::oneflow::RegstDescProto,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > produced_regst_desc_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      TaskProto_ConsumedRegstDescIdEntry_DoNotUse,
      std::string, ::oneflow::RegstDescIdSet,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > consumed_regst_desc_id_;
  ::oneflow::TaskSetInfo* task_set_info_;
  ::oneflow::ExecSequence* exec_sequence_;
  ::oneflow::ParallelContext* parallel_ctx_;
  ::PROTOBUF_NAMESPACE_ID::int64 machine_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 thrd_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 task_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 job_id_;
  int task_type_;
  bool all_register_num_eq_one_hint_;
  friend struct ::TableStruct_oneflow_2fcore_2fjob_2ftask_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RegstDescIdSet

// repeated int64 regst_desc_id = 1;
inline int RegstDescIdSet::regst_desc_id_size() const {
  return regst_desc_id_.size();
}
inline void RegstDescIdSet::clear_regst_desc_id() {
  regst_desc_id_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RegstDescIdSet::regst_desc_id(int index) const {
  // @@protoc_insertion_point(field_get:oneflow.RegstDescIdSet.regst_desc_id)
  return regst_desc_id_.Get(index);
}
inline void RegstDescIdSet::set_regst_desc_id(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  regst_desc_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:oneflow.RegstDescIdSet.regst_desc_id)
}
inline void RegstDescIdSet::add_regst_desc_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  regst_desc_id_.Add(value);
  // @@protoc_insertion_point(field_add:oneflow.RegstDescIdSet.regst_desc_id)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
RegstDescIdSet::regst_desc_id() const {
  // @@protoc_insertion_point(field_list:oneflow.RegstDescIdSet.regst_desc_id)
  return regst_desc_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
RegstDescIdSet::mutable_regst_desc_id() {
  // @@protoc_insertion_point(field_mutable_list:oneflow.RegstDescIdSet.regst_desc_id)
  return &regst_desc_id_;
}

// -------------------------------------------------------------------

// TaskSetInfo

// required int64 chain_id = 4;
inline bool TaskSetInfo::has_chain_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TaskSetInfo::clear_chain_id() {
  chain_id_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TaskSetInfo::chain_id() const {
  // @@protoc_insertion_point(field_get:oneflow.TaskSetInfo.chain_id)
  return chain_id_;
}
inline void TaskSetInfo::set_chain_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  chain_id_ = value;
  // @@protoc_insertion_point(field_set:oneflow.TaskSetInfo.chain_id)
}

// required int64 order_in_graph = 5;
inline bool TaskSetInfo::has_order_in_graph() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TaskSetInfo::clear_order_in_graph() {
  order_in_graph_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TaskSetInfo::order_in_graph() const {
  // @@protoc_insertion_point(field_get:oneflow.TaskSetInfo.order_in_graph)
  return order_in_graph_;
}
inline void TaskSetInfo::set_order_in_graph(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  order_in_graph_ = value;
  // @@protoc_insertion_point(field_set:oneflow.TaskSetInfo.order_in_graph)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// TaskProto

// required .oneflow.TaskType task_type = 1;
inline bool TaskProto::has_task_type() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TaskProto::clear_task_type() {
  task_type_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::oneflow::TaskType TaskProto::task_type() const {
  // @@protoc_insertion_point(field_get:oneflow.TaskProto.task_type)
  return static_cast< ::oneflow::TaskType >(task_type_);
}
inline void TaskProto::set_task_type(::oneflow::TaskType value) {
  assert(::oneflow::TaskType_IsValid(value));
  _has_bits_[0] |= 0x00000080u;
  task_type_ = value;
  // @@protoc_insertion_point(field_set:oneflow.TaskProto.task_type)
}

// required int64 machine_id = 2;
inline bool TaskProto::has_machine_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TaskProto::clear_machine_id() {
  machine_id_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TaskProto::machine_id() const {
  // @@protoc_insertion_point(field_get:oneflow.TaskProto.machine_id)
  return machine_id_;
}
inline void TaskProto::set_machine_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000008u;
  machine_id_ = value;
  // @@protoc_insertion_point(field_set:oneflow.TaskProto.machine_id)
}

// required int64 thrd_id = 3;
inline bool TaskProto::has_thrd_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TaskProto::clear_thrd_id() {
  thrd_id_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TaskProto::thrd_id() const {
  // @@protoc_insertion_point(field_get:oneflow.TaskProto.thrd_id)
  return thrd_id_;
}
inline void TaskProto::set_thrd_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000010u;
  thrd_id_ = value;
  // @@protoc_insertion_point(field_set:oneflow.TaskProto.thrd_id)
}

// required int64 task_id = 4;
inline bool TaskProto::has_task_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TaskProto::clear_task_id() {
  task_id_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TaskProto::task_id() const {
  // @@protoc_insertion_point(field_get:oneflow.TaskProto.task_id)
  return task_id_;
}
inline void TaskProto::set_task_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000020u;
  task_id_ = value;
  // @@protoc_insertion_point(field_set:oneflow.TaskProto.task_id)
}

// required int64 job_id = 5;
inline bool TaskProto::has_job_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TaskProto::clear_job_id() {
  job_id_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TaskProto::job_id() const {
  // @@protoc_insertion_point(field_get:oneflow.TaskProto.job_id)
  return job_id_;
}
inline void TaskProto::set_job_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000040u;
  job_id_ = value;
  // @@protoc_insertion_point(field_set:oneflow.TaskProto.job_id)
}

// required .oneflow.TaskSetInfo task_set_info = 6;
inline bool TaskProto::has_task_set_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TaskProto::clear_task_set_info() {
  if (task_set_info_ != nullptr) task_set_info_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::oneflow::TaskSetInfo& TaskProto::task_set_info() const {
  const ::oneflow::TaskSetInfo* p = task_set_info_;
  // @@protoc_insertion_point(field_get:oneflow.TaskProto.task_set_info)
  return p != nullptr ? *p : *reinterpret_cast<const ::oneflow::TaskSetInfo*>(
      &::oneflow::_TaskSetInfo_default_instance_);
}
inline ::oneflow::TaskSetInfo* TaskProto::release_task_set_info() {
  // @@protoc_insertion_point(field_release:oneflow.TaskProto.task_set_info)
  _has_bits_[0] &= ~0x00000001u;
  ::oneflow::TaskSetInfo* temp = task_set_info_;
  task_set_info_ = nullptr;
  return temp;
}
inline ::oneflow::TaskSetInfo* TaskProto::mutable_task_set_info() {
  _has_bits_[0] |= 0x00000001u;
  if (task_set_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::oneflow::TaskSetInfo>(GetArenaNoVirtual());
    task_set_info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:oneflow.TaskProto.task_set_info)
  return task_set_info_;
}
inline void TaskProto::set_allocated_task_set_info(::oneflow::TaskSetInfo* task_set_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete task_set_info_;
  }
  if (task_set_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      task_set_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, task_set_info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  task_set_info_ = task_set_info;
  // @@protoc_insertion_point(field_set_allocated:oneflow.TaskProto.task_set_info)
}

// required .oneflow.ExecSequence exec_sequence = 7;
inline bool TaskProto::has_exec_sequence() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::oneflow::ExecSequence& TaskProto::exec_sequence() const {
  const ::oneflow::ExecSequence* p = exec_sequence_;
  // @@protoc_insertion_point(field_get:oneflow.TaskProto.exec_sequence)
  return p != nullptr ? *p : *reinterpret_cast<const ::oneflow::ExecSequence*>(
      &::oneflow::_ExecSequence_default_instance_);
}
inline ::oneflow::ExecSequence* TaskProto::release_exec_sequence() {
  // @@protoc_insertion_point(field_release:oneflow.TaskProto.exec_sequence)
  _has_bits_[0] &= ~0x00000002u;
  ::oneflow::ExecSequence* temp = exec_sequence_;
  exec_sequence_ = nullptr;
  return temp;
}
inline ::oneflow::ExecSequence* TaskProto::mutable_exec_sequence() {
  _has_bits_[0] |= 0x00000002u;
  if (exec_sequence_ == nullptr) {
    auto* p = CreateMaybeMessage<::oneflow::ExecSequence>(GetArenaNoVirtual());
    exec_sequence_ = p;
  }
  // @@protoc_insertion_point(field_mutable:oneflow.TaskProto.exec_sequence)
  return exec_sequence_;
}
inline void TaskProto::set_allocated_exec_sequence(::oneflow::ExecSequence* exec_sequence) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(exec_sequence_);
  }
  if (exec_sequence) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      exec_sequence = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, exec_sequence, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  exec_sequence_ = exec_sequence;
  // @@protoc_insertion_point(field_set_allocated:oneflow.TaskProto.exec_sequence)
}

// map<string, .oneflow.RegstDescProto> produced_regst_desc = 8;
inline int TaskProto::produced_regst_desc_size() const {
  return produced_regst_desc_.size();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::oneflow::RegstDescProto >&
TaskProto::produced_regst_desc() const {
  // @@protoc_insertion_point(field_map:oneflow.TaskProto.produced_regst_desc)
  return produced_regst_desc_.GetMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::oneflow::RegstDescProto >*
TaskProto::mutable_produced_regst_desc() {
  // @@protoc_insertion_point(field_mutable_map:oneflow.TaskProto.produced_regst_desc)
  return produced_regst_desc_.MutableMap();
}

// map<string, .oneflow.RegstDescIdSet> consumed_regst_desc_id = 9;
inline int TaskProto::consumed_regst_desc_id_size() const {
  return consumed_regst_desc_id_.size();
}
inline void TaskProto::clear_consumed_regst_desc_id() {
  consumed_regst_desc_id_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::oneflow::RegstDescIdSet >&
TaskProto::consumed_regst_desc_id() const {
  // @@protoc_insertion_point(field_map:oneflow.TaskProto.consumed_regst_desc_id)
  return consumed_regst_desc_id_.GetMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::oneflow::RegstDescIdSet >*
TaskProto::mutable_consumed_regst_desc_id() {
  // @@protoc_insertion_point(field_mutable_map:oneflow.TaskProto.consumed_regst_desc_id)
  return consumed_regst_desc_id_.MutableMap();
}

// optional bool all_register_num_eq_one_hint = 10 [default = false];
inline bool TaskProto::has_all_register_num_eq_one_hint() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TaskProto::clear_all_register_num_eq_one_hint() {
  all_register_num_eq_one_hint_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool TaskProto::all_register_num_eq_one_hint() const {
  // @@protoc_insertion_point(field_get:oneflow.TaskProto.all_register_num_eq_one_hint)
  return all_register_num_eq_one_hint_;
}
inline void TaskProto::set_all_register_num_eq_one_hint(bool value) {
  _has_bits_[0] |= 0x00000100u;
  all_register_num_eq_one_hint_ = value;
  // @@protoc_insertion_point(field_set:oneflow.TaskProto.all_register_num_eq_one_hint)
}

// optional .oneflow.ParallelContext parallel_ctx = 1000;
inline bool TaskProto::has_parallel_ctx() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline const ::oneflow::ParallelContext& TaskProto::parallel_ctx() const {
  const ::oneflow::ParallelContext* p = parallel_ctx_;
  // @@protoc_insertion_point(field_get:oneflow.TaskProto.parallel_ctx)
  return p != nullptr ? *p : *reinterpret_cast<const ::oneflow::ParallelContext*>(
      &::oneflow::_ParallelContext_default_instance_);
}
inline ::oneflow::ParallelContext* TaskProto::release_parallel_ctx() {
  // @@protoc_insertion_point(field_release:oneflow.TaskProto.parallel_ctx)
  _has_bits_[0] &= ~0x00000004u;
  ::oneflow::ParallelContext* temp = parallel_ctx_;
  parallel_ctx_ = nullptr;
  return temp;
}
inline ::oneflow::ParallelContext* TaskProto::mutable_parallel_ctx() {
  _has_bits_[0] |= 0x00000004u;
  if (parallel_ctx_ == nullptr) {
    auto* p = CreateMaybeMessage<::oneflow::ParallelContext>(GetArenaNoVirtual());
    parallel_ctx_ = p;
  }
  // @@protoc_insertion_point(field_mutable:oneflow.TaskProto.parallel_ctx)
  return parallel_ctx_;
}
inline void TaskProto::set_allocated_parallel_ctx(::oneflow::ParallelContext* parallel_ctx) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(parallel_ctx_);
  }
  if (parallel_ctx) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      parallel_ctx = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, parallel_ctx, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  parallel_ctx_ = parallel_ctx;
  // @@protoc_insertion_point(field_set_allocated:oneflow.TaskProto.parallel_ctx)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace oneflow

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::oneflow::TaskType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::oneflow::TaskType>() {
  return ::oneflow::TaskType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_oneflow_2fcore_2fjob_2ftask_2eproto
