// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: oneflow/core/register/op_blob_arg.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_oneflow_2fcore_2fregister_2fop_5fblob_5farg_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_oneflow_2fcore_2fregister_2fop_5fblob_5farg_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_oneflow_2fcore_2fregister_2fop_5fblob_5farg_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_oneflow_2fcore_2fregister_2fop_5fblob_5farg_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_oneflow_2fcore_2fregister_2fop_5fblob_5farg_2eproto;
namespace oneflow {
class OpBlobArg;
class OpBlobArgDefaultTypeInternal;
extern OpBlobArgDefaultTypeInternal _OpBlobArg_default_instance_;
class OpBlobArgList;
class OpBlobArgListDefaultTypeInternal;
extern OpBlobArgListDefaultTypeInternal _OpBlobArgList_default_instance_;
class OpBlobArgPair;
class OpBlobArgPairDefaultTypeInternal;
extern OpBlobArgPairDefaultTypeInternal _OpBlobArgPair_default_instance_;
class OpBlobArgPairs;
class OpBlobArgPairsDefaultTypeInternal;
extern OpBlobArgPairsDefaultTypeInternal _OpBlobArgPairs_default_instance_;
}  // namespace oneflow
PROTOBUF_NAMESPACE_OPEN
template<> ::oneflow::OpBlobArg* Arena::CreateMaybeMessage<::oneflow::OpBlobArg>(Arena*);
template<> ::oneflow::OpBlobArgList* Arena::CreateMaybeMessage<::oneflow::OpBlobArgList>(Arena*);
template<> ::oneflow::OpBlobArgPair* Arena::CreateMaybeMessage<::oneflow::OpBlobArgPair>(Arena*);
template<> ::oneflow::OpBlobArgPairs* Arena::CreateMaybeMessage<::oneflow::OpBlobArgPairs>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace oneflow {

// ===================================================================

class OpBlobArg :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:oneflow.OpBlobArg) */ {
 public:
  OpBlobArg();
  virtual ~OpBlobArg();

  OpBlobArg(const OpBlobArg& from);
  OpBlobArg(OpBlobArg&& from) noexcept
    : OpBlobArg() {
    *this = ::std::move(from);
  }

  inline OpBlobArg& operator=(const OpBlobArg& from) {
    CopyFrom(from);
    return *this;
  }
  inline OpBlobArg& operator=(OpBlobArg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OpBlobArg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OpBlobArg* internal_default_instance() {
    return reinterpret_cast<const OpBlobArg*>(
               &_OpBlobArg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(OpBlobArg& a, OpBlobArg& b) {
    a.Swap(&b);
  }
  inline void Swap(OpBlobArg* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OpBlobArg* New() const final {
    return CreateMaybeMessage<OpBlobArg>(nullptr);
  }

  OpBlobArg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OpBlobArg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OpBlobArg& from);
  void MergeFrom(const OpBlobArg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OpBlobArg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "oneflow.OpBlobArg";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_oneflow_2fcore_2fregister_2fop_5fblob_5farg_2eproto);
    return ::descriptor_table_oneflow_2fcore_2fregister_2fop_5fblob_5farg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOpNameFieldNumber = 1,
    kBnInOpFieldNumber = 2,
  };
  // required string op_name = 1;
  bool has_op_name() const;
  void clear_op_name();
  const std::string& op_name() const;
  void set_op_name(const std::string& value);
  void set_op_name(std::string&& value);
  void set_op_name(const char* value);
  void set_op_name(const char* value, size_t size);
  std::string* mutable_op_name();
  std::string* release_op_name();
  void set_allocated_op_name(std::string* op_name);

  // required string bn_in_op = 2;
  bool has_bn_in_op() const;
  void clear_bn_in_op();
  const std::string& bn_in_op() const;
  void set_bn_in_op(const std::string& value);
  void set_bn_in_op(std::string&& value);
  void set_bn_in_op(const char* value);
  void set_bn_in_op(const char* value, size_t size);
  std::string* mutable_bn_in_op();
  std::string* release_bn_in_op();
  void set_allocated_bn_in_op(std::string* bn_in_op);

  // @@protoc_insertion_point(class_scope:oneflow.OpBlobArg)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr op_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bn_in_op_;
  friend struct ::TableStruct_oneflow_2fcore_2fregister_2fop_5fblob_5farg_2eproto;
};
// -------------------------------------------------------------------

class OpBlobArgPair :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:oneflow.OpBlobArgPair) */ {
 public:
  OpBlobArgPair();
  virtual ~OpBlobArgPair();

  OpBlobArgPair(const OpBlobArgPair& from);
  OpBlobArgPair(OpBlobArgPair&& from) noexcept
    : OpBlobArgPair() {
    *this = ::std::move(from);
  }

  inline OpBlobArgPair& operator=(const OpBlobArgPair& from) {
    CopyFrom(from);
    return *this;
  }
  inline OpBlobArgPair& operator=(OpBlobArgPair&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OpBlobArgPair& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OpBlobArgPair* internal_default_instance() {
    return reinterpret_cast<const OpBlobArgPair*>(
               &_OpBlobArgPair_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(OpBlobArgPair& a, OpBlobArgPair& b) {
    a.Swap(&b);
  }
  inline void Swap(OpBlobArgPair* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OpBlobArgPair* New() const final {
    return CreateMaybeMessage<OpBlobArgPair>(nullptr);
  }

  OpBlobArgPair* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OpBlobArgPair>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OpBlobArgPair& from);
  void MergeFrom(const OpBlobArgPair& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OpBlobArgPair* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "oneflow.OpBlobArgPair";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_oneflow_2fcore_2fregister_2fop_5fblob_5farg_2eproto);
    return ::descriptor_table_oneflow_2fcore_2fregister_2fop_5fblob_5farg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFirstFieldNumber = 1,
    kSecondFieldNumber = 2,
  };
  // required .oneflow.OpBlobArg first = 1;
  bool has_first() const;
  void clear_first();
  const ::oneflow::OpBlobArg& first() const;
  ::oneflow::OpBlobArg* release_first();
  ::oneflow::OpBlobArg* mutable_first();
  void set_allocated_first(::oneflow::OpBlobArg* first);

  // required .oneflow.OpBlobArg second = 2;
  bool has_second() const;
  void clear_second();
  const ::oneflow::OpBlobArg& second() const;
  ::oneflow::OpBlobArg* release_second();
  ::oneflow::OpBlobArg* mutable_second();
  void set_allocated_second(::oneflow::OpBlobArg* second);

  // @@protoc_insertion_point(class_scope:oneflow.OpBlobArgPair)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::oneflow::OpBlobArg* first_;
  ::oneflow::OpBlobArg* second_;
  friend struct ::TableStruct_oneflow_2fcore_2fregister_2fop_5fblob_5farg_2eproto;
};
// -------------------------------------------------------------------

class OpBlobArgPairs :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:oneflow.OpBlobArgPairs) */ {
 public:
  OpBlobArgPairs();
  virtual ~OpBlobArgPairs();

  OpBlobArgPairs(const OpBlobArgPairs& from);
  OpBlobArgPairs(OpBlobArgPairs&& from) noexcept
    : OpBlobArgPairs() {
    *this = ::std::move(from);
  }

  inline OpBlobArgPairs& operator=(const OpBlobArgPairs& from) {
    CopyFrom(from);
    return *this;
  }
  inline OpBlobArgPairs& operator=(OpBlobArgPairs&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OpBlobArgPairs& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OpBlobArgPairs* internal_default_instance() {
    return reinterpret_cast<const OpBlobArgPairs*>(
               &_OpBlobArgPairs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(OpBlobArgPairs& a, OpBlobArgPairs& b) {
    a.Swap(&b);
  }
  inline void Swap(OpBlobArgPairs* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OpBlobArgPairs* New() const final {
    return CreateMaybeMessage<OpBlobArgPairs>(nullptr);
  }

  OpBlobArgPairs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OpBlobArgPairs>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OpBlobArgPairs& from);
  void MergeFrom(const OpBlobArgPairs& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OpBlobArgPairs* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "oneflow.OpBlobArgPairs";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_oneflow_2fcore_2fregister_2fop_5fblob_5farg_2eproto);
    return ::descriptor_table_oneflow_2fcore_2fregister_2fop_5fblob_5farg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPairFieldNumber = 1,
  };
  // repeated .oneflow.OpBlobArgPair pair = 1;
  int pair_size() const;
  void clear_pair();
  ::oneflow::OpBlobArgPair* mutable_pair(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oneflow::OpBlobArgPair >*
      mutable_pair();
  const ::oneflow::OpBlobArgPair& pair(int index) const;
  ::oneflow::OpBlobArgPair* add_pair();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oneflow::OpBlobArgPair >&
      pair() const;

  // @@protoc_insertion_point(class_scope:oneflow.OpBlobArgPairs)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oneflow::OpBlobArgPair > pair_;
  friend struct ::TableStruct_oneflow_2fcore_2fregister_2fop_5fblob_5farg_2eproto;
};
// -------------------------------------------------------------------

class OpBlobArgList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:oneflow.OpBlobArgList) */ {
 public:
  OpBlobArgList();
  virtual ~OpBlobArgList();

  OpBlobArgList(const OpBlobArgList& from);
  OpBlobArgList(OpBlobArgList&& from) noexcept
    : OpBlobArgList() {
    *this = ::std::move(from);
  }

  inline OpBlobArgList& operator=(const OpBlobArgList& from) {
    CopyFrom(from);
    return *this;
  }
  inline OpBlobArgList& operator=(OpBlobArgList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OpBlobArgList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OpBlobArgList* internal_default_instance() {
    return reinterpret_cast<const OpBlobArgList*>(
               &_OpBlobArgList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(OpBlobArgList& a, OpBlobArgList& b) {
    a.Swap(&b);
  }
  inline void Swap(OpBlobArgList* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OpBlobArgList* New() const final {
    return CreateMaybeMessage<OpBlobArgList>(nullptr);
  }

  OpBlobArgList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OpBlobArgList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OpBlobArgList& from);
  void MergeFrom(const OpBlobArgList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OpBlobArgList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "oneflow.OpBlobArgList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_oneflow_2fcore_2fregister_2fop_5fblob_5farg_2eproto);
    return ::descriptor_table_oneflow_2fcore_2fregister_2fop_5fblob_5farg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObaFieldNumber = 1,
  };
  // repeated .oneflow.OpBlobArg oba = 1;
  int oba_size() const;
  void clear_oba();
  ::oneflow::OpBlobArg* mutable_oba(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oneflow::OpBlobArg >*
      mutable_oba();
  const ::oneflow::OpBlobArg& oba(int index) const;
  ::oneflow::OpBlobArg* add_oba();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oneflow::OpBlobArg >&
      oba() const;

  // @@protoc_insertion_point(class_scope:oneflow.OpBlobArgList)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oneflow::OpBlobArg > oba_;
  friend struct ::TableStruct_oneflow_2fcore_2fregister_2fop_5fblob_5farg_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// OpBlobArg

// required string op_name = 1;
inline bool OpBlobArg::has_op_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OpBlobArg::clear_op_name() {
  op_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& OpBlobArg::op_name() const {
  // @@protoc_insertion_point(field_get:oneflow.OpBlobArg.op_name)
  return op_name_.GetNoArena();
}
inline void OpBlobArg::set_op_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  op_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:oneflow.OpBlobArg.op_name)
}
inline void OpBlobArg::set_op_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  op_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:oneflow.OpBlobArg.op_name)
}
inline void OpBlobArg::set_op_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  op_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:oneflow.OpBlobArg.op_name)
}
inline void OpBlobArg::set_op_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  op_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:oneflow.OpBlobArg.op_name)
}
inline std::string* OpBlobArg::mutable_op_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:oneflow.OpBlobArg.op_name)
  return op_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* OpBlobArg::release_op_name() {
  // @@protoc_insertion_point(field_release:oneflow.OpBlobArg.op_name)
  if (!has_op_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return op_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void OpBlobArg::set_allocated_op_name(std::string* op_name) {
  if (op_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  op_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), op_name);
  // @@protoc_insertion_point(field_set_allocated:oneflow.OpBlobArg.op_name)
}

// required string bn_in_op = 2;
inline bool OpBlobArg::has_bn_in_op() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OpBlobArg::clear_bn_in_op() {
  bn_in_op_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& OpBlobArg::bn_in_op() const {
  // @@protoc_insertion_point(field_get:oneflow.OpBlobArg.bn_in_op)
  return bn_in_op_.GetNoArena();
}
inline void OpBlobArg::set_bn_in_op(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  bn_in_op_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:oneflow.OpBlobArg.bn_in_op)
}
inline void OpBlobArg::set_bn_in_op(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  bn_in_op_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:oneflow.OpBlobArg.bn_in_op)
}
inline void OpBlobArg::set_bn_in_op(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  bn_in_op_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:oneflow.OpBlobArg.bn_in_op)
}
inline void OpBlobArg::set_bn_in_op(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  bn_in_op_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:oneflow.OpBlobArg.bn_in_op)
}
inline std::string* OpBlobArg::mutable_bn_in_op() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:oneflow.OpBlobArg.bn_in_op)
  return bn_in_op_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* OpBlobArg::release_bn_in_op() {
  // @@protoc_insertion_point(field_release:oneflow.OpBlobArg.bn_in_op)
  if (!has_bn_in_op()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return bn_in_op_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void OpBlobArg::set_allocated_bn_in_op(std::string* bn_in_op) {
  if (bn_in_op != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  bn_in_op_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bn_in_op);
  // @@protoc_insertion_point(field_set_allocated:oneflow.OpBlobArg.bn_in_op)
}

// -------------------------------------------------------------------

// OpBlobArgPair

// required .oneflow.OpBlobArg first = 1;
inline bool OpBlobArgPair::has_first() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OpBlobArgPair::clear_first() {
  if (first_ != nullptr) first_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::oneflow::OpBlobArg& OpBlobArgPair::first() const {
  const ::oneflow::OpBlobArg* p = first_;
  // @@protoc_insertion_point(field_get:oneflow.OpBlobArgPair.first)
  return p != nullptr ? *p : *reinterpret_cast<const ::oneflow::OpBlobArg*>(
      &::oneflow::_OpBlobArg_default_instance_);
}
inline ::oneflow::OpBlobArg* OpBlobArgPair::release_first() {
  // @@protoc_insertion_point(field_release:oneflow.OpBlobArgPair.first)
  _has_bits_[0] &= ~0x00000001u;
  ::oneflow::OpBlobArg* temp = first_;
  first_ = nullptr;
  return temp;
}
inline ::oneflow::OpBlobArg* OpBlobArgPair::mutable_first() {
  _has_bits_[0] |= 0x00000001u;
  if (first_ == nullptr) {
    auto* p = CreateMaybeMessage<::oneflow::OpBlobArg>(GetArenaNoVirtual());
    first_ = p;
  }
  // @@protoc_insertion_point(field_mutable:oneflow.OpBlobArgPair.first)
  return first_;
}
inline void OpBlobArgPair::set_allocated_first(::oneflow::OpBlobArg* first) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete first_;
  }
  if (first) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      first = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, first, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  first_ = first;
  // @@protoc_insertion_point(field_set_allocated:oneflow.OpBlobArgPair.first)
}

// required .oneflow.OpBlobArg second = 2;
inline bool OpBlobArgPair::has_second() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OpBlobArgPair::clear_second() {
  if (second_ != nullptr) second_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::oneflow::OpBlobArg& OpBlobArgPair::second() const {
  const ::oneflow::OpBlobArg* p = second_;
  // @@protoc_insertion_point(field_get:oneflow.OpBlobArgPair.second)
  return p != nullptr ? *p : *reinterpret_cast<const ::oneflow::OpBlobArg*>(
      &::oneflow::_OpBlobArg_default_instance_);
}
inline ::oneflow::OpBlobArg* OpBlobArgPair::release_second() {
  // @@protoc_insertion_point(field_release:oneflow.OpBlobArgPair.second)
  _has_bits_[0] &= ~0x00000002u;
  ::oneflow::OpBlobArg* temp = second_;
  second_ = nullptr;
  return temp;
}
inline ::oneflow::OpBlobArg* OpBlobArgPair::mutable_second() {
  _has_bits_[0] |= 0x00000002u;
  if (second_ == nullptr) {
    auto* p = CreateMaybeMessage<::oneflow::OpBlobArg>(GetArenaNoVirtual());
    second_ = p;
  }
  // @@protoc_insertion_point(field_mutable:oneflow.OpBlobArgPair.second)
  return second_;
}
inline void OpBlobArgPair::set_allocated_second(::oneflow::OpBlobArg* second) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete second_;
  }
  if (second) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      second = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, second, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  second_ = second;
  // @@protoc_insertion_point(field_set_allocated:oneflow.OpBlobArgPair.second)
}

// -------------------------------------------------------------------

// OpBlobArgPairs

// repeated .oneflow.OpBlobArgPair pair = 1;
inline int OpBlobArgPairs::pair_size() const {
  return pair_.size();
}
inline void OpBlobArgPairs::clear_pair() {
  pair_.Clear();
}
inline ::oneflow::OpBlobArgPair* OpBlobArgPairs::mutable_pair(int index) {
  // @@protoc_insertion_point(field_mutable:oneflow.OpBlobArgPairs.pair)
  return pair_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oneflow::OpBlobArgPair >*
OpBlobArgPairs::mutable_pair() {
  // @@protoc_insertion_point(field_mutable_list:oneflow.OpBlobArgPairs.pair)
  return &pair_;
}
inline const ::oneflow::OpBlobArgPair& OpBlobArgPairs::pair(int index) const {
  // @@protoc_insertion_point(field_get:oneflow.OpBlobArgPairs.pair)
  return pair_.Get(index);
}
inline ::oneflow::OpBlobArgPair* OpBlobArgPairs::add_pair() {
  // @@protoc_insertion_point(field_add:oneflow.OpBlobArgPairs.pair)
  return pair_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oneflow::OpBlobArgPair >&
OpBlobArgPairs::pair() const {
  // @@protoc_insertion_point(field_list:oneflow.OpBlobArgPairs.pair)
  return pair_;
}

// -------------------------------------------------------------------

// OpBlobArgList

// repeated .oneflow.OpBlobArg oba = 1;
inline int OpBlobArgList::oba_size() const {
  return oba_.size();
}
inline void OpBlobArgList::clear_oba() {
  oba_.Clear();
}
inline ::oneflow::OpBlobArg* OpBlobArgList::mutable_oba(int index) {
  // @@protoc_insertion_point(field_mutable:oneflow.OpBlobArgList.oba)
  return oba_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oneflow::OpBlobArg >*
OpBlobArgList::mutable_oba() {
  // @@protoc_insertion_point(field_mutable_list:oneflow.OpBlobArgList.oba)
  return &oba_;
}
inline const ::oneflow::OpBlobArg& OpBlobArgList::oba(int index) const {
  // @@protoc_insertion_point(field_get:oneflow.OpBlobArgList.oba)
  return oba_.Get(index);
}
inline ::oneflow::OpBlobArg* OpBlobArgList::add_oba() {
  // @@protoc_insertion_point(field_add:oneflow.OpBlobArgList.oba)
  return oba_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oneflow::OpBlobArg >&
OpBlobArgList::oba() const {
  // @@protoc_insertion_point(field_list:oneflow.OpBlobArgList.oba)
  return oba_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace oneflow

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_oneflow_2fcore_2fregister_2fop_5fblob_5farg_2eproto
