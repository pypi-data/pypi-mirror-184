// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: oneflow/core/summary/summary.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_oneflow_2fcore_2fsummary_2fsummary_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_oneflow_2fcore_2fsummary_2fsummary_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "oneflow/core/summary/tensor.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_oneflow_2fcore_2fsummary_2fsummary_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_oneflow_2fcore_2fsummary_2fsummary_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_oneflow_2fcore_2fsummary_2fsummary_2eproto;
namespace oneflow {
namespace summary {
class HistogramProto;
class HistogramProtoDefaultTypeInternal;
extern HistogramProtoDefaultTypeInternal _HistogramProto_default_instance_;
class Image;
class ImageDefaultTypeInternal;
extern ImageDefaultTypeInternal _Image_default_instance_;
class Summary;
class SummaryDefaultTypeInternal;
extern SummaryDefaultTypeInternal _Summary_default_instance_;
class SummaryMetadata;
class SummaryMetadataDefaultTypeInternal;
extern SummaryMetadataDefaultTypeInternal _SummaryMetadata_default_instance_;
class SummaryMetadata_PluginData;
class SummaryMetadata_PluginDataDefaultTypeInternal;
extern SummaryMetadata_PluginDataDefaultTypeInternal _SummaryMetadata_PluginData_default_instance_;
class Summary_Value;
class Summary_ValueDefaultTypeInternal;
extern Summary_ValueDefaultTypeInternal _Summary_Value_default_instance_;
}  // namespace summary
}  // namespace oneflow
PROTOBUF_NAMESPACE_OPEN
template<> ::oneflow::summary::HistogramProto* Arena::CreateMaybeMessage<::oneflow::summary::HistogramProto>(Arena*);
template<> ::oneflow::summary::Image* Arena::CreateMaybeMessage<::oneflow::summary::Image>(Arena*);
template<> ::oneflow::summary::Summary* Arena::CreateMaybeMessage<::oneflow::summary::Summary>(Arena*);
template<> ::oneflow::summary::SummaryMetadata* Arena::CreateMaybeMessage<::oneflow::summary::SummaryMetadata>(Arena*);
template<> ::oneflow::summary::SummaryMetadata_PluginData* Arena::CreateMaybeMessage<::oneflow::summary::SummaryMetadata_PluginData>(Arena*);
template<> ::oneflow::summary::Summary_Value* Arena::CreateMaybeMessage<::oneflow::summary::Summary_Value>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace oneflow {
namespace summary {

// ===================================================================

class SummaryMetadata_PluginData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:oneflow.summary.SummaryMetadata.PluginData) */ {
 public:
  SummaryMetadata_PluginData();
  virtual ~SummaryMetadata_PluginData();

  SummaryMetadata_PluginData(const SummaryMetadata_PluginData& from);
  SummaryMetadata_PluginData(SummaryMetadata_PluginData&& from) noexcept
    : SummaryMetadata_PluginData() {
    *this = ::std::move(from);
  }

  inline SummaryMetadata_PluginData& operator=(const SummaryMetadata_PluginData& from) {
    CopyFrom(from);
    return *this;
  }
  inline SummaryMetadata_PluginData& operator=(SummaryMetadata_PluginData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SummaryMetadata_PluginData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SummaryMetadata_PluginData* internal_default_instance() {
    return reinterpret_cast<const SummaryMetadata_PluginData*>(
               &_SummaryMetadata_PluginData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SummaryMetadata_PluginData& a, SummaryMetadata_PluginData& b) {
    a.Swap(&b);
  }
  inline void Swap(SummaryMetadata_PluginData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SummaryMetadata_PluginData* New() const final {
    return CreateMaybeMessage<SummaryMetadata_PluginData>(nullptr);
  }

  SummaryMetadata_PluginData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SummaryMetadata_PluginData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SummaryMetadata_PluginData& from);
  void MergeFrom(const SummaryMetadata_PluginData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SummaryMetadata_PluginData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "oneflow.summary.SummaryMetadata.PluginData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_oneflow_2fcore_2fsummary_2fsummary_2eproto);
    return ::descriptor_table_oneflow_2fcore_2fsummary_2fsummary_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPluginNameFieldNumber = 1,
    kContentFieldNumber = 2,
  };
  // required string plugin_name = 1;
  bool has_plugin_name() const;
  void clear_plugin_name();
  const std::string& plugin_name() const;
  void set_plugin_name(const std::string& value);
  void set_plugin_name(std::string&& value);
  void set_plugin_name(const char* value);
  void set_plugin_name(const char* value, size_t size);
  std::string* mutable_plugin_name();
  std::string* release_plugin_name();
  void set_allocated_plugin_name(std::string* plugin_name);

  // optional bytes content = 2;
  bool has_content() const;
  void clear_content();
  const std::string& content() const;
  void set_content(const std::string& value);
  void set_content(std::string&& value);
  void set_content(const char* value);
  void set_content(const void* value, size_t size);
  std::string* mutable_content();
  std::string* release_content();
  void set_allocated_content(std::string* content);

  // @@protoc_insertion_point(class_scope:oneflow.summary.SummaryMetadata.PluginData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr plugin_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
  friend struct ::TableStruct_oneflow_2fcore_2fsummary_2fsummary_2eproto;
};
// -------------------------------------------------------------------

class SummaryMetadata :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:oneflow.summary.SummaryMetadata) */ {
 public:
  SummaryMetadata();
  virtual ~SummaryMetadata();

  SummaryMetadata(const SummaryMetadata& from);
  SummaryMetadata(SummaryMetadata&& from) noexcept
    : SummaryMetadata() {
    *this = ::std::move(from);
  }

  inline SummaryMetadata& operator=(const SummaryMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline SummaryMetadata& operator=(SummaryMetadata&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SummaryMetadata& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SummaryMetadata* internal_default_instance() {
    return reinterpret_cast<const SummaryMetadata*>(
               &_SummaryMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SummaryMetadata& a, SummaryMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(SummaryMetadata* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SummaryMetadata* New() const final {
    return CreateMaybeMessage<SummaryMetadata>(nullptr);
  }

  SummaryMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SummaryMetadata>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SummaryMetadata& from);
  void MergeFrom(const SummaryMetadata& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SummaryMetadata* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "oneflow.summary.SummaryMetadata";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_oneflow_2fcore_2fsummary_2fsummary_2eproto);
    return ::descriptor_table_oneflow_2fcore_2fsummary_2fsummary_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef SummaryMetadata_PluginData PluginData;

  // accessors -------------------------------------------------------

  enum : int {
    kDisplayNameFieldNumber = 2,
    kSummaryDescriptionFieldNumber = 3,
    kPluginDataFieldNumber = 1,
  };
  // optional string display_name = 2;
  bool has_display_name() const;
  void clear_display_name();
  const std::string& display_name() const;
  void set_display_name(const std::string& value);
  void set_display_name(std::string&& value);
  void set_display_name(const char* value);
  void set_display_name(const char* value, size_t size);
  std::string* mutable_display_name();
  std::string* release_display_name();
  void set_allocated_display_name(std::string* display_name);

  // optional string summary_description = 3;
  bool has_summary_description() const;
  void clear_summary_description();
  const std::string& summary_description() const;
  void set_summary_description(const std::string& value);
  void set_summary_description(std::string&& value);
  void set_summary_description(const char* value);
  void set_summary_description(const char* value, size_t size);
  std::string* mutable_summary_description();
  std::string* release_summary_description();
  void set_allocated_summary_description(std::string* summary_description);

  // required .oneflow.summary.SummaryMetadata.PluginData plugin_data = 1;
  bool has_plugin_data() const;
  void clear_plugin_data();
  const ::oneflow::summary::SummaryMetadata_PluginData& plugin_data() const;
  ::oneflow::summary::SummaryMetadata_PluginData* release_plugin_data();
  ::oneflow::summary::SummaryMetadata_PluginData* mutable_plugin_data();
  void set_allocated_plugin_data(::oneflow::summary::SummaryMetadata_PluginData* plugin_data);

  // @@protoc_insertion_point(class_scope:oneflow.summary.SummaryMetadata)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr display_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr summary_description_;
  ::oneflow::summary::SummaryMetadata_PluginData* plugin_data_;
  friend struct ::TableStruct_oneflow_2fcore_2fsummary_2fsummary_2eproto;
};
// -------------------------------------------------------------------

class HistogramProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:oneflow.summary.HistogramProto) */ {
 public:
  HistogramProto();
  virtual ~HistogramProto();

  HistogramProto(const HistogramProto& from);
  HistogramProto(HistogramProto&& from) noexcept
    : HistogramProto() {
    *this = ::std::move(from);
  }

  inline HistogramProto& operator=(const HistogramProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline HistogramProto& operator=(HistogramProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HistogramProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HistogramProto* internal_default_instance() {
    return reinterpret_cast<const HistogramProto*>(
               &_HistogramProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(HistogramProto& a, HistogramProto& b) {
    a.Swap(&b);
  }
  inline void Swap(HistogramProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HistogramProto* New() const final {
    return CreateMaybeMessage<HistogramProto>(nullptr);
  }

  HistogramProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HistogramProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HistogramProto& from);
  void MergeFrom(const HistogramProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HistogramProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "oneflow.summary.HistogramProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_oneflow_2fcore_2fsummary_2fsummary_2eproto);
    return ::descriptor_table_oneflow_2fcore_2fsummary_2fsummary_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBucketLimitFieldNumber = 6,
    kBucketFieldNumber = 7,
    kMinFieldNumber = 1,
    kMaxFieldNumber = 2,
    kNumFieldNumber = 3,
    kSumFieldNumber = 4,
    kSumSquaresFieldNumber = 5,
  };
  // repeated double bucket_limit = 6 [packed = true];
  int bucket_limit_size() const;
  void clear_bucket_limit();
  double bucket_limit(int index) const;
  void set_bucket_limit(int index, double value);
  void add_bucket_limit(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      bucket_limit() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_bucket_limit();

  // repeated double bucket = 7 [packed = true];
  int bucket_size() const;
  void clear_bucket();
  double bucket(int index) const;
  void set_bucket(int index, double value);
  void add_bucket(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      bucket() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_bucket();

  // required double min = 1;
  bool has_min() const;
  void clear_min();
  double min() const;
  void set_min(double value);

  // required double max = 2;
  bool has_max() const;
  void clear_max();
  double max() const;
  void set_max(double value);

  // required double num = 3;
  bool has_num() const;
  void clear_num();
  double num() const;
  void set_num(double value);

  // required double sum = 4;
  bool has_sum() const;
  void clear_sum();
  double sum() const;
  void set_sum(double value);

  // required double sum_squares = 5;
  bool has_sum_squares() const;
  void clear_sum_squares();
  double sum_squares() const;
  void set_sum_squares(double value);

  // @@protoc_insertion_point(class_scope:oneflow.summary.HistogramProto)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > bucket_limit_;
  mutable std::atomic<int> _bucket_limit_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > bucket_;
  mutable std::atomic<int> _bucket_cached_byte_size_;
  double min_;
  double max_;
  double num_;
  double sum_;
  double sum_squares_;
  friend struct ::TableStruct_oneflow_2fcore_2fsummary_2fsummary_2eproto;
};
// -------------------------------------------------------------------

class Image :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:oneflow.summary.Image) */ {
 public:
  Image();
  virtual ~Image();

  Image(const Image& from);
  Image(Image&& from) noexcept
    : Image() {
    *this = ::std::move(from);
  }

  inline Image& operator=(const Image& from) {
    CopyFrom(from);
    return *this;
  }
  inline Image& operator=(Image&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Image& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Image* internal_default_instance() {
    return reinterpret_cast<const Image*>(
               &_Image_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Image& a, Image& b) {
    a.Swap(&b);
  }
  inline void Swap(Image* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Image* New() const final {
    return CreateMaybeMessage<Image>(nullptr);
  }

  Image* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Image>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Image& from);
  void MergeFrom(const Image& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Image* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "oneflow.summary.Image";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_oneflow_2fcore_2fsummary_2fsummary_2eproto);
    return ::descriptor_table_oneflow_2fcore_2fsummary_2fsummary_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEncodedImageStringFieldNumber = 4,
    kHeightFieldNumber = 1,
    kWidthFieldNumber = 2,
    kColorspaceFieldNumber = 3,
  };
  // required bytes encoded_image_string = 4;
  bool has_encoded_image_string() const;
  void clear_encoded_image_string();
  const std::string& encoded_image_string() const;
  void set_encoded_image_string(const std::string& value);
  void set_encoded_image_string(std::string&& value);
  void set_encoded_image_string(const char* value);
  void set_encoded_image_string(const void* value, size_t size);
  std::string* mutable_encoded_image_string();
  std::string* release_encoded_image_string();
  void set_allocated_encoded_image_string(std::string* encoded_image_string);

  // required int32 height = 1;
  bool has_height() const;
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::int32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::int32 value);

  // required int32 width = 2;
  bool has_width() const;
  void clear_width();
  ::PROTOBUF_NAMESPACE_ID::int32 width() const;
  void set_width(::PROTOBUF_NAMESPACE_ID::int32 value);

  // required int32 colorspace = 3;
  bool has_colorspace() const;
  void clear_colorspace();
  ::PROTOBUF_NAMESPACE_ID::int32 colorspace() const;
  void set_colorspace(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:oneflow.summary.Image)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr encoded_image_string_;
  ::PROTOBUF_NAMESPACE_ID::int32 height_;
  ::PROTOBUF_NAMESPACE_ID::int32 width_;
  ::PROTOBUF_NAMESPACE_ID::int32 colorspace_;
  friend struct ::TableStruct_oneflow_2fcore_2fsummary_2fsummary_2eproto;
};
// -------------------------------------------------------------------

class Summary_Value :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:oneflow.summary.Summary.Value) */ {
 public:
  Summary_Value();
  virtual ~Summary_Value();

  Summary_Value(const Summary_Value& from);
  Summary_Value(Summary_Value&& from) noexcept
    : Summary_Value() {
    *this = ::std::move(from);
  }

  inline Summary_Value& operator=(const Summary_Value& from) {
    CopyFrom(from);
    return *this;
  }
  inline Summary_Value& operator=(Summary_Value&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Summary_Value& default_instance();

  enum ValueCase {
    kSimpleValue = 2,
    kObsoleteOldStyleHistogram = 3,
    kImage = 4,
    kHisto = 5,
    kTensor = 8,
    VALUE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Summary_Value* internal_default_instance() {
    return reinterpret_cast<const Summary_Value*>(
               &_Summary_Value_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Summary_Value& a, Summary_Value& b) {
    a.Swap(&b);
  }
  inline void Swap(Summary_Value* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Summary_Value* New() const final {
    return CreateMaybeMessage<Summary_Value>(nullptr);
  }

  Summary_Value* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Summary_Value>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Summary_Value& from);
  void MergeFrom(const Summary_Value& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Summary_Value* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "oneflow.summary.Summary.Value";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_oneflow_2fcore_2fsummary_2fsummary_2eproto);
    return ::descriptor_table_oneflow_2fcore_2fsummary_2fsummary_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTagFieldNumber = 1,
    kNodeNameFieldNumber = 7,
    kMetadataFieldNumber = 9,
    kSimpleValueFieldNumber = 2,
    kObsoleteOldStyleHistogramFieldNumber = 3,
    kImageFieldNumber = 4,
    kHistoFieldNumber = 5,
    kTensorFieldNumber = 8,
  };
  // required string tag = 1;
  bool has_tag() const;
  void clear_tag();
  const std::string& tag() const;
  void set_tag(const std::string& value);
  void set_tag(std::string&& value);
  void set_tag(const char* value);
  void set_tag(const char* value, size_t size);
  std::string* mutable_tag();
  std::string* release_tag();
  void set_allocated_tag(std::string* tag);

  // optional string node_name = 7;
  bool has_node_name() const;
  void clear_node_name();
  const std::string& node_name() const;
  void set_node_name(const std::string& value);
  void set_node_name(std::string&& value);
  void set_node_name(const char* value);
  void set_node_name(const char* value, size_t size);
  std::string* mutable_node_name();
  std::string* release_node_name();
  void set_allocated_node_name(std::string* node_name);

  // optional .oneflow.summary.SummaryMetadata metadata = 9;
  bool has_metadata() const;
  void clear_metadata();
  const ::oneflow::summary::SummaryMetadata& metadata() const;
  ::oneflow::summary::SummaryMetadata* release_metadata();
  ::oneflow::summary::SummaryMetadata* mutable_metadata();
  void set_allocated_metadata(::oneflow::summary::SummaryMetadata* metadata);

  // optional float simple_value = 2;
  bool has_simple_value() const;
  void clear_simple_value();
  float simple_value() const;
  void set_simple_value(float value);

  // optional bytes obsolete_old_style_histogram = 3;
  bool has_obsolete_old_style_histogram() const;
  void clear_obsolete_old_style_histogram();
  const std::string& obsolete_old_style_histogram() const;
  void set_obsolete_old_style_histogram(const std::string& value);
  void set_obsolete_old_style_histogram(std::string&& value);
  void set_obsolete_old_style_histogram(const char* value);
  void set_obsolete_old_style_histogram(const void* value, size_t size);
  std::string* mutable_obsolete_old_style_histogram();
  std::string* release_obsolete_old_style_histogram();
  void set_allocated_obsolete_old_style_histogram(std::string* obsolete_old_style_histogram);

  // optional .oneflow.summary.Image image = 4;
  bool has_image() const;
  void clear_image();
  const ::oneflow::summary::Image& image() const;
  ::oneflow::summary::Image* release_image();
  ::oneflow::summary::Image* mutable_image();
  void set_allocated_image(::oneflow::summary::Image* image);

  // optional .oneflow.summary.HistogramProto histo = 5;
  bool has_histo() const;
  void clear_histo();
  const ::oneflow::summary::HistogramProto& histo() const;
  ::oneflow::summary::HistogramProto* release_histo();
  ::oneflow::summary::HistogramProto* mutable_histo();
  void set_allocated_histo(::oneflow::summary::HistogramProto* histo);

  // optional .oneflow.summary.TensorProto tensor = 8;
  bool has_tensor() const;
  void clear_tensor();
  const ::oneflow::summary::TensorProto& tensor() const;
  ::oneflow::summary::TensorProto* release_tensor();
  ::oneflow::summary::TensorProto* mutable_tensor();
  void set_allocated_tensor(::oneflow::summary::TensorProto* tensor);

  void clear_value();
  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:oneflow.summary.Summary.Value)
 private:
  class _Internal;
  void set_has_simple_value();
  void set_has_obsolete_old_style_histogram();
  void set_has_image();
  void set_has_histo();
  void set_has_tensor();

  inline bool has_value() const;
  inline void clear_has_value();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tag_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr node_name_;
  ::oneflow::summary::SummaryMetadata* metadata_;
  union ValueUnion {
    ValueUnion() {}
    float simple_value_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr obsolete_old_style_histogram_;
    ::oneflow::summary::Image* image_;
    ::oneflow::summary::HistogramProto* histo_;
    ::oneflow::summary::TensorProto* tensor_;
  } value_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_oneflow_2fcore_2fsummary_2fsummary_2eproto;
};
// -------------------------------------------------------------------

class Summary :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:oneflow.summary.Summary) */ {
 public:
  Summary();
  virtual ~Summary();

  Summary(const Summary& from);
  Summary(Summary&& from) noexcept
    : Summary() {
    *this = ::std::move(from);
  }

  inline Summary& operator=(const Summary& from) {
    CopyFrom(from);
    return *this;
  }
  inline Summary& operator=(Summary&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Summary& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Summary* internal_default_instance() {
    return reinterpret_cast<const Summary*>(
               &_Summary_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Summary& a, Summary& b) {
    a.Swap(&b);
  }
  inline void Swap(Summary* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Summary* New() const final {
    return CreateMaybeMessage<Summary>(nullptr);
  }

  Summary* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Summary>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Summary& from);
  void MergeFrom(const Summary& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Summary* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "oneflow.summary.Summary";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_oneflow_2fcore_2fsummary_2fsummary_2eproto);
    return ::descriptor_table_oneflow_2fcore_2fsummary_2fsummary_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Summary_Value Value;

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // repeated .oneflow.summary.Summary.Value value = 1;
  int value_size() const;
  void clear_value();
  ::oneflow::summary::Summary_Value* mutable_value(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oneflow::summary::Summary_Value >*
      mutable_value();
  const ::oneflow::summary::Summary_Value& value(int index) const;
  ::oneflow::summary::Summary_Value* add_value();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oneflow::summary::Summary_Value >&
      value() const;

  // @@protoc_insertion_point(class_scope:oneflow.summary.Summary)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oneflow::summary::Summary_Value > value_;
  friend struct ::TableStruct_oneflow_2fcore_2fsummary_2fsummary_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SummaryMetadata_PluginData

// required string plugin_name = 1;
inline bool SummaryMetadata_PluginData::has_plugin_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SummaryMetadata_PluginData::clear_plugin_name() {
  plugin_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SummaryMetadata_PluginData::plugin_name() const {
  // @@protoc_insertion_point(field_get:oneflow.summary.SummaryMetadata.PluginData.plugin_name)
  return plugin_name_.GetNoArena();
}
inline void SummaryMetadata_PluginData::set_plugin_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  plugin_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:oneflow.summary.SummaryMetadata.PluginData.plugin_name)
}
inline void SummaryMetadata_PluginData::set_plugin_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  plugin_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:oneflow.summary.SummaryMetadata.PluginData.plugin_name)
}
inline void SummaryMetadata_PluginData::set_plugin_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  plugin_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:oneflow.summary.SummaryMetadata.PluginData.plugin_name)
}
inline void SummaryMetadata_PluginData::set_plugin_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  plugin_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:oneflow.summary.SummaryMetadata.PluginData.plugin_name)
}
inline std::string* SummaryMetadata_PluginData::mutable_plugin_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:oneflow.summary.SummaryMetadata.PluginData.plugin_name)
  return plugin_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SummaryMetadata_PluginData::release_plugin_name() {
  // @@protoc_insertion_point(field_release:oneflow.summary.SummaryMetadata.PluginData.plugin_name)
  if (!has_plugin_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return plugin_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SummaryMetadata_PluginData::set_allocated_plugin_name(std::string* plugin_name) {
  if (plugin_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  plugin_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), plugin_name);
  // @@protoc_insertion_point(field_set_allocated:oneflow.summary.SummaryMetadata.PluginData.plugin_name)
}

// optional bytes content = 2;
inline bool SummaryMetadata_PluginData::has_content() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SummaryMetadata_PluginData::clear_content() {
  content_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& SummaryMetadata_PluginData::content() const {
  // @@protoc_insertion_point(field_get:oneflow.summary.SummaryMetadata.PluginData.content)
  return content_.GetNoArena();
}
inline void SummaryMetadata_PluginData::set_content(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:oneflow.summary.SummaryMetadata.PluginData.content)
}
inline void SummaryMetadata_PluginData::set_content(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  content_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:oneflow.summary.SummaryMetadata.PluginData.content)
}
inline void SummaryMetadata_PluginData::set_content(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:oneflow.summary.SummaryMetadata.PluginData.content)
}
inline void SummaryMetadata_PluginData::set_content(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:oneflow.summary.SummaryMetadata.PluginData.content)
}
inline std::string* SummaryMetadata_PluginData::mutable_content() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:oneflow.summary.SummaryMetadata.PluginData.content)
  return content_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SummaryMetadata_PluginData::release_content() {
  // @@protoc_insertion_point(field_release:oneflow.summary.SummaryMetadata.PluginData.content)
  if (!has_content()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return content_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SummaryMetadata_PluginData::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  content_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:oneflow.summary.SummaryMetadata.PluginData.content)
}

// -------------------------------------------------------------------

// SummaryMetadata

// required .oneflow.summary.SummaryMetadata.PluginData plugin_data = 1;
inline bool SummaryMetadata::has_plugin_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SummaryMetadata::clear_plugin_data() {
  if (plugin_data_ != nullptr) plugin_data_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::oneflow::summary::SummaryMetadata_PluginData& SummaryMetadata::plugin_data() const {
  const ::oneflow::summary::SummaryMetadata_PluginData* p = plugin_data_;
  // @@protoc_insertion_point(field_get:oneflow.summary.SummaryMetadata.plugin_data)
  return p != nullptr ? *p : *reinterpret_cast<const ::oneflow::summary::SummaryMetadata_PluginData*>(
      &::oneflow::summary::_SummaryMetadata_PluginData_default_instance_);
}
inline ::oneflow::summary::SummaryMetadata_PluginData* SummaryMetadata::release_plugin_data() {
  // @@protoc_insertion_point(field_release:oneflow.summary.SummaryMetadata.plugin_data)
  _has_bits_[0] &= ~0x00000004u;
  ::oneflow::summary::SummaryMetadata_PluginData* temp = plugin_data_;
  plugin_data_ = nullptr;
  return temp;
}
inline ::oneflow::summary::SummaryMetadata_PluginData* SummaryMetadata::mutable_plugin_data() {
  _has_bits_[0] |= 0x00000004u;
  if (plugin_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::oneflow::summary::SummaryMetadata_PluginData>(GetArenaNoVirtual());
    plugin_data_ = p;
  }
  // @@protoc_insertion_point(field_mutable:oneflow.summary.SummaryMetadata.plugin_data)
  return plugin_data_;
}
inline void SummaryMetadata::set_allocated_plugin_data(::oneflow::summary::SummaryMetadata_PluginData* plugin_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete plugin_data_;
  }
  if (plugin_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      plugin_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, plugin_data, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  plugin_data_ = plugin_data;
  // @@protoc_insertion_point(field_set_allocated:oneflow.summary.SummaryMetadata.plugin_data)
}

// optional string display_name = 2;
inline bool SummaryMetadata::has_display_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SummaryMetadata::clear_display_name() {
  display_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SummaryMetadata::display_name() const {
  // @@protoc_insertion_point(field_get:oneflow.summary.SummaryMetadata.display_name)
  return display_name_.GetNoArena();
}
inline void SummaryMetadata::set_display_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  display_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:oneflow.summary.SummaryMetadata.display_name)
}
inline void SummaryMetadata::set_display_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  display_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:oneflow.summary.SummaryMetadata.display_name)
}
inline void SummaryMetadata::set_display_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  display_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:oneflow.summary.SummaryMetadata.display_name)
}
inline void SummaryMetadata::set_display_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  display_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:oneflow.summary.SummaryMetadata.display_name)
}
inline std::string* SummaryMetadata::mutable_display_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:oneflow.summary.SummaryMetadata.display_name)
  return display_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SummaryMetadata::release_display_name() {
  // @@protoc_insertion_point(field_release:oneflow.summary.SummaryMetadata.display_name)
  if (!has_display_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return display_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SummaryMetadata::set_allocated_display_name(std::string* display_name) {
  if (display_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  display_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), display_name);
  // @@protoc_insertion_point(field_set_allocated:oneflow.summary.SummaryMetadata.display_name)
}

// optional string summary_description = 3;
inline bool SummaryMetadata::has_summary_description() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SummaryMetadata::clear_summary_description() {
  summary_description_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& SummaryMetadata::summary_description() const {
  // @@protoc_insertion_point(field_get:oneflow.summary.SummaryMetadata.summary_description)
  return summary_description_.GetNoArena();
}
inline void SummaryMetadata::set_summary_description(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  summary_description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:oneflow.summary.SummaryMetadata.summary_description)
}
inline void SummaryMetadata::set_summary_description(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  summary_description_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:oneflow.summary.SummaryMetadata.summary_description)
}
inline void SummaryMetadata::set_summary_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  summary_description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:oneflow.summary.SummaryMetadata.summary_description)
}
inline void SummaryMetadata::set_summary_description(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  summary_description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:oneflow.summary.SummaryMetadata.summary_description)
}
inline std::string* SummaryMetadata::mutable_summary_description() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:oneflow.summary.SummaryMetadata.summary_description)
  return summary_description_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SummaryMetadata::release_summary_description() {
  // @@protoc_insertion_point(field_release:oneflow.summary.SummaryMetadata.summary_description)
  if (!has_summary_description()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return summary_description_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SummaryMetadata::set_allocated_summary_description(std::string* summary_description) {
  if (summary_description != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  summary_description_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), summary_description);
  // @@protoc_insertion_point(field_set_allocated:oneflow.summary.SummaryMetadata.summary_description)
}

// -------------------------------------------------------------------

// HistogramProto

// required double min = 1;
inline bool HistogramProto::has_min() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HistogramProto::clear_min() {
  min_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double HistogramProto::min() const {
  // @@protoc_insertion_point(field_get:oneflow.summary.HistogramProto.min)
  return min_;
}
inline void HistogramProto::set_min(double value) {
  _has_bits_[0] |= 0x00000001u;
  min_ = value;
  // @@protoc_insertion_point(field_set:oneflow.summary.HistogramProto.min)
}

// required double max = 2;
inline bool HistogramProto::has_max() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HistogramProto::clear_max() {
  max_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double HistogramProto::max() const {
  // @@protoc_insertion_point(field_get:oneflow.summary.HistogramProto.max)
  return max_;
}
inline void HistogramProto::set_max(double value) {
  _has_bits_[0] |= 0x00000002u;
  max_ = value;
  // @@protoc_insertion_point(field_set:oneflow.summary.HistogramProto.max)
}

// required double num = 3;
inline bool HistogramProto::has_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void HistogramProto::clear_num() {
  num_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double HistogramProto::num() const {
  // @@protoc_insertion_point(field_get:oneflow.summary.HistogramProto.num)
  return num_;
}
inline void HistogramProto::set_num(double value) {
  _has_bits_[0] |= 0x00000004u;
  num_ = value;
  // @@protoc_insertion_point(field_set:oneflow.summary.HistogramProto.num)
}

// required double sum = 4;
inline bool HistogramProto::has_sum() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void HistogramProto::clear_sum() {
  sum_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double HistogramProto::sum() const {
  // @@protoc_insertion_point(field_get:oneflow.summary.HistogramProto.sum)
  return sum_;
}
inline void HistogramProto::set_sum(double value) {
  _has_bits_[0] |= 0x00000008u;
  sum_ = value;
  // @@protoc_insertion_point(field_set:oneflow.summary.HistogramProto.sum)
}

// required double sum_squares = 5;
inline bool HistogramProto::has_sum_squares() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void HistogramProto::clear_sum_squares() {
  sum_squares_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline double HistogramProto::sum_squares() const {
  // @@protoc_insertion_point(field_get:oneflow.summary.HistogramProto.sum_squares)
  return sum_squares_;
}
inline void HistogramProto::set_sum_squares(double value) {
  _has_bits_[0] |= 0x00000010u;
  sum_squares_ = value;
  // @@protoc_insertion_point(field_set:oneflow.summary.HistogramProto.sum_squares)
}

// repeated double bucket_limit = 6 [packed = true];
inline int HistogramProto::bucket_limit_size() const {
  return bucket_limit_.size();
}
inline void HistogramProto::clear_bucket_limit() {
  bucket_limit_.Clear();
}
inline double HistogramProto::bucket_limit(int index) const {
  // @@protoc_insertion_point(field_get:oneflow.summary.HistogramProto.bucket_limit)
  return bucket_limit_.Get(index);
}
inline void HistogramProto::set_bucket_limit(int index, double value) {
  bucket_limit_.Set(index, value);
  // @@protoc_insertion_point(field_set:oneflow.summary.HistogramProto.bucket_limit)
}
inline void HistogramProto::add_bucket_limit(double value) {
  bucket_limit_.Add(value);
  // @@protoc_insertion_point(field_add:oneflow.summary.HistogramProto.bucket_limit)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
HistogramProto::bucket_limit() const {
  // @@protoc_insertion_point(field_list:oneflow.summary.HistogramProto.bucket_limit)
  return bucket_limit_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
HistogramProto::mutable_bucket_limit() {
  // @@protoc_insertion_point(field_mutable_list:oneflow.summary.HistogramProto.bucket_limit)
  return &bucket_limit_;
}

// repeated double bucket = 7 [packed = true];
inline int HistogramProto::bucket_size() const {
  return bucket_.size();
}
inline void HistogramProto::clear_bucket() {
  bucket_.Clear();
}
inline double HistogramProto::bucket(int index) const {
  // @@protoc_insertion_point(field_get:oneflow.summary.HistogramProto.bucket)
  return bucket_.Get(index);
}
inline void HistogramProto::set_bucket(int index, double value) {
  bucket_.Set(index, value);
  // @@protoc_insertion_point(field_set:oneflow.summary.HistogramProto.bucket)
}
inline void HistogramProto::add_bucket(double value) {
  bucket_.Add(value);
  // @@protoc_insertion_point(field_add:oneflow.summary.HistogramProto.bucket)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
HistogramProto::bucket() const {
  // @@protoc_insertion_point(field_list:oneflow.summary.HistogramProto.bucket)
  return bucket_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
HistogramProto::mutable_bucket() {
  // @@protoc_insertion_point(field_mutable_list:oneflow.summary.HistogramProto.bucket)
  return &bucket_;
}

// -------------------------------------------------------------------

// Image

// required int32 height = 1;
inline bool Image::has_height() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Image::clear_height() {
  height_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Image::height() const {
  // @@protoc_insertion_point(field_get:oneflow.summary.Image.height)
  return height_;
}
inline void Image::set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  height_ = value;
  // @@protoc_insertion_point(field_set:oneflow.summary.Image.height)
}

// required int32 width = 2;
inline bool Image::has_width() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Image::clear_width() {
  width_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Image::width() const {
  // @@protoc_insertion_point(field_get:oneflow.summary.Image.width)
  return width_;
}
inline void Image::set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  width_ = value;
  // @@protoc_insertion_point(field_set:oneflow.summary.Image.width)
}

// required int32 colorspace = 3;
inline bool Image::has_colorspace() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Image::clear_colorspace() {
  colorspace_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Image::colorspace() const {
  // @@protoc_insertion_point(field_get:oneflow.summary.Image.colorspace)
  return colorspace_;
}
inline void Image::set_colorspace(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  colorspace_ = value;
  // @@protoc_insertion_point(field_set:oneflow.summary.Image.colorspace)
}

// required bytes encoded_image_string = 4;
inline bool Image::has_encoded_image_string() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Image::clear_encoded_image_string() {
  encoded_image_string_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Image::encoded_image_string() const {
  // @@protoc_insertion_point(field_get:oneflow.summary.Image.encoded_image_string)
  return encoded_image_string_.GetNoArena();
}
inline void Image::set_encoded_image_string(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  encoded_image_string_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:oneflow.summary.Image.encoded_image_string)
}
inline void Image::set_encoded_image_string(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  encoded_image_string_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:oneflow.summary.Image.encoded_image_string)
}
inline void Image::set_encoded_image_string(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  encoded_image_string_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:oneflow.summary.Image.encoded_image_string)
}
inline void Image::set_encoded_image_string(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  encoded_image_string_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:oneflow.summary.Image.encoded_image_string)
}
inline std::string* Image::mutable_encoded_image_string() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:oneflow.summary.Image.encoded_image_string)
  return encoded_image_string_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Image::release_encoded_image_string() {
  // @@protoc_insertion_point(field_release:oneflow.summary.Image.encoded_image_string)
  if (!has_encoded_image_string()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return encoded_image_string_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Image::set_allocated_encoded_image_string(std::string* encoded_image_string) {
  if (encoded_image_string != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  encoded_image_string_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), encoded_image_string);
  // @@protoc_insertion_point(field_set_allocated:oneflow.summary.Image.encoded_image_string)
}

// -------------------------------------------------------------------

// Summary_Value

// optional string node_name = 7;
inline bool Summary_Value::has_node_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Summary_Value::clear_node_name() {
  node_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Summary_Value::node_name() const {
  // @@protoc_insertion_point(field_get:oneflow.summary.Summary.Value.node_name)
  return node_name_.GetNoArena();
}
inline void Summary_Value::set_node_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  node_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:oneflow.summary.Summary.Value.node_name)
}
inline void Summary_Value::set_node_name(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  node_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:oneflow.summary.Summary.Value.node_name)
}
inline void Summary_Value::set_node_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  node_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:oneflow.summary.Summary.Value.node_name)
}
inline void Summary_Value::set_node_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  node_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:oneflow.summary.Summary.Value.node_name)
}
inline std::string* Summary_Value::mutable_node_name() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:oneflow.summary.Summary.Value.node_name)
  return node_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Summary_Value::release_node_name() {
  // @@protoc_insertion_point(field_release:oneflow.summary.Summary.Value.node_name)
  if (!has_node_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return node_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Summary_Value::set_allocated_node_name(std::string* node_name) {
  if (node_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  node_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), node_name);
  // @@protoc_insertion_point(field_set_allocated:oneflow.summary.Summary.Value.node_name)
}

// required string tag = 1;
inline bool Summary_Value::has_tag() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Summary_Value::clear_tag() {
  tag_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Summary_Value::tag() const {
  // @@protoc_insertion_point(field_get:oneflow.summary.Summary.Value.tag)
  return tag_.GetNoArena();
}
inline void Summary_Value::set_tag(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  tag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:oneflow.summary.Summary.Value.tag)
}
inline void Summary_Value::set_tag(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  tag_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:oneflow.summary.Summary.Value.tag)
}
inline void Summary_Value::set_tag(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  tag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:oneflow.summary.Summary.Value.tag)
}
inline void Summary_Value::set_tag(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  tag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:oneflow.summary.Summary.Value.tag)
}
inline std::string* Summary_Value::mutable_tag() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:oneflow.summary.Summary.Value.tag)
  return tag_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Summary_Value::release_tag() {
  // @@protoc_insertion_point(field_release:oneflow.summary.Summary.Value.tag)
  if (!has_tag()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return tag_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Summary_Value::set_allocated_tag(std::string* tag) {
  if (tag != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  tag_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tag);
  // @@protoc_insertion_point(field_set_allocated:oneflow.summary.Summary.Value.tag)
}

// optional .oneflow.summary.SummaryMetadata metadata = 9;
inline bool Summary_Value::has_metadata() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Summary_Value::clear_metadata() {
  if (metadata_ != nullptr) metadata_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::oneflow::summary::SummaryMetadata& Summary_Value::metadata() const {
  const ::oneflow::summary::SummaryMetadata* p = metadata_;
  // @@protoc_insertion_point(field_get:oneflow.summary.Summary.Value.metadata)
  return p != nullptr ? *p : *reinterpret_cast<const ::oneflow::summary::SummaryMetadata*>(
      &::oneflow::summary::_SummaryMetadata_default_instance_);
}
inline ::oneflow::summary::SummaryMetadata* Summary_Value::release_metadata() {
  // @@protoc_insertion_point(field_release:oneflow.summary.Summary.Value.metadata)
  _has_bits_[0] &= ~0x00000004u;
  ::oneflow::summary::SummaryMetadata* temp = metadata_;
  metadata_ = nullptr;
  return temp;
}
inline ::oneflow::summary::SummaryMetadata* Summary_Value::mutable_metadata() {
  _has_bits_[0] |= 0x00000004u;
  if (metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::oneflow::summary::SummaryMetadata>(GetArenaNoVirtual());
    metadata_ = p;
  }
  // @@protoc_insertion_point(field_mutable:oneflow.summary.Summary.Value.metadata)
  return metadata_;
}
inline void Summary_Value::set_allocated_metadata(::oneflow::summary::SummaryMetadata* metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete metadata_;
  }
  if (metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metadata, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  metadata_ = metadata;
  // @@protoc_insertion_point(field_set_allocated:oneflow.summary.Summary.Value.metadata)
}

// optional float simple_value = 2;
inline bool Summary_Value::has_simple_value() const {
  return value_case() == kSimpleValue;
}
inline void Summary_Value::set_has_simple_value() {
  _oneof_case_[0] = kSimpleValue;
}
inline void Summary_Value::clear_simple_value() {
  if (has_simple_value()) {
    value_.simple_value_ = 0;
    clear_has_value();
  }
}
inline float Summary_Value::simple_value() const {
  // @@protoc_insertion_point(field_get:oneflow.summary.Summary.Value.simple_value)
  if (has_simple_value()) {
    return value_.simple_value_;
  }
  return 0;
}
inline void Summary_Value::set_simple_value(float value) {
  if (!has_simple_value()) {
    clear_value();
    set_has_simple_value();
  }
  value_.simple_value_ = value;
  // @@protoc_insertion_point(field_set:oneflow.summary.Summary.Value.simple_value)
}

// optional bytes obsolete_old_style_histogram = 3;
inline bool Summary_Value::has_obsolete_old_style_histogram() const {
  return value_case() == kObsoleteOldStyleHistogram;
}
inline void Summary_Value::set_has_obsolete_old_style_histogram() {
  _oneof_case_[0] = kObsoleteOldStyleHistogram;
}
inline void Summary_Value::clear_obsolete_old_style_histogram() {
  if (has_obsolete_old_style_histogram()) {
    value_.obsolete_old_style_histogram_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    clear_has_value();
  }
}
inline const std::string& Summary_Value::obsolete_old_style_histogram() const {
  // @@protoc_insertion_point(field_get:oneflow.summary.Summary.Value.obsolete_old_style_histogram)
  if (has_obsolete_old_style_histogram()) {
    return value_.obsolete_old_style_histogram_.GetNoArena();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void Summary_Value::set_obsolete_old_style_histogram(const std::string& value) {
  // @@protoc_insertion_point(field_set:oneflow.summary.Summary.Value.obsolete_old_style_histogram)
  if (!has_obsolete_old_style_histogram()) {
    clear_value();
    set_has_obsolete_old_style_histogram();
    value_.obsolete_old_style_histogram_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_.obsolete_old_style_histogram_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:oneflow.summary.Summary.Value.obsolete_old_style_histogram)
}
inline void Summary_Value::set_obsolete_old_style_histogram(std::string&& value) {
  // @@protoc_insertion_point(field_set:oneflow.summary.Summary.Value.obsolete_old_style_histogram)
  if (!has_obsolete_old_style_histogram()) {
    clear_value();
    set_has_obsolete_old_style_histogram();
    value_.obsolete_old_style_histogram_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_.obsolete_old_style_histogram_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:oneflow.summary.Summary.Value.obsolete_old_style_histogram)
}
inline void Summary_Value::set_obsolete_old_style_histogram(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!has_obsolete_old_style_histogram()) {
    clear_value();
    set_has_obsolete_old_style_histogram();
    value_.obsolete_old_style_histogram_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_.obsolete_old_style_histogram_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:oneflow.summary.Summary.Value.obsolete_old_style_histogram)
}
inline void Summary_Value::set_obsolete_old_style_histogram(const void* value, size_t size) {
  if (!has_obsolete_old_style_histogram()) {
    clear_value();
    set_has_obsolete_old_style_histogram();
    value_.obsolete_old_style_histogram_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_.obsolete_old_style_histogram_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:oneflow.summary.Summary.Value.obsolete_old_style_histogram)
}
inline std::string* Summary_Value::mutable_obsolete_old_style_histogram() {
  if (!has_obsolete_old_style_histogram()) {
    clear_value();
    set_has_obsolete_old_style_histogram();
    value_.obsolete_old_style_histogram_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:oneflow.summary.Summary.Value.obsolete_old_style_histogram)
  return value_.obsolete_old_style_histogram_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Summary_Value::release_obsolete_old_style_histogram() {
  // @@protoc_insertion_point(field_release:oneflow.summary.Summary.Value.obsolete_old_style_histogram)
  if (has_obsolete_old_style_histogram()) {
    clear_has_value();
    return value_.obsolete_old_style_histogram_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void Summary_Value::set_allocated_obsolete_old_style_histogram(std::string* obsolete_old_style_histogram) {
  if (has_value()) {
    clear_value();
  }
  if (obsolete_old_style_histogram != nullptr) {
    set_has_obsolete_old_style_histogram();
    value_.obsolete_old_style_histogram_.UnsafeSetDefault(obsolete_old_style_histogram);
  }
  // @@protoc_insertion_point(field_set_allocated:oneflow.summary.Summary.Value.obsolete_old_style_histogram)
}

// optional .oneflow.summary.Image image = 4;
inline bool Summary_Value::has_image() const {
  return value_case() == kImage;
}
inline void Summary_Value::set_has_image() {
  _oneof_case_[0] = kImage;
}
inline void Summary_Value::clear_image() {
  if (has_image()) {
    delete value_.image_;
    clear_has_value();
  }
}
inline ::oneflow::summary::Image* Summary_Value::release_image() {
  // @@protoc_insertion_point(field_release:oneflow.summary.Summary.Value.image)
  if (has_image()) {
    clear_has_value();
      ::oneflow::summary::Image* temp = value_.image_;
    value_.image_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::oneflow::summary::Image& Summary_Value::image() const {
  // @@protoc_insertion_point(field_get:oneflow.summary.Summary.Value.image)
  return has_image()
      ? *value_.image_
      : *reinterpret_cast< ::oneflow::summary::Image*>(&::oneflow::summary::_Image_default_instance_);
}
inline ::oneflow::summary::Image* Summary_Value::mutable_image() {
  if (!has_image()) {
    clear_value();
    set_has_image();
    value_.image_ = CreateMaybeMessage< ::oneflow::summary::Image >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:oneflow.summary.Summary.Value.image)
  return value_.image_;
}

// optional .oneflow.summary.HistogramProto histo = 5;
inline bool Summary_Value::has_histo() const {
  return value_case() == kHisto;
}
inline void Summary_Value::set_has_histo() {
  _oneof_case_[0] = kHisto;
}
inline void Summary_Value::clear_histo() {
  if (has_histo()) {
    delete value_.histo_;
    clear_has_value();
  }
}
inline ::oneflow::summary::HistogramProto* Summary_Value::release_histo() {
  // @@protoc_insertion_point(field_release:oneflow.summary.Summary.Value.histo)
  if (has_histo()) {
    clear_has_value();
      ::oneflow::summary::HistogramProto* temp = value_.histo_;
    value_.histo_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::oneflow::summary::HistogramProto& Summary_Value::histo() const {
  // @@protoc_insertion_point(field_get:oneflow.summary.Summary.Value.histo)
  return has_histo()
      ? *value_.histo_
      : *reinterpret_cast< ::oneflow::summary::HistogramProto*>(&::oneflow::summary::_HistogramProto_default_instance_);
}
inline ::oneflow::summary::HistogramProto* Summary_Value::mutable_histo() {
  if (!has_histo()) {
    clear_value();
    set_has_histo();
    value_.histo_ = CreateMaybeMessage< ::oneflow::summary::HistogramProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:oneflow.summary.Summary.Value.histo)
  return value_.histo_;
}

// optional .oneflow.summary.TensorProto tensor = 8;
inline bool Summary_Value::has_tensor() const {
  return value_case() == kTensor;
}
inline void Summary_Value::set_has_tensor() {
  _oneof_case_[0] = kTensor;
}
inline ::oneflow::summary::TensorProto* Summary_Value::release_tensor() {
  // @@protoc_insertion_point(field_release:oneflow.summary.Summary.Value.tensor)
  if (has_tensor()) {
    clear_has_value();
      ::oneflow::summary::TensorProto* temp = value_.tensor_;
    value_.tensor_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::oneflow::summary::TensorProto& Summary_Value::tensor() const {
  // @@protoc_insertion_point(field_get:oneflow.summary.Summary.Value.tensor)
  return has_tensor()
      ? *value_.tensor_
      : *reinterpret_cast< ::oneflow::summary::TensorProto*>(&::oneflow::summary::_TensorProto_default_instance_);
}
inline ::oneflow::summary::TensorProto* Summary_Value::mutable_tensor() {
  if (!has_tensor()) {
    clear_value();
    set_has_tensor();
    value_.tensor_ = CreateMaybeMessage< ::oneflow::summary::TensorProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:oneflow.summary.Summary.Value.tensor)
  return value_.tensor_;
}

inline bool Summary_Value::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void Summary_Value::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
inline Summary_Value::ValueCase Summary_Value::value_case() const {
  return Summary_Value::ValueCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Summary

// repeated .oneflow.summary.Summary.Value value = 1;
inline int Summary::value_size() const {
  return value_.size();
}
inline void Summary::clear_value() {
  value_.Clear();
}
inline ::oneflow::summary::Summary_Value* Summary::mutable_value(int index) {
  // @@protoc_insertion_point(field_mutable:oneflow.summary.Summary.value)
  return value_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oneflow::summary::Summary_Value >*
Summary::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:oneflow.summary.Summary.value)
  return &value_;
}
inline const ::oneflow::summary::Summary_Value& Summary::value(int index) const {
  // @@protoc_insertion_point(field_get:oneflow.summary.Summary.value)
  return value_.Get(index);
}
inline ::oneflow::summary::Summary_Value* Summary::add_value() {
  // @@protoc_insertion_point(field_add:oneflow.summary.Summary.value)
  return value_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oneflow::summary::Summary_Value >&
Summary::value() const {
  // @@protoc_insertion_point(field_list:oneflow.summary.Summary.value)
  return value_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace summary
}  // namespace oneflow

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_oneflow_2fcore_2fsummary_2fsummary_2eproto
