{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Oanda-SDK A wrapper for the Oanda REST API. pip install oanda-sdk Welcome to Oanda-SDK! Check out getting started for a walkthrough. API Reference The API Reference","title":"Oanda-SDK"},{"location":"#oanda-sdk","text":"A wrapper for the Oanda REST API. pip install oanda-sdk","title":"Oanda-SDK"},{"location":"#welcome-to-oanda-sdk","text":"Check out getting started for a walkthrough.","title":"Welcome to Oanda-SDK!"},{"location":"#api-reference","text":"The API Reference","title":"API Reference"},{"location":"getting-started/","text":"Welcome to Oanda-SDK For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Getting Started"},{"location":"getting-started/#welcome-to-oanda-sdk","text":"For full documentation visit mkdocs.org .","title":"Welcome to Oanda-SDK"},{"location":"getting-started/#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"getting-started/#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"api/account/","text":"Account Class Class matches up with the account endpoint of Oanda. Account gets you access to the account numbers available to trade with, a summary of account details, tradeable instruments, and any changes to account holdings. Usage Import from oanda.account import Account Interface Set these properties in your code. Account( client = Client() ) Call these methods in your code. Account().get_accounts() Account().get_summary() Account().get_instruments() Account().get_changes(transaction_id) Properties Defaults Account( client = REQUIRED uri = \"\" ) REQUIRED Client(): client A Client Object is required to create an instance of Account. See the docs for the Client Class to learn more. String: uri Account().uri = \"\" Don't touch this: uri is meant to store the uri path after the main url. One of the reasons for this property is to test complete urls and reduce the number 400 Malformed Requests, which are difficult to test. This property gets set by all of the Account Methods and only replaces the uri after method calls, so uri holds the uri of the most recently called method. Methods get_accounts(): Takes no arguments. Calling the method returns a requests.Response object: >>> account = Account(client).get_accounts() <Response [200]> The status code for the REST API call can be accessed as an integer as well: >>> account.get_accounts().status_code 200 Get the list of accounts in JSON format: >>> account.get_accounts().json() {'accounts': [{'id': '000-000-0000000-000', 'tags': []}]} get_summary() Get the account summary of the client. Takes no arguments Returns a requests.Response object from the Requests library: >>> account = Account(client).get_summary() <Response [200]> The status code for the REST API call can be accessed as an integer as follows: >>> account.get_summary().status_code 200 Get the summary for the account as JSON: >>> account.get_summary().json() {'account': { 'guaranteedStopLossOrderMode': 'DISABLED', 'hedgingEnabled': False, 'id': '000-000-0000000-000', 'createdTime': '2019-07-25T19:56:49.578908772Z', 'currency': 'USD', 'createdByUserID': '0000000', 'alias': 'Primary', 'marginRate': '0.02', 'lastTransactionID': '35502', 'balance': '1127.4641', 'openTradeCount': 0, 'openPositionCount': 0, 'pendingOrderCount': 0, 'pl': '-345.0344', 'resettablePL': '-345.0344', 'resettablePLTime': '0', 'financing': '-436.7715', 'commission': '0.0000', 'dividendAdjustment': '0', 'guaranteedExecutionFees': '0.0000', 'unrealizedPL': '0.0000', 'NAV': '1127.4641', 'marginUsed': '0.0000', 'marginAvailable': '1127.4641', 'positionValue': '0.0000', 'marginCloseoutUnrealizedPL': '0.0000', 'marginCloseoutNAV': '1127.4641', 'marginCloseoutMarginUsed': '0.0000', 'marginCloseoutPositionValue': '0.0000', 'marginCloseoutPercent': '0.00000', 'withdrawalLimit': '1127.4641', 'marginCallMarginUsed': '0.0000', 'marginCallPercent': '0.00000' }, 'lastTransactionID': '35502' } get_instruments() Get an exhaustive list of all tradeable instruments and details. Takes no arguments. Returns a requests.Response object from the Requests library: >>> account.get_instruments() <Response [200]> Status codes can be accessed as an integer: >>> account.get_instruments().status_code 200 Getting the list of tradeable instruments as JSON: >>> account.get_instruments().json() # trust me you don't want to see the output get_changes(transaction_id) Get a list of changes in account holdings after and not including a given transaction id, as well as the current state of the account. Takes a required transaction_id as a string. Returns a requests.Response object from the Requests library: >>> account.get_changes(\"35502\") <Response [200]> Status codes can be accessed as an integer: >>> account.get_changes(\"35502\").status_code 200 Getting the list of changes and account state as JSON: >>> account.get_changes(\"35502\").json() { 'changes': { 'ordersCreated': [], 'ordersCancelled': [], 'ordersFilled': [], 'ordersTriggered': [], 'tradesOpened': [], 'tradesReduced': [], 'tradesClosed': [], 'positions': [], 'transactions': [] }, 'state': { 'unrealizedPL': '0.0000', 'NAV': '1127.4641', 'marginUsed': '0.0000', 'marginAvailable': '1127.4641', 'positionValue': '0.0000', 'marginCloseoutUnrealizedPL': '0.0000', 'marginCloseoutNAV': '1127.4641', 'marginCloseoutMarginUsed': '0.0000', 'marginCloseoutPercent': '0.00000', 'withdrawalLimit': '1127.4641', 'marginCallMarginUsed': '0.0000', 'marginCallPercent': '0.00000', 'orders': [], 'trades': [], 'positions': [] }, 'lastTransactionID': '35502' }","title":"Account Class"},{"location":"api/account/#account-class","text":"Class matches up with the account endpoint of Oanda. Account gets you access to the account numbers available to trade with, a summary of account details, tradeable instruments, and any changes to account holdings.","title":"Account Class"},{"location":"api/account/#usage","text":"","title":"Usage"},{"location":"api/account/#import","text":"from oanda.account import Account","title":"Import"},{"location":"api/account/#interface","text":"Set these properties in your code. Account( client = Client() ) Call these methods in your code. Account().get_accounts() Account().get_summary() Account().get_instruments() Account().get_changes(transaction_id)","title":"Interface"},{"location":"api/account/#properties","text":"","title":"Properties"},{"location":"api/account/#defaults","text":"Account( client = REQUIRED uri = \"\" )","title":"Defaults"},{"location":"api/account/#required-client-client","text":"A Client Object is required to create an instance of Account. See the docs for the Client Class to learn more.","title":"REQUIRED Client(): client"},{"location":"api/account/#string-uri","text":"Account().uri = \"\" Don't touch this: uri is meant to store the uri path after the main url. One of the reasons for this property is to test complete urls and reduce the number 400 Malformed Requests, which are difficult to test. This property gets set by all of the Account Methods and only replaces the uri after method calls, so uri holds the uri of the most recently called method.","title":"String: uri"},{"location":"api/account/#methods","text":"","title":"Methods"},{"location":"api/account/#get_accounts","text":"Takes no arguments. Calling the method returns a requests.Response object: >>> account = Account(client).get_accounts() <Response [200]> The status code for the REST API call can be accessed as an integer as well: >>> account.get_accounts().status_code 200 Get the list of accounts in JSON format: >>> account.get_accounts().json() {'accounts': [{'id': '000-000-0000000-000', 'tags': []}]}","title":"get_accounts():"},{"location":"api/account/#get_summary","text":"Get the account summary of the client. Takes no arguments Returns a requests.Response object from the Requests library: >>> account = Account(client).get_summary() <Response [200]> The status code for the REST API call can be accessed as an integer as follows: >>> account.get_summary().status_code 200 Get the summary for the account as JSON: >>> account.get_summary().json() {'account': { 'guaranteedStopLossOrderMode': 'DISABLED', 'hedgingEnabled': False, 'id': '000-000-0000000-000', 'createdTime': '2019-07-25T19:56:49.578908772Z', 'currency': 'USD', 'createdByUserID': '0000000', 'alias': 'Primary', 'marginRate': '0.02', 'lastTransactionID': '35502', 'balance': '1127.4641', 'openTradeCount': 0, 'openPositionCount': 0, 'pendingOrderCount': 0, 'pl': '-345.0344', 'resettablePL': '-345.0344', 'resettablePLTime': '0', 'financing': '-436.7715', 'commission': '0.0000', 'dividendAdjustment': '0', 'guaranteedExecutionFees': '0.0000', 'unrealizedPL': '0.0000', 'NAV': '1127.4641', 'marginUsed': '0.0000', 'marginAvailable': '1127.4641', 'positionValue': '0.0000', 'marginCloseoutUnrealizedPL': '0.0000', 'marginCloseoutNAV': '1127.4641', 'marginCloseoutMarginUsed': '0.0000', 'marginCloseoutPositionValue': '0.0000', 'marginCloseoutPercent': '0.00000', 'withdrawalLimit': '1127.4641', 'marginCallMarginUsed': '0.0000', 'marginCallPercent': '0.00000' }, 'lastTransactionID': '35502' }","title":"get_summary()"},{"location":"api/account/#get_instruments","text":"Get an exhaustive list of all tradeable instruments and details. Takes no arguments. Returns a requests.Response object from the Requests library: >>> account.get_instruments() <Response [200]> Status codes can be accessed as an integer: >>> account.get_instruments().status_code 200 Getting the list of tradeable instruments as JSON: >>> account.get_instruments().json() # trust me you don't want to see the output","title":"get_instruments()"},{"location":"api/account/#get_changestransaction_id","text":"Get a list of changes in account holdings after and not including a given transaction id, as well as the current state of the account. Takes a required transaction_id as a string. Returns a requests.Response object from the Requests library: >>> account.get_changes(\"35502\") <Response [200]> Status codes can be accessed as an integer: >>> account.get_changes(\"35502\").status_code 200 Getting the list of changes and account state as JSON: >>> account.get_changes(\"35502\").json() { 'changes': { 'ordersCreated': [], 'ordersCancelled': [], 'ordersFilled': [], 'ordersTriggered': [], 'tradesOpened': [], 'tradesReduced': [], 'tradesClosed': [], 'positions': [], 'transactions': [] }, 'state': { 'unrealizedPL': '0.0000', 'NAV': '1127.4641', 'marginUsed': '0.0000', 'marginAvailable': '1127.4641', 'positionValue': '0.0000', 'marginCloseoutUnrealizedPL': '0.0000', 'marginCloseoutNAV': '1127.4641', 'marginCloseoutMarginUsed': '0.0000', 'marginCloseoutPercent': '0.00000', 'withdrawalLimit': '1127.4641', 'marginCallMarginUsed': '0.0000', 'marginCallPercent': '0.00000', 'orders': [], 'trades': [], 'positions': [] }, 'lastTransactionID': '35502' }","title":"get_changes(transaction_id)"},{"location":"api/client/","text":"Client Class Get an Oanda Account You need to apply for an Oanda account and get your api token and account number to run any of the code in the Client Class. Usage Import from oanda.client import Client Interface Set these properties in your code. client = Client( account_id = DEMO_ACCOUNT_ID, api_token = DEMO_API_TOKEN, is_paper_trading = True, ) Call these methods in your code. client.set_account_id(LIVE_ACCOUNT_ID) client.set_api_token(LIVE_API_TOKEN) client.set_is_paper_trading(False) Pass the Client to Other Classes The Client class is the first object you need to initialize before using the rest of the sdk, and it gets passed to the other classes like so: client = Client() account = Account(client) 400 Status Code: Not Setting Account Information The example above will break when the Account Class tries to call any of its methods. Be sure both account_id AND api_token are set. Properties Defaults Client( account_id = \"\", api_token = \"\", is_paper_trading = True, ) REQUIRED String: account_id This is the account number you get from Oanda API. You can find it in Oanda Web after signing in. The primary account number is the one you want, and it looks something like: Client().account_id = \"000-000-0000000-000\" Note the account_id is a string. client = Client() client.account_id = \"000-000-0000000-000\" You get 2 account ID's. Switch between demo and live mode in Oanda Web to access either. Either can be used, but later on, the demo account id must be used with the demo api token. Be sure you know which goes with which. 400 Status Code: Mixing Live and Demo Account ID's Mixing a demo account id and a live api token and vice versa will result in a 400 status code. Be sure you use the demo account id with the demo api token. REQUIRED String: api_token This is the api token you get for access to the Oanda REST API. You can get it two ways: Either find it in Manage API Access | Oanda after signing in, Or click API in Oanda Web . Both take you to the same place, really. Client().api_token = \"7f544b72a6a537cbfe8fc1630d0b5be9-9773f3d9e2a2be0c89236625cb3b2f6d\" Note the api_token is a string just like account_id client = Client() client.api_token = \"7f544b72a6a537cbfe8fc1630d0b5be9-9773f3d9e2a2be0c89236625cb3b2f6d\" 400 Status Code: Mixing Live and Demo API Tokens Just like the warning in the account_id section, mixing a demo account id and a live api token or vice versa will result in a 400 status code. String: base_url Don't touch this. It is automatically generated by the is_paper_trading argument. It's one of two things depending in if you are trading with real money or fake \"paper\" money. If is_paper_trading is True, then Client().base_url = \"https://api-fxpractice.oanda.com\" Otherwise is_paper_trading is False, and Client().base_url = \"https://api-fxtrade.oanda.com\" 400 Status Code: Editing base_url Editing this property may result in a malformed URL, and Oanda will return a 400 status code. There are only two correct base URLs. Dictionary: header Don't touch this either. The header is automatically generated when the api token is set, and gets passed with the REST API call to Oanda when you call a method in the SDK that sends a request to Oanda. The header is a dictionary like this, where API_TOKEN is the api token that you generated: { 'Content-Type': 'application/json', 'Authorization': 'Bearer API_TOKEN', } 400 Status Code: Malformed Header A malformed header will result in a 400 status code from Oanda. Boolean: is_paper_trading This is here to make setting the base url easier. Client().is_paper_trading = False client = Client() client.is_paper_trading = False 400 Status Code: Mixing Paper Trading with Live Account ID's and Headers Setting is_paper_trading to True, and using a live account_id or api_token will result in a 400 status code. Methods These are the currently supported functions that instances of Client Class can call. set_account_id() Client().set_account_id(ACCOUNT_ID) set_api_token() Client().set_api_token(API_TOKEN) set_is_paper_trading() Client().set_is_paper_trading(False) set_header() Never Call this function. This gets called automatically when set_api_token() is called. Client().set_header() set_base_url() Never call this function. This gets called automatically when set_api_token() is called. Client().set_base_url(ACCOUNT_ID)","title":"Client Class"},{"location":"api/client/#client-class","text":"Get an Oanda Account You need to apply for an Oanda account and get your api token and account number to run any of the code in the Client Class.","title":"Client Class"},{"location":"api/client/#usage","text":"","title":"Usage"},{"location":"api/client/#import","text":"from oanda.client import Client","title":"Import"},{"location":"api/client/#interface","text":"Set these properties in your code. client = Client( account_id = DEMO_ACCOUNT_ID, api_token = DEMO_API_TOKEN, is_paper_trading = True, ) Call these methods in your code. client.set_account_id(LIVE_ACCOUNT_ID) client.set_api_token(LIVE_API_TOKEN) client.set_is_paper_trading(False)","title":"Interface"},{"location":"api/client/#pass-the-client-to-other-classes","text":"The Client class is the first object you need to initialize before using the rest of the sdk, and it gets passed to the other classes like so: client = Client() account = Account(client) 400 Status Code: Not Setting Account Information The example above will break when the Account Class tries to call any of its methods. Be sure both account_id AND api_token are set.","title":"Pass the Client to Other Classes"},{"location":"api/client/#properties","text":"","title":"Properties"},{"location":"api/client/#defaults","text":"Client( account_id = \"\", api_token = \"\", is_paper_trading = True, )","title":"Defaults"},{"location":"api/client/#required-string-account_id","text":"This is the account number you get from Oanda API. You can find it in Oanda Web after signing in. The primary account number is the one you want, and it looks something like: Client().account_id = \"000-000-0000000-000\" Note the account_id is a string. client = Client() client.account_id = \"000-000-0000000-000\" You get 2 account ID's. Switch between demo and live mode in Oanda Web to access either. Either can be used, but later on, the demo account id must be used with the demo api token. Be sure you know which goes with which. 400 Status Code: Mixing Live and Demo Account ID's Mixing a demo account id and a live api token and vice versa will result in a 400 status code. Be sure you use the demo account id with the demo api token.","title":"REQUIRED String: account_id"},{"location":"api/client/#required-string-api_token","text":"This is the api token you get for access to the Oanda REST API. You can get it two ways: Either find it in Manage API Access | Oanda after signing in, Or click API in Oanda Web . Both take you to the same place, really. Client().api_token = \"7f544b72a6a537cbfe8fc1630d0b5be9-9773f3d9e2a2be0c89236625cb3b2f6d\" Note the api_token is a string just like account_id client = Client() client.api_token = \"7f544b72a6a537cbfe8fc1630d0b5be9-9773f3d9e2a2be0c89236625cb3b2f6d\" 400 Status Code: Mixing Live and Demo API Tokens Just like the warning in the account_id section, mixing a demo account id and a live api token or vice versa will result in a 400 status code.","title":"REQUIRED String: api_token"},{"location":"api/client/#string-base_url","text":"Don't touch this. It is automatically generated by the is_paper_trading argument. It's one of two things depending in if you are trading with real money or fake \"paper\" money. If is_paper_trading is True, then Client().base_url = \"https://api-fxpractice.oanda.com\" Otherwise is_paper_trading is False, and Client().base_url = \"https://api-fxtrade.oanda.com\" 400 Status Code: Editing base_url Editing this property may result in a malformed URL, and Oanda will return a 400 status code. There are only two correct base URLs.","title":"String: base_url"},{"location":"api/client/#dictionary-header","text":"Don't touch this either. The header is automatically generated when the api token is set, and gets passed with the REST API call to Oanda when you call a method in the SDK that sends a request to Oanda. The header is a dictionary like this, where API_TOKEN is the api token that you generated: { 'Content-Type': 'application/json', 'Authorization': 'Bearer API_TOKEN', } 400 Status Code: Malformed Header A malformed header will result in a 400 status code from Oanda.","title":"Dictionary: header"},{"location":"api/client/#boolean-is_paper_trading","text":"This is here to make setting the base url easier. Client().is_paper_trading = False client = Client() client.is_paper_trading = False 400 Status Code: Mixing Paper Trading with Live Account ID's and Headers Setting is_paper_trading to True, and using a live account_id or api_token will result in a 400 status code.","title":"Boolean: is_paper_trading"},{"location":"api/client/#methods","text":"These are the currently supported functions that instances of Client Class can call.","title":"Methods"},{"location":"api/client/#set_account_id","text":"Client().set_account_id(ACCOUNT_ID)","title":"set_account_id()"},{"location":"api/client/#set_api_token","text":"Client().set_api_token(API_TOKEN)","title":"set_api_token()"},{"location":"api/client/#set_is_paper_trading","text":"Client().set_is_paper_trading(False)","title":"set_is_paper_trading()"},{"location":"api/client/#set_header","text":"Never Call this function. This gets called automatically when set_api_token() is called. Client().set_header()","title":"set_header()"},{"location":"api/client/#set_base_url","text":"Never call this function. This gets called automatically when set_api_token() is called. Client().set_base_url(ACCOUNT_ID)","title":"set_base_url()"},{"location":"api/overview/","text":"API Reference Welcome to the API Reference for Oanda-SDK! Oanda-SDK is built to be an exact mapping of the REST api for Oanda . Here you'll find a reference of Oanda-SDK's classes, properties, and methods in great detail. Check out Getting Started for a installation, walk-through, and a broad overview of the project, or read on for a deep dive into Oanda-SDK. Design Pattern The builder design pattern is the basis for Oanda-SDK: You've gotta create an instance of the Client Class before using the main classes that make REST api calls: Account, Instrument, Order, Trade, Position, Transaction, and Pricing. Each of which takes an instance of the Client Class as an argument to make the API calls. Only the Client Class holds data relating to API tokens, account numbers, and headers.","title":"Overview"},{"location":"api/overview/#api-reference","text":"","title":"API Reference"},{"location":"api/overview/#welcome-to-the-api-reference-for-oanda-sdk","text":"Oanda-SDK is built to be an exact mapping of the REST api for Oanda . Here you'll find a reference of Oanda-SDK's classes, properties, and methods in great detail. Check out Getting Started for a installation, walk-through, and a broad overview of the project, or read on for a deep dive into Oanda-SDK.","title":"Welcome to the API Reference for Oanda-SDK!"},{"location":"api/overview/#design-pattern","text":"The builder design pattern is the basis for Oanda-SDK: You've gotta create an instance of the Client Class before using the main classes that make REST api calls: Account, Instrument, Order, Trade, Position, Transaction, and Pricing. Each of which takes an instance of the Client Class as an argument to make the API calls. Only the Client Class holds data relating to API tokens, account numbers, and headers.","title":"Design Pattern"}]}