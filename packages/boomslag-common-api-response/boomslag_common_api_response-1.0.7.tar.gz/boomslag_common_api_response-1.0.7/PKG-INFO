Metadata-Version: 2.1
Name: boomslag_common_api_response
Version: 1.0.7
Summary: Standard APIReponse for Boomslag Microservices
Home-page: https://boomslag.com
Author: Boomslag
Author-email: mail@boomslag.com
Maintainer-email: support@boomslag.com
License: MIT
Keywords: boomslag common api response
Classifier: Environment :: Web Environment
Classifier: Framework :: Django
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.5
Classifier: Programming Language :: Python :: 3.6
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Description-Content-Type: text/markdown
License-File: LICENSE

Boomslag Common API Response
=============================

To use the Boomslag Django API Response Views package, follow these steps:

#. Install the package in your Django project by running the following command:

    pip install boomslag-common-api-response

#. Add 'api_response' to your Django installed apps in your project's settings.py file:

    INSTALLED_APPS = [
        ...
        'boomslag_api_response',
    ]

#. In your Django views, import the BaseAPIView class from the package:

    from boomslag_api_response.views import BaseAPIView

#. Use the BaseAPIView class as the base class for your Django view. You can then use the following methods to send responses to the client:

* `send_response(data=None, status=status.HTTP_200_OK)`: Sends a successful response to the client. The data parameter is optional and can be used to include additional data in the response. The status parameter can be used to specify the HTTP status code of the response.

* `send_error(error, status=status.HTTP_400_BAD_REQUEST)`: Sends an error response to the client. The error parameter is required and should be a string describing the error. The status parameter can be used to specify the HTTP status code of the response.

*Here is an example view* that demonstrates how to use the BaseAPIView class:

    class HelloWorldView(BaseAPIView):
        def get(self, request, format=None):
            if request.GET.get('success'):
                return self.send_response('Hello World!')
            else:
                return self.send_error('Hello Errors!')

When the client sends a request with the success parameter set to true, this view will send a successful response with the message "Hello World!". Otherwise, it will send an error response with the message "Hello Errors!".

The response sent to the client will have the following format:

    {
        "success": true,
        "data": "Hello World!"
    }

or

    {
        "success": false,
        "data": "Hello Errors!"
    }

You can then use the success and data fields in the client to determine the outcome of the request and process the response accordingly.
