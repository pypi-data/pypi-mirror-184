# -*- coding: utf-8 -*-
from setuptools import setup

package_dir = \
{'': 'src'}

packages = \
['DroidRpc', 'DroidRpc.converter', 'DroidRpc.grpc_interface']

package_data = \
{'': ['*']}

install_requires = \
['grpcio-tools>=1.51.1,<2.0.0', 'grpcio>=1.51.1,<2.0.0', 'pandas>=1.5.2,<2.0.0']

setup_kwargs = {
    'name': 'droidrpc',
    'version': '1.4.4',
    'description': "Python client for connecting to LORA Technologies' bot services.",
    'long_description': '# LORA Technologies\' Bot Client\nClient for LORA Tech\'s bot services.\n\n**Example**  \nA working example script that you can try can be found at https://github.com/asklora/Droid-Client/blob/production/example_usage.py\n\n\n## Usage:  \n### Bot Creation\n```\nClient.create_bot(args, **kwargs)\n\nArgs:\n    ticker (str): cRIC code for which stock to create a bot for\n    spot_date (str): Date for bot creations.\n    investment_amount (float): Amount of cash the bot can use.\n    bot_id (str): The type of bot to use (e.g. CLASSIC_classic_025)\n\nKwargs:\n    margin (int): Amount of margin the bot is allowed to use. Defaults to 1.\n    price (float): Price of the stock (any currency). Defaults to None (current price).\n    fractionals (bool): Whether the bot should use fractional shares. Defaults to False.\n\nReturns:\n    dict: Parsed bot service response.\n        {\n            barrier (float),              # \n            bot_id (str),                 # This bot\'s bot type\n            classic_vol (float),          # \n            created (str),                # Date of bot creation\n            delta (float),                # \n            entry_price (float),          # Price of stock when this bot was created\n            expiry (str),                 # Date of expiry\n            fractionals (bool),           # Whether this bot is allowed to use fractional shares\n            margin (int),                 # Amount of margin this bot is allowed to use\n            max_loss_amount (float),      # \n            max_loss_pct (float),         # \n            max_loss_price (float),       # \n            option_price (float),         # \n            q (float),                    # \n            r (float),                    # \n            share_num (float),            # Number of shares bought\n            side (str),                   # \n            spot_date (str),              # [For internal use]\n            status (str),                 # Status of this bot (i.e. active)\n            strike (float),               # \n            strike_2 (float),             # \n            t (int),                      # \n            target_profit_amount (float), # \n            target_profit_pct (float),    # \n            target_profit_price (float),  # \n            ticker (str),                 # RIC code\n            total_bot_share_num (int),    # Number of shares held by this bot\n            v1 (float),                   # \n            v2 (float),                   # \n            vol (float),                  # \n        }\n```\n\n### Hedging using an existing bot\n```\nClient.hedge(*args, **kwargs)\n\nArgs:\n    bot_id (str): Type of bot.\n    ticker (str): RIC code.\n    current_price (float): Current price (any currency).\n    entry_price (float): Price when the bot was created.\n    last_share_num (float): Number of shares currently held by the bot.\n    last_hedge_delta (float): Number of shares last sold/bought by the bot.\n    investment_amount (float): Total cash value the bot is allowed to manage.\n    bot_cash_balance (float): Remaining cash the bot has.\n    stop_loss_price (float): Stop loss level of the bot.\n    take_profit_price (float): Take profit level of the bot.\n    expiry (str): Date when the bot expires.\n\nKwargs:\n    strike (Optional[float]): _description_. Defaults to None.\n    strike_2 (Optional[float]): _description_. Defaults to None.\n    margin (Optional[int]): Amount of margin the bot can use. Defaults to 1.\n    fractionals (Optional[bool]): Whether this bot is allowed to use fractional shares. Defaults to False.\n    option_price (Optional[float]): _description_. Defaults to None.\n    barrier (Optional[float]): _description_. Defaults to None.\n    current_low_price (Optional[float]): _description_. Defaults to None.\n    current_high_price (Optional[float]): _description_. Defaults to None.\n    ask_price (Optional[float]): _description_. Defaults to None.\n    bid_price (Optional[float]): _description_. Defaults to None.\n    trading_day (Optional[str]): _description_. Defaults to datetime.strftime(datetime.now().date(), "%Y-%m-%d  ").\n\nReturns:\n    dict: Parsed bot service response\n        {\n            barrier (float),           # Take profit\n            current_price (float),     # Current price of stock\n            delta (float),             # \n            entry_price (float),       # \n            last_hedge_delta (float),  # \n            option_price (float),      # \n            q (float),                 # \n            r (float),                 # \n            share_change (float),      # \n            share_num (float),         # \n            side (str),                # \n            status (str),              # \n            strike (float),            # Target price\n            strike_2 (float),          # For ucdc we have two strikes\n            t (int),                   # \n            total_bot_share_num (int), # \n            v1 (float),                # \n            v2 (float),                # \n        }\n```\n\n### Stopping a bot\n```\nClient.stop(*args, **kwargs)\n\nArgs:\n    bot_id (str): Type of bot.\n    ticker (str): RIC code.\n    current_price (float): Current price (any currency).\n    entry_price (float): Price when the bot was created.\n    last_share_num (float): Number of shares currently held by the bot.\n    last_hedge_delta (float): Number of shares last sold/bought by the bot.\n    investment_amount (float): Total cash value the bot is allowed to manage.\n    bot_cash_balance (float): Remaining cash the bot has.\n    stop_loss_price (float): Stop loss level of the bot.\n    take_profit_price (float): Take profit level of the bot.\n    expiry (str): Date when the bot expires.\n\nKwargs:\n    strike (Optional[float]): _description_. Defaults to None.\n    strike_2 (Optional[float]): _description_. Defaults to None.\n    margin (Optional[int]): Amount of margin the bot can use. Defaults to 1.\n    fractionals (Optional[bool]): Whether this bot is allowed to use fractional shares. Defaults to False.\n    option_price (Optional[float]): _description_. Defaults to None.\n    barrier (Optional[float]): _description_. Defaults to None.\n    current_low_price (Optional[float]): _description_. Defaults to None.\n    current_high_price (Optional[float]): _description_. Defaults to None.\n    ask_price (Optional[float]): _description_. Defaults to None.\n    bid_price (Optional[float]): _description_. Defaults to None.\n    trading_day (Optional[str]): _description_. Defaults to datetime.strftime(datetime.now().date(), "%Y-%m-%d  ").\n\nReturns:\n    dict: Parsed bot service response\n        {\n            barrier (float),           # Take profit\n            current_price (float),     # Current price of stock\n            delta (float),             # \n            entry_price (float),       # \n            last_hedge_delta (float),  # \n            option_price (float),      # \n            q (float),                 # \n            r (float),                 # \n            share_change (float),      # \n            share_num (float),         # \n            side (str),                # \n            status (str),              # \n            strike (float),            # Target price\n            strike_2 (float),          # For ucdc we have two strikes\n            t (int),                   # \n            total_bot_share_num (int), # \n            v1 (float),                # \n            v2 (float),                # \n        }\n```\n',
    'author': 'LORA-Technologies',
    'author_email': 'None',
    'maintainer': 'None',
    'maintainer_email': 'None',
    'url': 'None',
    'package_dir': package_dir,
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'python_requires': '>=3.9,<4.0',
}


setup(**setup_kwargs)
