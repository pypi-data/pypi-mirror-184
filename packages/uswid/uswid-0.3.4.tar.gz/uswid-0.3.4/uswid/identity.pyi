from .entity import uSwidEntity as uSwidEntity, uSwidEntityRole as uSwidEntityRole
from .enums import uSwidGlobalMap as uSwidGlobalMap, uSwidVersionScheme as uSwidVersionScheme
from .errors import NotSupportedError as NotSupportedError
from .link import uSwidLink as uSwidLink
from _typeshed import Incomplete
from typing import List, Optional

class uSwidIdentity:
    tag_id: Incomplete
    tag_version: Incomplete
    software_name: Incomplete
    software_version: Incomplete
    version_scheme: Incomplete
    summary: Incomplete
    product: Incomplete
    colloquial_version: Incomplete
    revision: Incomplete
    edition: Incomplete
    persistent_id: Incomplete
    lang: str
    generator: str
    def __init__(self, tag_id: Optional[str] = ..., tag_version: int = ..., software_name: Optional[str] = ..., software_version: Optional[str] = ...) -> None: ...
    def merge(self, identity_new: uSwidIdentity) -> None: ...
    def add_entity(self, entity: uSwidEntity) -> None: ...
    def add_link(self, link: uSwidLink) -> None: ...
    @property
    def links(self) -> List[uSwidLink]: ...
    @property
    def entities(self) -> List[uSwidEntity]: ...
    def import_bytes(self, blob: bytes, offset: Optional[int] = ...) -> int: ...
    def import_xml(self, xml: bytes) -> None: ...
    def import_json(self, blob: bytes) -> None: ...
    def export_json(self) -> bytes: ...
    def import_pkg_config(self, txt: str, filepath: Optional[str] = ...) -> None: ...
    def import_ini(self, ini: str) -> None: ...
    def export_xml(self) -> bytes: ...
    def export_ini(self) -> str: ...
    def export_bytes(self) -> bytes: ...
