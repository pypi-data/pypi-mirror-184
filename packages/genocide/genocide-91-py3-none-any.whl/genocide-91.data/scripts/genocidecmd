#!python
# This file is placed in the Public Domain.
# pylint: disable=C0115,C0116


"@KarimKhanQC reconsider OTP-CR-117/19"


import inspect
import os
import sys
import termios
import traceback


sys.path.insert(0, os.getcwd())


from genocide import Cfg, Command, Handler, Wd, command, parse
from genocide.modules import cmd, irc, mdl, rss


Wd.workdir = os.path.expanduser("/var/lib/genocide/")


class CLI(Handler):

    @staticmethod
    def announce(txt):
        CLI.raw(txt)

    @staticmethod
    def raw(txt):
        cprint(txt)

    def say(self, channel, txt):
        self.raw(txt)


def cprint(txt):
    print(txt)
    sys.stdout.flush()


def scan(mod):
    for key, cmd in inspect.getmembers(mod, inspect.isfunction):
        if key.startswith("cb"):
            continue
        names = cmd.__code__.co_varnames
        if "event" in names:
            Command.add(cmd)


def scanner(mname, path=None):
    mods = importer(mname, path)
    scan(mods)


def wrap(func):
    fds = sys.stdin.fileno()
    gotterm = True
    try:
        old = termios.tcgetattr(fds)
    except termios.error:
        gotterm = False
    try:
        func()
    except (EOFError, KeyboardInterrupt):
        print("")
    finally:
        if gotterm:
            termios.tcsetattr(fds, termios.TCSADRAIN, old)
        for evt in Command.errors:
            ex = evt.__exc__
            traceback.print_exception(type(ex), ex, ex.__traceback__)


def main():
    print(os.environ)
    if not os.environ.get("INVOCATION_ID"):
        print("genocidecmd is to used from genocidectl")
        return
    parse(' '.join(sys.argv[1:]))
    scan(cmd)
    scan(irc)
    scan(mdl)
    scan(rss)
    cli = CLI()
    evt = command(cli, Cfg.prs.otxt)
    evt.wait()


wrap(main)
