#!/bin/bash -x

# Print the version information
${{SONARQUBE_PATH}}/sonar-scanner --version

# Capture C/C++ code
if [ -n "${{SONARQUBE_BUILD_CMD}}" ]; then
    # Change to the build directory
    cd ${{SONARQUBE_BUILD_DIR}}

    # Clean any previous builds
    ${{SONARQUBE_CLEAN_CMD}}

    # Build the code using the SonarQube build wrapper
    ${{SONARQUBE_WRAPPER_PATH}}/build-wrapper* --out-dir ${{TOOL_ANALYSIS_DIR}}/build_wrapper_output ${{SONARQUBE_BUILD_CMD}}

    # Change to the source root directory
    cd ${{SOURCE_DIR}}

    # Perform SonarQube analysis
    ${{SONARQUBE_PATH}}/sonar-scanner ${{SONARQUBE_SCANNER_FLAGS}} -X -D sonar.java.binaries=${{SOURCE_DIR}} -D sonar.cfamily.cache.enabled=false -D sonar.host.url=${{SONARQUBE_SERVER}} -D sonar.projectKey=${{SONARQUBE_PROJECT}} -D sonar.login=${{SONARQUBE_TOKEN}} -D sonar.cfamily.build-wrapper-output=${{TOOL_ANALYSIS_DIR}}/build_wrapper_output -D sonar.working.directory=${{TOOL_ANALYSIS_DIR}}/scanner_output

# Capture all other languages
else
    # Change to the source root directory
    cd ${{SOURCE_DIR}}

    # Perform SonarQube analysis
    ${{SONARQUBE_PATH}}/sonar-scanner ${{SONARQUBE_SCANNER_FLAGS}} -X -D sonar.java.binaries=${{SOURCE_DIR}} -D sonar.host.url=${{SONARQUBE_SERVER}} -D sonar.projectKey=${{SONARQUBE_PROJECT}} -D sonar.login=${{SONARQUBE_TOKEN}} -D sonar.working.directory=${{TOOL_ANALYSIS_DIR}}/scanner_output
fi

# Wait for results to be finalized
STATUS_URL=`tail -n 1 ${{TOOL_ANALYSIS_DIR}}/scanner_output/report-task.txt | cut -c11-`
ANALYSIS_SUCCESS=false
for i in {1..20}
do
    # Get the status
    STATUS=`curl -u ${{SONARQUBE_TOKEN}}: $STATUS_URL`

    # Check the contents
    if [[ "$STATUS" == *"\"status\":\"SUCCESS\""* ]]; then
       ANALYSIS_SUCCESS=true
       break
    else
       sleep 30
    fi
done

# Check if the analysis was successful
if ! $ANALYSIS_SUCCESS
then
    exit 1
fi

# Retrieve the results from the SonarQube server
PAGE=1
MORE_RESULTS=true
while $MORE_RESULTS; do
    # Get the page
    RESULTS_FILE=${{TOOL_ANALYSIS_DIR}}/sonarqube_issues_$PAGE.json
    curl -u ${{SONARQUBE_TOKEN}}: "${{SONARQUBE_SERVER}}/api/issues/search?ps=500&componentKeys=${{SONARQUBE_PROJECT}}&p=$PAGE&${{SONARQUBE_CURL_FLAGS}}" -o $RESULTS_FILE
    # Check to see if the file is empty
    if [ ! -s "$RESULTS_FILE" ]; then
        exit 1
    fi
    # Check the contents, verify file is not empty, and make sure the max page hasn't been reached
    if grep -q "Can return only the first 10000 results" $RESULTS_FILE; then
        echo "WARNING: Not all results have been retrieved."
        MORE_RESULTS=false
    elif [ $PAGE -gt 20 ]; then
        MORE_RESULTS=false
    elif grep -q "\"issues\":\[\]" $RESULTS_FILE; then
       rm -f $RESULTS_FILE
       MORE_RESULTS=false
    else
       PAGE=$((PAGE+1))
    fi
done

# Retrieve the hotspots from the SonarQube server
PAGE=1
MORE_RESULTS=true
while $MORE_RESULTS; do
    # Get the page
    RESULTS_FILE=${{TOOL_ANALYSIS_DIR}}/sonarqube_hotspots_$PAGE.json
    curl -u ${{SONARQUBE_TOKEN}}: "${{SONARQUBE_SERVER}}/api/hotspots/search?ps=500&projectKey=${{SONARQUBE_PROJECT}}&p=$PAGE&${{SONARQUBE_CURL_FLAGS}}" -o $RESULTS_FILE
    # Check to see if the file is empty
    if [ ! -s "$RESULTS_FILE" ]; then
        exit 1
    fi
    # Check the contents, verify file is not empty, and make sure the max page hasn't been reached
    if grep -q "Can return only the first 10000 results" $RESULTS_FILE; then
        echo "WARNING: Not all results have been retrieved."
        MORE_RESULTS=false
    elif [ $PAGE -gt 20 ]; then
        MORE_RESULTS=false
    elif grep -q "\"hotspots\":\[\]" $RESULTS_FILE; then
       rm -f $RESULTS_FILE
       MORE_RESULTS=false
    else
       PAGE=$((PAGE+1))
    fi
done

# Parse the results
python3 -m scrub.tools.parsers.get_sonarqube_warnings ${{TOOL_ANALYSIS_DIR}} ${{RAW_RESULTS_DIR}}/sonarqube_raw.scrub ${{SOURCE_DIR}} ${{SONARQUBE_SERVER}}